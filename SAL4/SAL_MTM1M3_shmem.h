#ifdef BUILD_FOR_LV

typedef signed char int8_t;
typedef short int int16_t;
typedef int int32_t;
typedef long int int64_t;
typedef unsigned char uint8_t;
typedef unsigned short int uint16_t;
typedef unsigned int uint32_t;
typedef unsigned long int uint64_t;
typedef unsigned char bool_t;
typedef struct {
	int size;
	bool_t data[1];
} BooleanArray;
typedef BooleanArray** BooleanArrayHdl;


typedef struct {
	int size;
	int8_t data[1];
} I8Array;
typedef I8Array** I8ArrayHdl;

typedef struct {
	int size;
	int16_t data[1];
} I16Array;
typedef I16Array** I16ArrayHdl;

typedef struct {
	int size;
	int data[1];
} I32Array;
typedef I32Array** I32ArrayHdl;

typedef struct {
	int size;
	int64_t data[1];
} I64Array;
typedef I64Array** I64ArrayHdl;

typedef struct {
	int size;
	uint8_t data[1];
} U8Array;
typedef U8Array** U8ArrayHdl;

typedef struct {
	int size;
	uint16_t data[1];
} U16Array;
typedef U16Array** U16ArrayHdl;

typedef struct {
	int size;
	uint32_t data[1];
} U32Array;
typedef U32Array** U32ArrayHdl;

typedef struct {
	int size;
	uint64_t data[1];
} U64Array;
typedef U64Array** U64ArrayHdl;

typedef struct {
	int size;
	float data[1];
} SGLArray;
typedef SGLArray** SGLArrayHdl;

typedef struct {
	int size;
	double data[1];
} DBLArray;
typedef DBLArray** DBLArrayHdl;

typedef struct {
	int size;
	char data[1];
} Str;
typedef Str** StrHdl;

typedef struct {
	int size;
	StrHdl data[1];
} StrArray;
typedef StrArray** StrArrayHdl;

typedef struct m1m3_AccelerometerDataLV {
  double Timestamp;
  SGLArrayHdl RawAccelerometer;
  SGLArrayHdl Accelerometer;
  float AngularAccelerationX;
  float AngularAccelerationY;
  float AngularAccelerationZ;
} m1m3_AccelerometerData_Ctl;
typedef struct m1m3_ForceActuatorDataLV {
  double Timestamp;
  SGLArrayHdl PrimaryCylinderForce;
  SGLArrayHdl SecondaryCylinderForce;
  SGLArrayHdl XForce;
  SGLArrayHdl YForce;
  SGLArrayHdl ZForce;
  float Fx;
  float Fy;
  float Fz;
  float Mx;
  float My;
  float Mz;
  float ForceMagnitude;
} m1m3_ForceActuatorData_Ctl;
typedef struct m1m3_GyroDataLV {
  double Timestamp;
  float AngularVelocityX;
  float AngularVelocityY;
  float AngularVelocityZ;
  short SequenceNumber;
  short Temperature;
} m1m3_GyroData_Ctl;
typedef struct m1m3_HardpointActuatorDataLV {
  double Timestamp;
  I32ArrayHdl StepsQueued;
  I16ArrayHdl StepsCommanded;
  SGLArrayHdl MeasuredForce;
  I32ArrayHdl Encoder;
  SGLArrayHdl Displacement;
  float Fx;
  float Fy;
  float Fz;
  float Mx;
  float My;
  float Mz;
  float ForceMagnitude;
  float XPosition;
  float YPosition;
  float ZPosition;
  float XRotation;
  float YRotation;
  float ZRotation;
} m1m3_HardpointActuatorData_Ctl;
typedef struct m1m3_HardpointMonitorDataLV {
  double Timestamp;
  SGLArrayHdl BreakawayLVDT;
  SGLArrayHdl DisplacementLVDT;
  SGLArrayHdl BreakawayPressure;
  SGLArrayHdl PressureSensor1;
  SGLArrayHdl PressureSensor2;
  SGLArrayHdl PressureSensor3;
} m1m3_HardpointMonitorData_Ctl;
typedef struct m1m3_IMSDataLV {
  double Timestamp;
  SGLArrayHdl RawSensorData;
  float XPosition;
  float YPosition;
  float ZPosition;
  float XRotation;
  float YRotation;
  float ZRotation;
} m1m3_IMSData_Ctl;
typedef struct m1m3_InclinometerDataLV {
  double Timestamp;
  float InclinometerAngle;
} m1m3_InclinometerData_Ctl;
typedef struct m1m3_OuterLoopDataLV {
  double Timestamp;
  short BroadcastCounter;
 bool_t SlewFlag;
  double ExecutionTime;
} m1m3_OuterLoopData_Ctl;
typedef struct m1m3_PIDDataLV {
  double Timestamp;
  DBLArrayHdl Setpoint;
  DBLArrayHdl Measurement;
  DBLArrayHdl Error;
  DBLArrayHdl ErrorT1;
  DBLArrayHdl ErrorT2;
  DBLArrayHdl Control;
  DBLArrayHdl ControlT1;
  DBLArrayHdl ControlT2;
} m1m3_PIDData_Ctl;
typedef struct m1m3_PowerSupplyDataLV {
  double Timestamp;
  float PowerNetworkACurrent;
  float PowerNetworkBCurrent;
  float PowerNetworkCCurrent;
  float PowerNetworkDCurrent;
  float LightPowerNetworkCurrent;
  float ControlsPowerNetworkCurrent;
} m1m3_PowerSupplyData_Ctl;
typedef struct m1m3_command_AbortProfileLV {
 bool_t AbortProfile;
} m1m3_command_AbortProfile_Ctl;
typedef struct m1m3_command_AbortRaiseM1M3LV {
 bool_t AbortRaiseM1M3;
} m1m3_command_AbortRaiseM1M3_Ctl;
typedef struct m1m3_command_ApplyAberrationForcesLV {
  SGLArrayHdl ZForces;
} m1m3_command_ApplyAberrationForces_Ctl;
typedef struct m1m3_command_ApplyAberrationForcesByBendingModesLV {
  SGLArrayHdl Coefficients;
} m1m3_command_ApplyAberrationForcesByBendingModes_Ctl;
typedef struct m1m3_command_ApplyActiveOpticForcesLV {
  SGLArrayHdl ZForces;
} m1m3_command_ApplyActiveOpticForces_Ctl;
typedef struct m1m3_command_ApplyActiveOpticForcesByBendingModesLV {
  SGLArrayHdl Coefficients;
} m1m3_command_ApplyActiveOpticForcesByBendingModes_Ctl;
typedef struct m1m3_command_ApplyOffsetForcesLV {
  SGLArrayHdl XForces;
  SGLArrayHdl YForces;
  SGLArrayHdl ZForces;
} m1m3_command_ApplyOffsetForces_Ctl;
typedef struct m1m3_command_ApplyOffsetForcesByMirrorForceLV {
  float XForce;
  float YForce;
  float ZForce;
  float XMoment;
  float YMoment;
  float ZMoment;
} m1m3_command_ApplyOffsetForcesByMirrorForce_Ctl;
typedef struct m1m3_command_ClearAberrationForcesLV {
 bool_t ClearAberrationForces;
} m1m3_command_ClearAberrationForces_Ctl;
typedef struct m1m3_command_ClearActiveOpticForcesLV {
 bool_t ClearActiveOpticForces;
} m1m3_command_ClearActiveOpticForces_Ctl;
typedef struct m1m3_command_ClearOffsetForcesLV {
 bool_t ClearOffsetForces;
} m1m3_command_ClearOffsetForces_Ctl;
typedef struct m1m3_command_DisableLV {
 bool_t Disable;
} m1m3_command_Disable_Ctl;
typedef struct m1m3_command_DisableHardpointChaseLV {
  short HardpointActuator;
} m1m3_command_DisableHardpointChase_Ctl;
typedef struct m1m3_command_DisableHardpointCorrectionsLV {
 bool_t DisableHardpointCorrections;
} m1m3_command_DisableHardpointCorrections_Ctl;
typedef struct m1m3_command_EnableLV {
 bool_t Enable;
} m1m3_command_Enable_Ctl;
typedef struct m1m3_command_EnableHardpointChaseLV {
  short HardpointActuator;
} m1m3_command_EnableHardpointChase_Ctl;
typedef struct m1m3_command_EnableHardpointCorrectionsLV {
 bool_t EnableHardpointCorrections;
} m1m3_command_EnableHardpointCorrections_Ctl;
typedef struct m1m3_command_EnterEngineeringLV {
 bool_t EnterEngineering;
} m1m3_command_EnterEngineering_Ctl;
typedef struct m1m3_command_ExitEngineeringLV {
 bool_t ExitEngineering;
} m1m3_command_ExitEngineering_Ctl;
typedef struct m1m3_command_LowerM1M3LV {
 bool_t LowerM1M3;
} m1m3_command_LowerM1M3_Ctl;
typedef struct m1m3_command_MoveHardpointActuatorsLV {
  I32ArrayHdl Steps;
} m1m3_command_MoveHardpointActuators_Ctl;
typedef struct m1m3_command_PositionM1M3LV {
  float XPosition;
  float YPosition;
  float ZPosition;
  float XRotation;
  float YRotation;
  float ZRotation;
} m1m3_command_PositionM1M3_Ctl;
typedef struct m1m3_command_ProgramILCLV {
  int ActuatorId;
  StrHdl FilePath; /* 256 */
} m1m3_command_ProgramILC_Ctl;
typedef struct m1m3_command_RaiseM1M3LV {
 bool_t RaiseM1M3;
 bool_t BypassReferencePosition;
} m1m3_command_RaiseM1M3_Ctl;
typedef struct m1m3_command_ResetPIDLV {
  short PID;
} m1m3_command_ResetPID_Ctl;
typedef struct m1m3_command_RunMirrorForceProfileLV {
  SGLArrayHdl XForce;
  SGLArrayHdl YForce;
  SGLArrayHdl ZForce;
  SGLArrayHdl XMoment;
  SGLArrayHdl YMoment;
  SGLArrayHdl ZMoment;
} m1m3_command_RunMirrorForceProfile_Ctl;
typedef struct m1m3_command_SetThermalSetpointLV {
  float Setpoint;
} m1m3_command_SetThermalSetpoint_Ctl;
typedef struct m1m3_command_ShutdownLV {
 bool_t Shutdown;
} m1m3_command_Shutdown_Ctl;
typedef struct m1m3_command_StandbyLV {
 bool_t Standby;
} m1m3_command_Standby_Ctl;
typedef struct m1m3_command_StartLV {
 bool_t Start;
  StrHdl SettingsToApply; /* 256 */
} m1m3_command_Start_Ctl;
typedef struct m1m3_command_StopHardpointMotionLV {
 bool_t StopHardpointMotion;
} m1m3_command_StopHardpointMotion_Ctl;
typedef struct m1m3_command_TestAirLV {
 bool_t TestAir;
} m1m3_command_TestAir_Ctl;
typedef struct m1m3_command_TestForceActuatorLV {
  short ForceActuator;
} m1m3_command_TestForceActuator_Ctl;
typedef struct m1m3_command_TestHardpointLV {
  short HardpointActuator;
} m1m3_command_TestHardpoint_Ctl;
typedef struct m1m3_command_TranslateM1M3LV {
  float XTranslation;
  float YTranslation;
  float ZTranslation;
  float XRotation;
  float YRotation;
  float ZRotation;
} m1m3_command_TranslateM1M3_Ctl;
typedef struct m1m3_command_TurnAirOffLV {
 bool_t TurnAirOff;
} m1m3_command_TurnAirOff_Ctl;
typedef struct m1m3_command_TurnAirOnLV {
 bool_t TurnAirOn;
} m1m3_command_TurnAirOn_Ctl;
typedef struct m1m3_command_TurnLightsOffLV {
 bool_t TurnLightsOff;
} m1m3_command_TurnLightsOff_Ctl;
typedef struct m1m3_command_TurnLightsOnLV {
 bool_t TurnLightsOn;
} m1m3_command_TurnLightsOn_Ctl;
typedef struct m1m3_command_TurnPowerOffLV {
 bool_t TurnPowerNetworkAOff;
 bool_t TurnPowerNetworkBOff;
 bool_t TurnPowerNetworkCOff;
 bool_t TurnPowerNetworkDOff;
 bool_t TurnAuxPowerNetworkAOff;
 bool_t TurnAuxPowerNetworkBOff;
 bool_t TurnAuxPowerNetworkCOff;
 bool_t TurnAuxPowerNetworkDOff;
} m1m3_command_TurnPowerOff_Ctl;
typedef struct m1m3_command_TurnPowerOnLV {
 bool_t TurnPowerNetworkAOn;
 bool_t TurnPowerNetworkBOn;
 bool_t TurnPowerNetworkCOn;
 bool_t TurnPowerNetworkDOn;
 bool_t TurnAuxPowerNetworkAOn;
 bool_t TurnAuxPowerNetworkBOn;
 bool_t TurnAuxPowerNetworkCOn;
 bool_t TurnAuxPowerNetworkDOn;
} m1m3_command_TurnPowerOn_Ctl;
typedef struct m1m3_command_UpdatePIDLV {
  short PID;
  double Timestep;
  double P;
  double I;
  double D;
  double N;
} m1m3_command_UpdatePID_Ctl;
typedef struct m1m3_logevent_AccelerometerWarningLV {
  double Timestamp;
 bool_t AnyWarning;
 bool_t ResponseTimeout;
  int priority;
} m1m3_logevent_AccelerometerWarning_Ctl;
typedef struct m1m3_logevent_AirSupplyStatusLV {
  double Timestamp;
 bool_t AirCommandedOn;
 bool_t AirCommandOutputOn;
 bool_t AirValveOpened;
 bool_t AirValveClosed;
  int priority;
} m1m3_logevent_AirSupplyStatus_Ctl;
typedef struct m1m3_logevent_AirSupplyWarningLV {
  double Timestamp;
 bool_t AnyWarning;
 bool_t CommandOutputMismatch;
 bool_t CommandSensorMismatch;
  int priority;
} m1m3_logevent_AirSupplyWarning_Ctl;
typedef struct m1m3_logevent_AppliedAberrationForcesLV {
  double Timestamp;
  SGLArrayHdl ZForces;
  float Fz;
  float Mx;
  float My;
  int priority;
} m1m3_logevent_AppliedAberrationForces_Ctl;
typedef struct m1m3_logevent_AppliedAccelerationForcesLV {
  double Timestamp;
  SGLArrayHdl XForces;
  SGLArrayHdl YForces;
  SGLArrayHdl ZForces;
  float Fx;
  float Fy;
  float Fz;
  float Mx;
  float My;
  float Mz;
  float ForceMagnitude;
  int priority;
} m1m3_logevent_AppliedAccelerationForces_Ctl;
typedef struct m1m3_logevent_AppliedActiveOpticForcesLV {
  double Timestamp;
  SGLArrayHdl ZForces;
  float Fz;
  float Mx;
  float My;
  int priority;
} m1m3_logevent_AppliedActiveOpticForces_Ctl;
typedef struct m1m3_logevent_AppliedAzimuthForcesLV {
  double Timestamp;
  SGLArrayHdl XForces;
  SGLArrayHdl YForces;
  SGLArrayHdl ZForces;
  float Fx;
  float Fy;
  float Fz;
  float Mx;
  float My;
  float Mz;
  float ForceMagnitude;
  int priority;
} m1m3_logevent_AppliedAzimuthForces_Ctl;
typedef struct m1m3_logevent_AppliedBalanceForcesLV {
  double Timestamp;
  SGLArrayHdl XForces;
  SGLArrayHdl YForces;
  SGLArrayHdl ZForces;
  float Fx;
  float Fy;
  float Fz;
  float Mx;
  float My;
  float Mz;
  float ForceMagnitude;
  int priority;
} m1m3_logevent_AppliedBalanceForces_Ctl;
typedef struct m1m3_logevent_AppliedCylinderForcesLV {
  double Timestamp;
  I32ArrayHdl SecondaryCylinderForces;
  I32ArrayHdl PrimaryCylinderForces;
  int priority;
} m1m3_logevent_AppliedCylinderForces_Ctl;
typedef struct m1m3_logevent_AppliedElevationForcesLV {
  double Timestamp;
  SGLArrayHdl XForces;
  SGLArrayHdl YForces;
  SGLArrayHdl ZForces;
  float Fx;
  float Fy;
  float Fz;
  float Mx;
  float My;
  float Mz;
  float ForceMagnitude;
  int priority;
} m1m3_logevent_AppliedElevationForces_Ctl;
typedef struct m1m3_logevent_AppliedForcesLV {
  double Timestamp;
  SGLArrayHdl XForces;
  SGLArrayHdl YForces;
  SGLArrayHdl ZForces;
  float Fx;
  float Fy;
  float Fz;
  float Mx;
  float My;
  float Mz;
  float ForceMagnitude;
  int priority;
} m1m3_logevent_AppliedForces_Ctl;
typedef struct m1m3_logevent_AppliedOffsetForcesLV {
  double Timestamp;
  SGLArrayHdl XForces;
  SGLArrayHdl YForces;
  SGLArrayHdl ZForces;
  float Fx;
  float Fy;
  float Fz;
  float Mx;
  float My;
  float Mz;
  float ForceMagnitude;
  int priority;
} m1m3_logevent_AppliedOffsetForces_Ctl;
typedef struct m1m3_logevent_AppliedSettingsMatchStartLV {
  double Timestamp;
 bool_t AppliedSettingsMatchStart;
  int priority;
} m1m3_logevent_AppliedSettingsMatchStart_Ctl;
typedef struct m1m3_logevent_AppliedStaticForcesLV {
  double Timestamp;
  SGLArrayHdl XForces;
  SGLArrayHdl YForces;
  SGLArrayHdl ZForces;
  float Fx;
  float Fy;
  float Fz;
  float Mx;
  float My;
  float Mz;
  float ForceMagnitude;
  int priority;
} m1m3_logevent_AppliedStaticForces_Ctl;
typedef struct m1m3_logevent_AppliedThermalForcesLV {
  double Timestamp;
  SGLArrayHdl XForces;
  SGLArrayHdl YForces;
  SGLArrayHdl ZForces;
  float Fx;
  float Fy;
  float Fz;
  float Mx;
  float My;
  float Mz;
  float ForceMagnitude;
  int priority;
} m1m3_logevent_AppliedThermalForces_Ctl;
typedef struct m1m3_logevent_AppliedVelocityForcesLV {
  double Timestamp;
  SGLArrayHdl XForces;
  SGLArrayHdl YForces;
  SGLArrayHdl ZForces;
  float Fx;
  float Fy;
  float Fz;
  float Mx;
  float My;
  float Mz;
  float ForceMagnitude;
  int priority;
} m1m3_logevent_AppliedVelocityForces_Ctl;
typedef struct m1m3_logevent_CellLightStatusLV {
  double Timestamp;
 bool_t CellLightsCommandedOn;
 bool_t CellLightsOutputOn;
 bool_t CellLightsOn;
  int priority;
} m1m3_logevent_CellLightStatus_Ctl;
typedef struct m1m3_logevent_CellLightWarningLV {
  double Timestamp;
 bool_t AnyWarning;
 bool_t CellLightsOutputMismatch;
 bool_t CellLightsSensorMismatch;
  int priority;
} m1m3_logevent_CellLightWarning_Ctl;
typedef struct m1m3_logevent_CommandRejectionWarningLV {
  double Timestamp;
  StrHdl Command; /* 64 */
  StrHdl Reason; /* 128 */
  int priority;
} m1m3_logevent_CommandRejectionWarning_Ctl;
typedef struct m1m3_logevent_DetailedStateLV {
  double Timestamp;
  int DetailedState;
  int priority;
} m1m3_logevent_DetailedState_Ctl;
typedef struct m1m3_logevent_DisplacementSensorWarningLV {
  double Timestamp;
 bool_t AnyWarning;
 bool_t SensorReportsInvalidCommand;
 bool_t SensorReportsCommunicationTimeoutError;
 bool_t SensorReportsDataLengthError;
 bool_t SensorReportsNumberOfParametersError;
 bool_t SensorReportsParameterError;
 bool_t SensorReportsCommunicationError;
 bool_t SensorReportsIDNumberError;
 bool_t SensorReportsExpansionLineError;
 bool_t SensorReportsWriteControlError;
 bool_t ResponseTimeout;
 bool_t InvalidLength;
 bool_t InvalidResponse;
 bool_t UnknownCommand;
 bool_t UnknownProblem;
  int priority;
} m1m3_logevent_DisplacementSensorWarning_Ctl;
typedef struct m1m3_logevent_ErrorCodeLV {
  double Timestamp;
  int ErrorCode;
  int DetailedErrorCode;
  int priority;
} m1m3_logevent_ErrorCode_Ctl;
typedef struct m1m3_logevent_ForceActuatorForceWarningLV {
  double Timestamp;
 bool_t AnyWarning;
 bool_t AnyPrimaryAxisMeasuredForceWarning;
  BooleanArrayHdl PrimaryAxisMeasuredForceWarning;
 bool_t AnySecondaryAxisMeasuredForceWarning;
  BooleanArrayHdl SecondaryAxisMeasuredForceWarning;
 bool_t AnyPrimaryAxisFollowingErrorWarning;
  BooleanArrayHdl PrimaryAxisFollowingErrorWarning;
 bool_t AnySecondaryAxisFollowingErrorWarning;
  BooleanArrayHdl SecondaryAxisFollowingErrorWarning;
  int priority;
} m1m3_logevent_ForceActuatorForceWarning_Ctl;
typedef struct m1m3_logevent_ForceActuatorInfoLV {
  double Timestamp;
  I16ArrayHdl ReferenceId;
  I16ArrayHdl XDataReferenceId;
  I16ArrayHdl YDataReferenceId;
  I16ArrayHdl ZDataReferenceId;
  I16ArrayHdl ActuatorType;
  I16ArrayHdl ActuatorOrientation;
  I16ArrayHdl ModbusSubnet;
  I16ArrayHdl ModbusAddress;
  SGLArrayHdl XPosition;
  SGLArrayHdl YPosition;
  SGLArrayHdl ZPosition;
  I64ArrayHdl ILCUniqueId;
  I16ArrayHdl ILCApplicationType;
  I16ArrayHdl NetworkNodeType;
  I16ArrayHdl ILCSelectedOptions;
  I16ArrayHdl NetworkNodeOptions;
  I16ArrayHdl MajorRevision;
  I16ArrayHdl MinorRevision;
  I16ArrayHdl ADCScanRate;
  SGLArrayHdl MainPrimaryCylinderCoefficient;
  SGLArrayHdl MainSecondaryCylinderCoefficient;
  SGLArrayHdl MainPrimaryCylinderLoadCellOffset;
  SGLArrayHdl MainSecondaryCylinderLoadCellOffset;
  SGLArrayHdl MainPrimaryCylinderLoadCellSensitivity;
  SGLArrayHdl MainSecondaryCylinderLoadCellSensitivity;
  SGLArrayHdl BackupPrimaryCylinderCoefficient;
  SGLArrayHdl BackupSecondaryCylinderCoefficient;
  SGLArrayHdl BackupPrimaryCylinderLoadCellOffset;
  SGLArrayHdl BackupSecondaryCylinderLoadCellOffset;
  SGLArrayHdl BackupPrimaryCylinderLoadCellSensitivity;
  SGLArrayHdl BackupSecondaryCylinderLoadCellSensitivity;
  SGLArrayHdl MezzaninePrimaryCylinderGain;
  SGLArrayHdl MezzanineSecondaryCylinderGain;
  I64ArrayHdl MezzanineUniqueId;
  I16ArrayHdl MezzanineFirmwareType;
  I16ArrayHdl MezzanineMajorRevision;
  I16ArrayHdl MezzanineMinorRevision;
  int priority;
} m1m3_logevent_ForceActuatorInfo_Ctl;
typedef struct m1m3_logevent_ForceActuatorStateLV {
  double Timestamp;
  I16ArrayHdl ILCState;
 bool_t SlewFlag;
 bool_t StaticForcesApplied;
 bool_t ElevationForcesApplied;
 bool_t AzimuthForcesApplied;
 bool_t ThermalForcesApplied;
 bool_t OffsetForcesApplied;
 bool_t AccelerationForcesApplied;
 bool_t VelocityForcesApplied;
 bool_t ActiveOpticForcesApplied;
 bool_t AberrationForcesApplied;
 bool_t BalanceForcesApplied;
  float SupportPercentage;
  int priority;
} m1m3_logevent_ForceActuatorState_Ctl;
typedef struct m1m3_logevent_ForceActuatorWarningLV {
  double Timestamp;
 bool_t AnyWarning;
 bool_t AnyMajorFault;
  BooleanArrayHdl MajorFault;
 bool_t AnyMinorFault;
  BooleanArrayHdl MinorFault;
 bool_t AnyFaultOverride;
  BooleanArrayHdl FaultOverride;
 bool_t AnyMainCalibrationError;
  BooleanArrayHdl MainCalibrationError;
 bool_t AnyBackupCalibrationError;
  BooleanArrayHdl BackupCalibrationError;
 bool_t AnyMezzanineError;
  BooleanArrayHdl MezzanineError;
 bool_t AnyMezzanineBootloaderActive;
  BooleanArrayHdl MezzanineBootloaderActive;
 bool_t AnyUniqueIdCRCError;
  BooleanArrayHdl UniqueIdCRCError;
 bool_t AnyApplicationTypeMismatch;
  BooleanArrayHdl ApplicationTypeMismatch;
 bool_t AnyApplicationMissing;
  BooleanArrayHdl ApplicationMissing;
 bool_t AnyApplicationCRCMismatch;
  BooleanArrayHdl ApplicationCRCMismatch;
 bool_t AnyOneWireMissing;
  BooleanArrayHdl OneWireMissing;
 bool_t AnyOneWire1Mismatch;
  BooleanArrayHdl OneWire1Mismatch;
 bool_t AnyOneWire2Mismatch;
  BooleanArrayHdl OneWire2Mismatch;
 bool_t AnyWatchdogReset;
  BooleanArrayHdl WatchdogReset;
 bool_t AnyBrownOut;
  BooleanArrayHdl BrownOut;
 bool_t AnyEventTrapReset;
  BooleanArrayHdl EventTrapReset;
 bool_t AnySSRPowerFault;
  BooleanArrayHdl SSRPowerFault;
 bool_t AnyAuxPowerFault;
  BooleanArrayHdl AuxPowerFault;
 bool_t AnyMezzaninePowerFault;
  BooleanArrayHdl MezzaninePowerFault;
 bool_t AnyMezzanineCurrentAmp1Fault;
  BooleanArrayHdl MezzanineCurrentAmp1Fault;
 bool_t AnyMezzanineCurrentAmp2Fault;
  BooleanArrayHdl MezzanineCurrentAmp2Fault;
 bool_t AnyMezzanineUniqueIdCRCError;
  BooleanArrayHdl MezzanineUniqueIdCRCError;
 bool_t AnyMezzanineMainCalibrationError;
  BooleanArrayHdl MezzanineMainCalibrationError;
 bool_t AnyMezzanineBackupCalibrationError;
  BooleanArrayHdl MezzanineBackupCalibrationError;
 bool_t AnyMezzanineEventTrapReset;
  BooleanArrayHdl MezzanineEventTrapReset;
 bool_t AnyMezzanineApplicationMissing;
  BooleanArrayHdl MezzanineApplicationMissing;
 bool_t AnyMezzanineApplicationCRCMismatch;
  BooleanArrayHdl MezzanineApplicationCRCMismatch;
 bool_t AnyILCFault;
  BooleanArrayHdl ILCFault;
 bool_t AnyBroadcastCounterWarning;
  BooleanArrayHdl BroadcastCounterWarning;
  int priority;
} m1m3_logevent_ForceActuatorWarning_Ctl;
typedef struct m1m3_logevent_ForceSetpointWarningLV {
  double Timestamp;
 bool_t AnyWarning;
 bool_t AnySafetyLimitWarning;
  BooleanArrayHdl SafetyLimitWarning;
 bool_t XMomentWarning;
 bool_t YMomentWarning;
 bool_t ZMomentWarning;
 bool_t AnyNearNeighborWarning;
  BooleanArrayHdl NearNeighborWarning;
 bool_t MagnitudeWarning;
 bool_t AnyFarNeighborWarning;
  BooleanArrayHdl FarNeighborWarning;
 bool_t AnyElevationForceWarning;
  BooleanArrayHdl ElevationForceWarning;
 bool_t AnyAzimuthForceWarning;
  BooleanArrayHdl AzimuthForceWarning;
 bool_t AnyThermalForceWarning;
  BooleanArrayHdl ThermalForceWarning;
 bool_t AnyBalanceForceWarning;
  BooleanArrayHdl BalanceForceWarning;
 bool_t AnyAccelerationForceWarning;
  BooleanArrayHdl AccelerationForceWarning;
 bool_t ActiveOpticNetForceWarning;
 bool_t AnyActiveOpticForceWarning;
  BooleanArrayHdl ActiveOpticForceWarning;
 bool_t AnyStaticForceWarning;
  BooleanArrayHdl StaticForceWarning;
 bool_t AberrationNetForceWarning;
 bool_t AnyAberrationForceWarning;
  BooleanArrayHdl AberrationForceWarning;
 bool_t AnyOffsetForceWarning;
  BooleanArrayHdl OffsetForceWarning;
 bool_t AnyVelocityForceWarning;
  BooleanArrayHdl VelocityForceWarning;
 bool_t AnyForceWarning;
  BooleanArrayHdl ForceWarning;
  int priority;
} m1m3_logevent_ForceSetpointWarning_Ctl;
typedef struct m1m3_logevent_GyroWarningLV {
  double Timestamp;
 bool_t AnyWarning;
 bool_t GyroXStatusWarning;
 bool_t GyroYStatusWarning;
 bool_t GyroZStatusWarning;
 bool_t SequenceNumberWarning;
 bool_t CRCMismatchWarning;
 bool_t InvalidLengthWarning;
 bool_t InvalidHeaderWarning;
 bool_t IncompleteFrameWarning;
 bool_t GyroXSLDWarning;
 bool_t GyroXMODDACWarning;
 bool_t GyroXPhaseWarning;
 bool_t GyroXFlashWarning;
 bool_t GyroYSLDWarning;
 bool_t GyroYMODDACWarning;
 bool_t GyroYPhaseWarning;
 bool_t GyroYFlashWarning;
 bool_t GyroZSLDWarning;
 bool_t GyroZMODDACWarning;
 bool_t GyroZPhaseWarning;
 bool_t GyroZFlashWarning;
 bool_t GyroXSLDTemperatureStatusWarning;
 bool_t GyroYSLDTemperatureStatusWarning;
 bool_t GyroZSLDTemperatureStatusWarning;
 bool_t GCBTemperatureStatusWarning;
 bool_t TemperatureStatusWarning;
 bool_t GCBDSPSPIFlashStatusWarning;
 bool_t GCBFPGASPIFlashStatusWarning;
 bool_t DSPSPIFlashStatusWarning;
 bool_t FPGASPIFlashStatusWarning;
 bool_t GCB1_2VStatusWarning;
 bool_t GCB3_3VStatusWarning;
 bool_t GCB5VStatusWarning;
 bool_t V1_2StatusWarning;
 bool_t V3_3StatusWarning;
 bool_t V5StatusWarning;
 bool_t GCBFPGAStatusWarning;
 bool_t FPGAStatusWarning;
 bool_t HiSpeedSPORTStatusWarning;
 bool_t AuxSPORTStatusWarning;
 bool_t SufficientSoftwareResourcesWarning;
 bool_t GyroEOVoltsPositiveWarning;
 bool_t GyroEOVoltsNegativeWarning;
 bool_t GyroXVoltsWarning;
 bool_t GyroYVoltsWarning;
 bool_t GyroZVoltsWarning;
 bool_t GCBADCCommsWarning;
 bool_t MSYNCExternalTimingWarning;
  int priority;
} m1m3_logevent_GyroWarning_Ctl;
typedef struct m1m3_logevent_HardpointActuatorInfoLV {
  double Timestamp;
  I16ArrayHdl ReferenceId;
  I32ArrayHdl ReferencePosition;
  I16ArrayHdl ModbusSubnet;
  I16ArrayHdl ModbusAddress;
  SGLArrayHdl XPosition;
  SGLArrayHdl YPosition;
  SGLArrayHdl ZPosition;
  I64ArrayHdl ILCUniqueId;
  I16ArrayHdl ILCApplicationType;
  I16ArrayHdl NetworkNodeType;
  I16ArrayHdl ILCSelectedOptions;
  I16ArrayHdl NetworkNodeOptions;
  I16ArrayHdl MajorRevision;
  I16ArrayHdl MinorRevision;
  I16ArrayHdl ADCScanRate;
  SGLArrayHdl MainLoadCellCoefficient;
  SGLArrayHdl MainLoadCellOffset;
  SGLArrayHdl MainLoadCellSensitivity;
  SGLArrayHdl BackupLoadCellCoefficient;
  SGLArrayHdl BackupLoadCellOffset;
  SGLArrayHdl BackupLoadCellSensitivity;
  int priority;
} m1m3_logevent_HardpointActuatorInfo_Ctl;
typedef struct m1m3_logevent_HardpointActuatorStateLV {
  double Timestamp;
  I16ArrayHdl ILCState;
  I16ArrayHdl MotionState;
  int priority;
} m1m3_logevent_HardpointActuatorState_Ctl;
typedef struct m1m3_logevent_HardpointActuatorWarningLV {
  double Timestamp;
 bool_t AnyWarning;
 bool_t AnyMajorFault;
  BooleanArrayHdl MajorFault;
 bool_t AnyMinorFault;
  BooleanArrayHdl MinorFault;
 bool_t AnyFaultOverride;
  BooleanArrayHdl FaultOverride;
 bool_t AnyMainCalibrationError;
  BooleanArrayHdl MainCalibrationError;
 bool_t AnyBackupCalibrationError;
  BooleanArrayHdl BackupCalibrationError;
 bool_t AnyLimitSwitch1Operated;
  BooleanArrayHdl LimitSwitch1Operated;
 bool_t AnyLimitSwitch2Operated;
  BooleanArrayHdl LimitSwitch2Operated;
 bool_t AnyUniqueIdCRCError;
  BooleanArrayHdl UniqueIdCRCError;
 bool_t AnyApplicationTypeMismatch;
  BooleanArrayHdl ApplicationTypeMismatch;
 bool_t AnyApplicationMissing;
  BooleanArrayHdl ApplicationMissing;
 bool_t AnyApplicationCRCMismatch;
  BooleanArrayHdl ApplicationCRCMismatch;
 bool_t AnyOneWireMissing;
  BooleanArrayHdl OneWireMissing;
 bool_t AnyOneWire1Mismatch;
  BooleanArrayHdl OneWire1Mismatch;
 bool_t AnyOneWire2Mismatch;
  BooleanArrayHdl OneWire2Mismatch;
 bool_t AnyWatchdogReset;
  BooleanArrayHdl WatchdogReset;
 bool_t AnyBrownOut;
  BooleanArrayHdl BrownOut;
 bool_t AnyEventTrapReset;
  BooleanArrayHdl EventTrapReset;
 bool_t AnyMotorDriverFault;
  BooleanArrayHdl MotorDriverFault;
 bool_t AnySSRPowerFault;
  BooleanArrayHdl SSRPowerFault;
 bool_t AnyAuxPowerFault;
  BooleanArrayHdl AuxPowerFault;
 bool_t AnySMCPowerFault;
  BooleanArrayHdl SMCPowerFault;
 bool_t AnyILCFault;
  BooleanArrayHdl ILCFault;
 bool_t AnyBroadcastCounterWarning;
  BooleanArrayHdl BroadcastCounterWarning;
  int priority;
} m1m3_logevent_HardpointActuatorWarning_Ctl;
typedef struct m1m3_logevent_HardpointMonitorInfoLV {
  double Timestamp;
  I16ArrayHdl ReferenceId;
  I16ArrayHdl ModbusSubnet;
  I16ArrayHdl ModbusAddress;
  I64ArrayHdl ILCUniqueId;
  I16ArrayHdl ILCApplicationType;
  I16ArrayHdl NetworkNodeType;
  I16ArrayHdl MajorRevision;
  I16ArrayHdl MinorRevision;
  I64ArrayHdl MezzanineUniqueId;
  I16ArrayHdl MezzanineFirmwareType;
  I16ArrayHdl MezzanineMajorRevision;
  I16ArrayHdl MezzanineMinorRevision;
  int priority;
} m1m3_logevent_HardpointMonitorInfo_Ctl;
typedef struct m1m3_logevent_HardpointMonitorStateLV {
  double Timestamp;
  I16ArrayHdl ILCState;
  int priority;
} m1m3_logevent_HardpointMonitorState_Ctl;
typedef struct m1m3_logevent_HardpointMonitorWarningLV {
  double Timestamp;
 bool_t AnyWarning;
 bool_t AnyMajorFault;
  BooleanArrayHdl MajorFault;
 bool_t AnyMinorFault;
  BooleanArrayHdl MinorFault;
 bool_t AnyFaultOverride;
  BooleanArrayHdl FaultOverride;
 bool_t AnyInstrumentError;
  BooleanArrayHdl InstrumentError;
 bool_t AnyMezzanineError;
  BooleanArrayHdl MezzanineError;
 bool_t AnyMezzanineBootloaderActive;
  BooleanArrayHdl MezzanineBootloaderActive;
 bool_t AnyUniqueIdCRCError;
  BooleanArrayHdl UniqueIdCRCError;
 bool_t AnyApplicationTypeMismatch;
  BooleanArrayHdl ApplicationTypeMismatch;
 bool_t AnyApplicationMissing;
  BooleanArrayHdl ApplicationMissing;
 bool_t AnyApplicationCRCMismatch;
  BooleanArrayHdl ApplicationCRCMismatch;
 bool_t AnyOneWireMissing;
  BooleanArrayHdl OneWireMissing;
 bool_t AnyOneWire1Mismatch;
  BooleanArrayHdl OneWire1Mismatch;
 bool_t AnyOneWire2Mismatch;
  BooleanArrayHdl OneWire2Mismatch;
 bool_t AnyWatchdogReset;
  BooleanArrayHdl WatchdogReset;
 bool_t AnyBrownOut;
  BooleanArrayHdl BrownOut;
 bool_t AnyEventTrapReset;
  BooleanArrayHdl EventTrapReset;
 bool_t AnySSRPowerFault;
  BooleanArrayHdl SSRPowerFault;
 bool_t AnyAuxPowerFault;
  BooleanArrayHdl AuxPowerFault;
 bool_t AnyMezzanineS1AInterface1Fault;
  BooleanArrayHdl MezzanineS1AInterface1Fault;
 bool_t AnyMezzanineS1ALVDT1Fault;
  BooleanArrayHdl MezzanineS1ALVDT1Fault;
 bool_t AnyMezzanineS1AInterface2Fault;
  BooleanArrayHdl MezzanineS1AInterface2Fault;
 bool_t AnyMezzanineS1ALVDT2Fault;
  BooleanArrayHdl MezzanineS1ALVDT2Fault;
 bool_t AnyMezzanineUniqueIdCRCError;
  BooleanArrayHdl MezzanineUniqueIdCRCError;
 bool_t AnyMezzanineEventTrapReset;
  BooleanArrayHdl MezzanineEventTrapReset;
 bool_t AnyMezzanineDCPRS422ChipFault;
  BooleanArrayHdl MezzanineDCPRS422ChipFault;
 bool_t AnyMezzanineApplicationMissing;
  BooleanArrayHdl MezzanineApplicationMissing;
 bool_t AnyMezzanineApplicationCRCMismatch;
  BooleanArrayHdl MezzanineApplicationCRCMismatch;
  int priority;
} m1m3_logevent_HardpointMonitorWarning_Ctl;
typedef struct m1m3_logevent_ILCWarningLV {
  double Timestamp;
  int ActuatorId;
 bool_t AnyWarning;
 bool_t ResponseTimeout;
 bool_t InvalidCRC;
 bool_t IllegalFunction;
 bool_t IllegalDataValue;
 bool_t InvalidLength;
 bool_t UnknownSubnet;
 bool_t UnknownAddress;
 bool_t UnknownFunction;
 bool_t UnknownProblem;
  int priority;
} m1m3_logevent_ILCWarning_Ctl;
typedef struct m1m3_logevent_InclinometerSensorWarningLV {
  double Timestamp;
 bool_t AnyWarning;
 bool_t SensorReportsIllegalFunction;
 bool_t SensorReportsIllegalDataAddress;
 bool_t ResponseTimeout;
 bool_t InvalidCRC;
 bool_t InvalidLength;
 bool_t UnknownAddress;
 bool_t UnknownFunction;
 bool_t UnknownProblem;
  int priority;
} m1m3_logevent_InclinometerSensorWarning_Ctl;
typedef struct m1m3_logevent_InterlockStatusLV {
  double Timestamp;
 bool_t HeartbeatCommandedState;
 bool_t HeartbeatOutputState;
  int priority;
} m1m3_logevent_InterlockStatus_Ctl;
typedef struct m1m3_logevent_InterlockWarningLV {
  double Timestamp;
 bool_t AnyWarning;
 bool_t HeartbeatStateOutputMismatch;
 bool_t AuxPowerNetworksOff;
 bool_t ThermalEquipmentOff;
 bool_t AirSupplyOff;
 bool_t TMAMotionStop;
 bool_t GISHeartbeatLost;
 bool_t CabinetDoorOpen;
  int priority;
} m1m3_logevent_InterlockWarning_Ctl;
typedef struct m1m3_logevent_PIDInfoLV {
  double Timestamp;
  DBLArrayHdl Timestep;
  DBLArrayHdl P;
  DBLArrayHdl I;
  DBLArrayHdl D;
  DBLArrayHdl N;
  DBLArrayHdl CalculatedA;
  DBLArrayHdl CalculatedB;
  DBLArrayHdl CalculatedC;
  DBLArrayHdl CalculatedD;
  DBLArrayHdl CalculatedE;
  int priority;
} m1m3_logevent_PIDInfo_Ctl;
typedef struct m1m3_logevent_PowerStatusLV {
  double Timestamp;
 bool_t PowerNetworkACommandedOn;
 bool_t PowerNetworkAOutputOn;
 bool_t PowerNetworkBCommandedOn;
 bool_t PowerNetworkBOutputOn;
 bool_t PowerNetworkCCommandedOn;
 bool_t PowerNetworkCOutputOn;
 bool_t PowerNetworkDCommandedOn;
 bool_t PowerNetworkDOutputOn;
 bool_t AuxPowerNetworkACommandedOn;
 bool_t AuxPowerNetworkAOutputOn;
 bool_t AuxPowerNetworkBCommandedOn;
 bool_t AuxPowerNetworkBOutputOn;
 bool_t AuxPowerNetworkCCommandedOn;
 bool_t AuxPowerNetworkCOutputOn;
 bool_t AuxPowerNetworkDCommandedOn;
 bool_t AuxPowerNetworkDOutputOn;
  int priority;
} m1m3_logevent_PowerStatus_Ctl;
typedef struct m1m3_logevent_PowerSupplyStatusLV {
  double Timestamp;
 bool_t RCPMirrorCellUtility220VAC1Status;
 bool_t RCPCabinetUtility220VACStatus;
 bool_t RCPExternalEquipment220VACStatus;
 bool_t RCPMirrorCellUtility220VAC2Status;
 bool_t RCPMirrorCellUtility220VAC3Status;
 bool_t PowerNetworkARedundancyControlStatus;
 bool_t PowerNetworkBRedundancyControlStatus;
 bool_t PowerNetworkCRedundancyControlStatus;
 bool_t PowerNetworkDRedundancyControlStatus;
 bool_t ControlsPowerNetworkRedundancyControlStatus;
 bool_t PowerNetworkAStatus;
 bool_t PowerNetworkARedundantStatus;
 bool_t PowerNetworkBStatus;
 bool_t PowerNetworkBRedundantStatus;
 bool_t PowerNetworkCStatus;
 bool_t PowerNetworkCRedundantStatus;
 bool_t PowerNetworkDStatus;
 bool_t PowerNetworkDRedundantStatus;
 bool_t ControlsPowerNetworkStatus;
 bool_t ControlsPowerNetworkRedundantStatus;
 bool_t LightPowerNetworkStatus;
 bool_t ExternalEquipmentPowerNetworkStatus;
 bool_t LaserTrackerPowerNetworkStatus;
  int priority;
} m1m3_logevent_PowerSupplyStatus_Ctl;
typedef struct m1m3_logevent_PowerWarningLV {
  double Timestamp;
 bool_t AnyWarning;
 bool_t PowerNetworkAOutputMismatch;
 bool_t PowerNetworkBOutputMismatch;
 bool_t PowerNetworkCOutputMismatch;
 bool_t PowerNetworkDOutputMismatch;
 bool_t AuxPowerNetworkAOutputMismatch;
 bool_t AuxPowerNetworkBOutputMismatch;
 bool_t AuxPowerNetworkCOutputMismatch;
 bool_t AuxPowerNetworkDOutputMismatch;
  int priority;
} m1m3_logevent_PowerWarning_Ctl;
typedef struct m1m3_logevent_RejectedAberrationForcesLV {
  double Timestamp;
  SGLArrayHdl ZForces;
  float Fz;
  float Mx;
  float My;
  int priority;
} m1m3_logevent_RejectedAberrationForces_Ctl;
typedef struct m1m3_logevent_RejectedAccelerationForcesLV {
  double Timestamp;
  SGLArrayHdl XForces;
  SGLArrayHdl YForces;
  SGLArrayHdl ZForces;
  float Fx;
  float Fy;
  float Fz;
  float Mx;
  float My;
  float Mz;
  float ForceMagnitude;
  int priority;
} m1m3_logevent_RejectedAccelerationForces_Ctl;
typedef struct m1m3_logevent_RejectedActiveOpticForcesLV {
  double Timestamp;
  SGLArrayHdl ZForces;
  float Fz;
  float Mx;
  float My;
  int priority;
} m1m3_logevent_RejectedActiveOpticForces_Ctl;
typedef struct m1m3_logevent_RejectedAzimuthForcesLV {
  double Timestamp;
  SGLArrayHdl XForces;
  SGLArrayHdl YForces;
  SGLArrayHdl ZForces;
  float Fx;
  float Fy;
  float Fz;
  float Mx;
  float My;
  float Mz;
  float ForceMagnitude;
  int priority;
} m1m3_logevent_RejectedAzimuthForces_Ctl;
typedef struct m1m3_logevent_RejectedBalanceForcesLV {
  double Timestamp;
  SGLArrayHdl XForces;
  SGLArrayHdl YForces;
  SGLArrayHdl ZForces;
  float Fx;
  float Fy;
  float Fz;
  float Mx;
  float My;
  float Mz;
  float ForceMagnitude;
  int priority;
} m1m3_logevent_RejectedBalanceForces_Ctl;
typedef struct m1m3_logevent_RejectedCylinderForcesLV {
  double Timestamp;
  I32ArrayHdl SecondaryCylinderForces;
  I32ArrayHdl PrimaryCylinderForces;
  int priority;
} m1m3_logevent_RejectedCylinderForces_Ctl;
typedef struct m1m3_logevent_RejectedElevationForcesLV {
  double Timestamp;
  SGLArrayHdl XForces;
  SGLArrayHdl YForces;
  SGLArrayHdl ZForces;
  float Fx;
  float Fy;
  float Fz;
  float Mx;
  float My;
  float Mz;
  float ForceMagnitude;
  int priority;
} m1m3_logevent_RejectedElevationForces_Ctl;
typedef struct m1m3_logevent_RejectedForcesLV {
  double Timestamp;
  SGLArrayHdl XForces;
  SGLArrayHdl YForces;
  SGLArrayHdl ZForces;
  float Fx;
  float Fy;
  float Fz;
  float Mx;
  float My;
  float Mz;
  float ForceMagnitude;
  int priority;
} m1m3_logevent_RejectedForces_Ctl;
typedef struct m1m3_logevent_RejectedOffsetForcesLV {
  double Timestamp;
  SGLArrayHdl XForces;
  SGLArrayHdl YForces;
  SGLArrayHdl ZForces;
  float Fx;
  float Fy;
  float Fz;
  float Mx;
  float My;
  float Mz;
  float ForceMagnitude;
  int priority;
} m1m3_logevent_RejectedOffsetForces_Ctl;
typedef struct m1m3_logevent_RejectedStaticForcesLV {
  double Timestamp;
  SGLArrayHdl XForces;
  SGLArrayHdl YForces;
  SGLArrayHdl ZForces;
  float Fx;
  float Fy;
  float Fz;
  float Mx;
  float My;
  float Mz;
  float ForceMagnitude;
  int priority;
} m1m3_logevent_RejectedStaticForces_Ctl;
typedef struct m1m3_logevent_RejectedThermalForcesLV {
  double Timestamp;
  SGLArrayHdl XForces;
  SGLArrayHdl YForces;
  SGLArrayHdl ZForces;
  float Fx;
  float Fy;
  float Fz;
  float Mx;
  float My;
  float Mz;
  float ForceMagnitude;
  int priority;
} m1m3_logevent_RejectedThermalForces_Ctl;
typedef struct m1m3_logevent_RejectedVelocityForcesLV {
  double Timestamp;
  SGLArrayHdl XForces;
  SGLArrayHdl YForces;
  SGLArrayHdl ZForces;
  float Fx;
  float Fy;
  float Fz;
  float Mx;
  float My;
  float Mz;
  float ForceMagnitude;
  int priority;
} m1m3_logevent_RejectedVelocityForces_Ctl;
typedef struct m1m3_logevent_SettingVersionsLV {
  double Timestamp;
  StrHdl RecommendedSettingsVersion; /* 256 */
  int priority;
} m1m3_logevent_SettingVersions_Ctl;
typedef struct m1m3_logevent_SettingsAppliedLV {
  double Timestamp;
  StrHdl Settings; /* 256 */
  int priority;
} m1m3_logevent_SettingsApplied_Ctl;
typedef struct m1m3_logevent_SummaryStateLV {
  double Timestamp;
  int SummaryState;
  int priority;
} m1m3_logevent_SummaryState_Ctl;

typedef struct m1m3_ackcmdLV
{
      int       cmdSeqNum;
      int 	ack;
      int 	error;
      StrHdl	result; /* 256 */
} m1m3_ackcmd_Ctl;
typedef struct m1m3_waitCompleteLV
{
      int       cmdSeqNum;
      unsigned int timeout;
} m1m3_waitComplete_Ctl;

#endif


#define salLONG long
     struct shmemIO {
         bool  inUse;
         bool  initialized;
         bool  shutdown;
         int   activeCommand;
	bool  syncI_m1m3_AccelerometerData;
	bool  syncO_m1m3_AccelerometerData;
	bool  flush_m1m3_AccelerometerData;
	bool  skipOld_m1m3_AccelerometerData;
	bool  hasIncoming_m1m3_AccelerometerData;
	bool  hasOutgoing_m1m3_AccelerometerData;
	bool  hasCallback_m1m3_AccelerometerData;
	int   callbackHdl_m1m3_AccelerometerData;
	bool  hasReader_m1m3_AccelerometerData;
	bool  hasWriter_m1m3_AccelerometerData;
	m1m3_AccelerometerDataC  shmemIncoming_m1m3_AccelerometerData;
	m1m3_AccelerometerDataC  shmemOutgoing_m1m3_AccelerometerData;
	bool  syncI_m1m3_ForceActuatorData;
	bool  syncO_m1m3_ForceActuatorData;
	bool  flush_m1m3_ForceActuatorData;
	bool  skipOld_m1m3_ForceActuatorData;
	bool  hasIncoming_m1m3_ForceActuatorData;
	bool  hasOutgoing_m1m3_ForceActuatorData;
	bool  hasCallback_m1m3_ForceActuatorData;
	int   callbackHdl_m1m3_ForceActuatorData;
	bool  hasReader_m1m3_ForceActuatorData;
	bool  hasWriter_m1m3_ForceActuatorData;
	m1m3_ForceActuatorDataC  shmemIncoming_m1m3_ForceActuatorData;
	m1m3_ForceActuatorDataC  shmemOutgoing_m1m3_ForceActuatorData;
	bool  syncI_m1m3_GyroData;
	bool  syncO_m1m3_GyroData;
	bool  flush_m1m3_GyroData;
	bool  skipOld_m1m3_GyroData;
	bool  hasIncoming_m1m3_GyroData;
	bool  hasOutgoing_m1m3_GyroData;
	bool  hasCallback_m1m3_GyroData;
	int   callbackHdl_m1m3_GyroData;
	bool  hasReader_m1m3_GyroData;
	bool  hasWriter_m1m3_GyroData;
	m1m3_GyroDataC  shmemIncoming_m1m3_GyroData;
	m1m3_GyroDataC  shmemOutgoing_m1m3_GyroData;
	bool  syncI_m1m3_HardpointActuatorData;
	bool  syncO_m1m3_HardpointActuatorData;
	bool  flush_m1m3_HardpointActuatorData;
	bool  skipOld_m1m3_HardpointActuatorData;
	bool  hasIncoming_m1m3_HardpointActuatorData;
	bool  hasOutgoing_m1m3_HardpointActuatorData;
	bool  hasCallback_m1m3_HardpointActuatorData;
	int   callbackHdl_m1m3_HardpointActuatorData;
	bool  hasReader_m1m3_HardpointActuatorData;
	bool  hasWriter_m1m3_HardpointActuatorData;
	m1m3_HardpointActuatorDataC  shmemIncoming_m1m3_HardpointActuatorData;
	m1m3_HardpointActuatorDataC  shmemOutgoing_m1m3_HardpointActuatorData;
	bool  syncI_m1m3_HardpointMonitorData;
	bool  syncO_m1m3_HardpointMonitorData;
	bool  flush_m1m3_HardpointMonitorData;
	bool  skipOld_m1m3_HardpointMonitorData;
	bool  hasIncoming_m1m3_HardpointMonitorData;
	bool  hasOutgoing_m1m3_HardpointMonitorData;
	bool  hasCallback_m1m3_HardpointMonitorData;
	int   callbackHdl_m1m3_HardpointMonitorData;
	bool  hasReader_m1m3_HardpointMonitorData;
	bool  hasWriter_m1m3_HardpointMonitorData;
	m1m3_HardpointMonitorDataC  shmemIncoming_m1m3_HardpointMonitorData;
	m1m3_HardpointMonitorDataC  shmemOutgoing_m1m3_HardpointMonitorData;
	bool  syncI_m1m3_IMSData;
	bool  syncO_m1m3_IMSData;
	bool  flush_m1m3_IMSData;
	bool  skipOld_m1m3_IMSData;
	bool  hasIncoming_m1m3_IMSData;
	bool  hasOutgoing_m1m3_IMSData;
	bool  hasCallback_m1m3_IMSData;
	int   callbackHdl_m1m3_IMSData;
	bool  hasReader_m1m3_IMSData;
	bool  hasWriter_m1m3_IMSData;
	m1m3_IMSDataC  shmemIncoming_m1m3_IMSData;
	m1m3_IMSDataC  shmemOutgoing_m1m3_IMSData;
	bool  syncI_m1m3_InclinometerData;
	bool  syncO_m1m3_InclinometerData;
	bool  flush_m1m3_InclinometerData;
	bool  skipOld_m1m3_InclinometerData;
	bool  hasIncoming_m1m3_InclinometerData;
	bool  hasOutgoing_m1m3_InclinometerData;
	bool  hasCallback_m1m3_InclinometerData;
	int   callbackHdl_m1m3_InclinometerData;
	bool  hasReader_m1m3_InclinometerData;
	bool  hasWriter_m1m3_InclinometerData;
	m1m3_InclinometerDataC  shmemIncoming_m1m3_InclinometerData;
	m1m3_InclinometerDataC  shmemOutgoing_m1m3_InclinometerData;
	bool  syncI_m1m3_OuterLoopData;
	bool  syncO_m1m3_OuterLoopData;
	bool  flush_m1m3_OuterLoopData;
	bool  skipOld_m1m3_OuterLoopData;
	bool  hasIncoming_m1m3_OuterLoopData;
	bool  hasOutgoing_m1m3_OuterLoopData;
	bool  hasCallback_m1m3_OuterLoopData;
	int   callbackHdl_m1m3_OuterLoopData;
	bool  hasReader_m1m3_OuterLoopData;
	bool  hasWriter_m1m3_OuterLoopData;
	m1m3_OuterLoopDataC  shmemIncoming_m1m3_OuterLoopData;
	m1m3_OuterLoopDataC  shmemOutgoing_m1m3_OuterLoopData;
	bool  syncI_m1m3_PIDData;
	bool  syncO_m1m3_PIDData;
	bool  flush_m1m3_PIDData;
	bool  skipOld_m1m3_PIDData;
	bool  hasIncoming_m1m3_PIDData;
	bool  hasOutgoing_m1m3_PIDData;
	bool  hasCallback_m1m3_PIDData;
	int   callbackHdl_m1m3_PIDData;
	bool  hasReader_m1m3_PIDData;
	bool  hasWriter_m1m3_PIDData;
	m1m3_PIDDataC  shmemIncoming_m1m3_PIDData;
	m1m3_PIDDataC  shmemOutgoing_m1m3_PIDData;
	bool  syncI_m1m3_PowerSupplyData;
	bool  syncO_m1m3_PowerSupplyData;
	bool  flush_m1m3_PowerSupplyData;
	bool  skipOld_m1m3_PowerSupplyData;
	bool  hasIncoming_m1m3_PowerSupplyData;
	bool  hasOutgoing_m1m3_PowerSupplyData;
	bool  hasCallback_m1m3_PowerSupplyData;
	int   callbackHdl_m1m3_PowerSupplyData;
	bool  hasReader_m1m3_PowerSupplyData;
	bool  hasWriter_m1m3_PowerSupplyData;
	m1m3_PowerSupplyDataC  shmemIncoming_m1m3_PowerSupplyData;
	m1m3_PowerSupplyDataC  shmemOutgoing_m1m3_PowerSupplyData;
	bool  syncI_m1m3_ackcmd;
	bool  syncO_m1m3_ackcmd;
	bool  flush_m1m3_ackcmd;
	bool  skipOld_m1m3_ackcmd;
	bool  hasIncoming_m1m3_ackcmd;
	bool  hasOutgoing_m1m3_ackcmd;
	bool  hasCallback_m1m3_ackcmd;
	int   callbackHdl_m1m3_ackcmd;
	bool  hasReader_m1m3_ackcmd;
	bool  hasWriter_m1m3_ackcmd;
	m1m3_ackcmdC  shmemIncoming_m1m3_ackcmd;
	m1m3_ackcmdC  shmemOutgoing_m1m3_ackcmd;
	bool  syncI_m1m3_command;
	bool  syncO_m1m3_command;
	bool  flush_m1m3_command;
	bool  skipOld_m1m3_command;
	bool  hasIncoming_m1m3_command;
	bool  hasOutgoing_m1m3_command;
	bool  hasCallback_m1m3_command;
	int   callbackHdl_m1m3_command;
	bool  hasReader_m1m3_command;
	bool  hasWriter_m1m3_command;
	bool  syncI_m1m3_command_AbortProfile;
	bool  syncO_m1m3_command_AbortProfile;
	bool  flush_m1m3_command_AbortProfile;
	bool  skipOld_m1m3_command_AbortProfile;
	bool  hasIncoming_m1m3_command_AbortProfile;
	bool  hasOutgoing_m1m3_command_AbortProfile;
	bool  hasCallback_m1m3_command_AbortProfile;
	int   callbackHdl_m1m3_command_AbortProfile;
	bool  hasReader_m1m3_command_AbortProfile;
	bool  hasWriter_m1m3_command_AbortProfile;
	m1m3_command_AbortProfileC  shmemIncoming_m1m3_command_AbortProfile;
	m1m3_command_AbortProfileC  shmemOutgoing_m1m3_command_AbortProfile;
    bool syncI_m1m3_command_AbortProfile_ackcmd;
    bool syncO_m1m3_command_AbortProfile_ackcmd;
	bool skipOld_m1m3_command_AbortProfile_ackcmd;
	bool hasIncoming_m1m3_command_AbortProfile_ackcmd;
	bool hasOutgoing_m1m3_command_AbortProfile_ackcmd;
	bool hasCallback_m1m3_command_AbortProfile_ackcmd;
	bool ackIt_m1m3_command_AbortProfile;
	int  callbackHdl_m1m3_command_AbortProfile_ackcmd;
	int  shmemOutgoing_m1m3_command_AbortProfile_cmdSeqNum;
	int  shmemIncoming_m1m3_command_AbortProfile_rcvSeqNum;
	int  shmemOutgoing_m1m3_command_AbortProfile_cmdStatus;
	int  shmemOutgoing_m1m3_command_AbortProfile_errorCode;
	int  shmemIncoming_m1m3_command_AbortProfile_cmdStatus;
	int  shmemIncoming_m1m3_command_AbortProfile_errorCode;
	int  shmemIncoming_m1m3_command_AbortProfile_waitForSeqNum;
	char shmemOutgoing_m1m3_command_AbortProfile_resultCode[128];
	char shmemIncoming_m1m3_command_AbortProfile_resultCode[128];
	bool  syncI_m1m3_command_AbortRaiseM1M3;
	bool  syncO_m1m3_command_AbortRaiseM1M3;
	bool  flush_m1m3_command_AbortRaiseM1M3;
	bool  skipOld_m1m3_command_AbortRaiseM1M3;
	bool  hasIncoming_m1m3_command_AbortRaiseM1M3;
	bool  hasOutgoing_m1m3_command_AbortRaiseM1M3;
	bool  hasCallback_m1m3_command_AbortRaiseM1M3;
	int   callbackHdl_m1m3_command_AbortRaiseM1M3;
	bool  hasReader_m1m3_command_AbortRaiseM1M3;
	bool  hasWriter_m1m3_command_AbortRaiseM1M3;
	m1m3_command_AbortRaiseM1M3C  shmemIncoming_m1m3_command_AbortRaiseM1M3;
	m1m3_command_AbortRaiseM1M3C  shmemOutgoing_m1m3_command_AbortRaiseM1M3;
    bool syncI_m1m3_command_AbortRaiseM1M3_ackcmd;
    bool syncO_m1m3_command_AbortRaiseM1M3_ackcmd;
	bool skipOld_m1m3_command_AbortRaiseM1M3_ackcmd;
	bool hasIncoming_m1m3_command_AbortRaiseM1M3_ackcmd;
	bool hasOutgoing_m1m3_command_AbortRaiseM1M3_ackcmd;
	bool hasCallback_m1m3_command_AbortRaiseM1M3_ackcmd;
	bool ackIt_m1m3_command_AbortRaiseM1M3;
	int  callbackHdl_m1m3_command_AbortRaiseM1M3_ackcmd;
	int  shmemOutgoing_m1m3_command_AbortRaiseM1M3_cmdSeqNum;
	int  shmemIncoming_m1m3_command_AbortRaiseM1M3_rcvSeqNum;
	int  shmemOutgoing_m1m3_command_AbortRaiseM1M3_cmdStatus;
	int  shmemOutgoing_m1m3_command_AbortRaiseM1M3_errorCode;
	int  shmemIncoming_m1m3_command_AbortRaiseM1M3_cmdStatus;
	int  shmemIncoming_m1m3_command_AbortRaiseM1M3_errorCode;
	int  shmemIncoming_m1m3_command_AbortRaiseM1M3_waitForSeqNum;
	char shmemOutgoing_m1m3_command_AbortRaiseM1M3_resultCode[128];
	char shmemIncoming_m1m3_command_AbortRaiseM1M3_resultCode[128];
	bool  syncI_m1m3_command_ApplyAberrationForces;
	bool  syncO_m1m3_command_ApplyAberrationForces;
	bool  flush_m1m3_command_ApplyAberrationForces;
	bool  skipOld_m1m3_command_ApplyAberrationForces;
	bool  hasIncoming_m1m3_command_ApplyAberrationForces;
	bool  hasOutgoing_m1m3_command_ApplyAberrationForces;
	bool  hasCallback_m1m3_command_ApplyAberrationForces;
	int   callbackHdl_m1m3_command_ApplyAberrationForces;
	bool  hasReader_m1m3_command_ApplyAberrationForces;
	bool  hasWriter_m1m3_command_ApplyAberrationForces;
	m1m3_command_ApplyAberrationForcesC  shmemIncoming_m1m3_command_ApplyAberrationForces;
	m1m3_command_ApplyAberrationForcesC  shmemOutgoing_m1m3_command_ApplyAberrationForces;
    bool syncI_m1m3_command_ApplyAberrationForces_ackcmd;
    bool syncO_m1m3_command_ApplyAberrationForces_ackcmd;
	bool skipOld_m1m3_command_ApplyAberrationForces_ackcmd;
	bool hasIncoming_m1m3_command_ApplyAberrationForces_ackcmd;
	bool hasOutgoing_m1m3_command_ApplyAberrationForces_ackcmd;
	bool hasCallback_m1m3_command_ApplyAberrationForces_ackcmd;
	bool ackIt_m1m3_command_ApplyAberrationForces;
	int  callbackHdl_m1m3_command_ApplyAberrationForces_ackcmd;
	int  shmemOutgoing_m1m3_command_ApplyAberrationForces_cmdSeqNum;
	int  shmemIncoming_m1m3_command_ApplyAberrationForces_rcvSeqNum;
	int  shmemOutgoing_m1m3_command_ApplyAberrationForces_cmdStatus;
	int  shmemOutgoing_m1m3_command_ApplyAberrationForces_errorCode;
	int  shmemIncoming_m1m3_command_ApplyAberrationForces_cmdStatus;
	int  shmemIncoming_m1m3_command_ApplyAberrationForces_errorCode;
	int  shmemIncoming_m1m3_command_ApplyAberrationForces_waitForSeqNum;
	char shmemOutgoing_m1m3_command_ApplyAberrationForces_resultCode[128];
	char shmemIncoming_m1m3_command_ApplyAberrationForces_resultCode[128];
	bool  syncI_m1m3_command_ApplyAberrationForcesByBendingModes;
	bool  syncO_m1m3_command_ApplyAberrationForcesByBendingModes;
	bool  flush_m1m3_command_ApplyAberrationForcesByBendingModes;
	bool  skipOld_m1m3_command_ApplyAberrationForcesByBendingModes;
	bool  hasIncoming_m1m3_command_ApplyAberrationForcesByBendingModes;
	bool  hasOutgoing_m1m3_command_ApplyAberrationForcesByBendingModes;
	bool  hasCallback_m1m3_command_ApplyAberrationForcesByBendingModes;
	int   callbackHdl_m1m3_command_ApplyAberrationForcesByBendingModes;
	bool  hasReader_m1m3_command_ApplyAberrationForcesByBendingModes;
	bool  hasWriter_m1m3_command_ApplyAberrationForcesByBendingModes;
	m1m3_command_ApplyAberrationForcesByBendingModesC  shmemIncoming_m1m3_command_ApplyAberrationForcesByBendingModes;
	m1m3_command_ApplyAberrationForcesByBendingModesC  shmemOutgoing_m1m3_command_ApplyAberrationForcesByBendingModes;
    bool syncI_m1m3_command_ApplyAberrationForcesByBendingModes_ackcmd;
    bool syncO_m1m3_command_ApplyAberrationForcesByBendingModes_ackcmd;
	bool skipOld_m1m3_command_ApplyAberrationForcesByBendingModes_ackcmd;
	bool hasIncoming_m1m3_command_ApplyAberrationForcesByBendingModes_ackcmd;
	bool hasOutgoing_m1m3_command_ApplyAberrationForcesByBendingModes_ackcmd;
	bool hasCallback_m1m3_command_ApplyAberrationForcesByBendingModes_ackcmd;
	bool ackIt_m1m3_command_ApplyAberrationForcesByBendingModes;
	int  callbackHdl_m1m3_command_ApplyAberrationForcesByBendingModes_ackcmd;
	int  shmemOutgoing_m1m3_command_ApplyAberrationForcesByBendingModes_cmdSeqNum;
	int  shmemIncoming_m1m3_command_ApplyAberrationForcesByBendingModes_rcvSeqNum;
	int  shmemOutgoing_m1m3_command_ApplyAberrationForcesByBendingModes_cmdStatus;
	int  shmemOutgoing_m1m3_command_ApplyAberrationForcesByBendingModes_errorCode;
	int  shmemIncoming_m1m3_command_ApplyAberrationForcesByBendingModes_cmdStatus;
	int  shmemIncoming_m1m3_command_ApplyAberrationForcesByBendingModes_errorCode;
	int  shmemIncoming_m1m3_command_ApplyAberrationForcesByBendingModes_waitForSeqNum;
	char shmemOutgoing_m1m3_command_ApplyAberrationForcesByBendingModes_resultCode[128];
	char shmemIncoming_m1m3_command_ApplyAberrationForcesByBendingModes_resultCode[128];
	bool  syncI_m1m3_command_ApplyActiveOpticForces;
	bool  syncO_m1m3_command_ApplyActiveOpticForces;
	bool  flush_m1m3_command_ApplyActiveOpticForces;
	bool  skipOld_m1m3_command_ApplyActiveOpticForces;
	bool  hasIncoming_m1m3_command_ApplyActiveOpticForces;
	bool  hasOutgoing_m1m3_command_ApplyActiveOpticForces;
	bool  hasCallback_m1m3_command_ApplyActiveOpticForces;
	int   callbackHdl_m1m3_command_ApplyActiveOpticForces;
	bool  hasReader_m1m3_command_ApplyActiveOpticForces;
	bool  hasWriter_m1m3_command_ApplyActiveOpticForces;
	m1m3_command_ApplyActiveOpticForcesC  shmemIncoming_m1m3_command_ApplyActiveOpticForces;
	m1m3_command_ApplyActiveOpticForcesC  shmemOutgoing_m1m3_command_ApplyActiveOpticForces;
    bool syncI_m1m3_command_ApplyActiveOpticForces_ackcmd;
    bool syncO_m1m3_command_ApplyActiveOpticForces_ackcmd;
	bool skipOld_m1m3_command_ApplyActiveOpticForces_ackcmd;
	bool hasIncoming_m1m3_command_ApplyActiveOpticForces_ackcmd;
	bool hasOutgoing_m1m3_command_ApplyActiveOpticForces_ackcmd;
	bool hasCallback_m1m3_command_ApplyActiveOpticForces_ackcmd;
	bool ackIt_m1m3_command_ApplyActiveOpticForces;
	int  callbackHdl_m1m3_command_ApplyActiveOpticForces_ackcmd;
	int  shmemOutgoing_m1m3_command_ApplyActiveOpticForces_cmdSeqNum;
	int  shmemIncoming_m1m3_command_ApplyActiveOpticForces_rcvSeqNum;
	int  shmemOutgoing_m1m3_command_ApplyActiveOpticForces_cmdStatus;
	int  shmemOutgoing_m1m3_command_ApplyActiveOpticForces_errorCode;
	int  shmemIncoming_m1m3_command_ApplyActiveOpticForces_cmdStatus;
	int  shmemIncoming_m1m3_command_ApplyActiveOpticForces_errorCode;
	int  shmemIncoming_m1m3_command_ApplyActiveOpticForces_waitForSeqNum;
	char shmemOutgoing_m1m3_command_ApplyActiveOpticForces_resultCode[128];
	char shmemIncoming_m1m3_command_ApplyActiveOpticForces_resultCode[128];
	bool  syncI_m1m3_command_ApplyActiveOpticForcesByBendingModes;
	bool  syncO_m1m3_command_ApplyActiveOpticForcesByBendingModes;
	bool  flush_m1m3_command_ApplyActiveOpticForcesByBendingModes;
	bool  skipOld_m1m3_command_ApplyActiveOpticForcesByBendingModes;
	bool  hasIncoming_m1m3_command_ApplyActiveOpticForcesByBendingModes;
	bool  hasOutgoing_m1m3_command_ApplyActiveOpticForcesByBendingModes;
	bool  hasCallback_m1m3_command_ApplyActiveOpticForcesByBendingModes;
	int   callbackHdl_m1m3_command_ApplyActiveOpticForcesByBendingModes;
	bool  hasReader_m1m3_command_ApplyActiveOpticForcesByBendingModes;
	bool  hasWriter_m1m3_command_ApplyActiveOpticForcesByBendingModes;
	m1m3_command_ApplyActiveOpticForcesByBendingModesC  shmemIncoming_m1m3_command_ApplyActiveOpticForcesByBendingModes;
	m1m3_command_ApplyActiveOpticForcesByBendingModesC  shmemOutgoing_m1m3_command_ApplyActiveOpticForcesByBendingModes;
    bool syncI_m1m3_command_ApplyActiveOpticForcesByBendingModes_ackcmd;
    bool syncO_m1m3_command_ApplyActiveOpticForcesByBendingModes_ackcmd;
	bool skipOld_m1m3_command_ApplyActiveOpticForcesByBendingModes_ackcmd;
	bool hasIncoming_m1m3_command_ApplyActiveOpticForcesByBendingModes_ackcmd;
	bool hasOutgoing_m1m3_command_ApplyActiveOpticForcesByBendingModes_ackcmd;
	bool hasCallback_m1m3_command_ApplyActiveOpticForcesByBendingModes_ackcmd;
	bool ackIt_m1m3_command_ApplyActiveOpticForcesByBendingModes;
	int  callbackHdl_m1m3_command_ApplyActiveOpticForcesByBendingModes_ackcmd;
	int  shmemOutgoing_m1m3_command_ApplyActiveOpticForcesByBendingModes_cmdSeqNum;
	int  shmemIncoming_m1m3_command_ApplyActiveOpticForcesByBendingModes_rcvSeqNum;
	int  shmemOutgoing_m1m3_command_ApplyActiveOpticForcesByBendingModes_cmdStatus;
	int  shmemOutgoing_m1m3_command_ApplyActiveOpticForcesByBendingModes_errorCode;
	int  shmemIncoming_m1m3_command_ApplyActiveOpticForcesByBendingModes_cmdStatus;
	int  shmemIncoming_m1m3_command_ApplyActiveOpticForcesByBendingModes_errorCode;
	int  shmemIncoming_m1m3_command_ApplyActiveOpticForcesByBendingModes_waitForSeqNum;
	char shmemOutgoing_m1m3_command_ApplyActiveOpticForcesByBendingModes_resultCode[128];
	char shmemIncoming_m1m3_command_ApplyActiveOpticForcesByBendingModes_resultCode[128];
	bool  syncI_m1m3_command_ApplyOffsetForces;
	bool  syncO_m1m3_command_ApplyOffsetForces;
	bool  flush_m1m3_command_ApplyOffsetForces;
	bool  skipOld_m1m3_command_ApplyOffsetForces;
	bool  hasIncoming_m1m3_command_ApplyOffsetForces;
	bool  hasOutgoing_m1m3_command_ApplyOffsetForces;
	bool  hasCallback_m1m3_command_ApplyOffsetForces;
	int   callbackHdl_m1m3_command_ApplyOffsetForces;
	bool  hasReader_m1m3_command_ApplyOffsetForces;
	bool  hasWriter_m1m3_command_ApplyOffsetForces;
	m1m3_command_ApplyOffsetForcesC  shmemIncoming_m1m3_command_ApplyOffsetForces;
	m1m3_command_ApplyOffsetForcesC  shmemOutgoing_m1m3_command_ApplyOffsetForces;
    bool syncI_m1m3_command_ApplyOffsetForces_ackcmd;
    bool syncO_m1m3_command_ApplyOffsetForces_ackcmd;
	bool skipOld_m1m3_command_ApplyOffsetForces_ackcmd;
	bool hasIncoming_m1m3_command_ApplyOffsetForces_ackcmd;
	bool hasOutgoing_m1m3_command_ApplyOffsetForces_ackcmd;
	bool hasCallback_m1m3_command_ApplyOffsetForces_ackcmd;
	bool ackIt_m1m3_command_ApplyOffsetForces;
	int  callbackHdl_m1m3_command_ApplyOffsetForces_ackcmd;
	int  shmemOutgoing_m1m3_command_ApplyOffsetForces_cmdSeqNum;
	int  shmemIncoming_m1m3_command_ApplyOffsetForces_rcvSeqNum;
	int  shmemOutgoing_m1m3_command_ApplyOffsetForces_cmdStatus;
	int  shmemOutgoing_m1m3_command_ApplyOffsetForces_errorCode;
	int  shmemIncoming_m1m3_command_ApplyOffsetForces_cmdStatus;
	int  shmemIncoming_m1m3_command_ApplyOffsetForces_errorCode;
	int  shmemIncoming_m1m3_command_ApplyOffsetForces_waitForSeqNum;
	char shmemOutgoing_m1m3_command_ApplyOffsetForces_resultCode[128];
	char shmemIncoming_m1m3_command_ApplyOffsetForces_resultCode[128];
	bool  syncI_m1m3_command_ApplyOffsetForcesByMirrorForce;
	bool  syncO_m1m3_command_ApplyOffsetForcesByMirrorForce;
	bool  flush_m1m3_command_ApplyOffsetForcesByMirrorForce;
	bool  skipOld_m1m3_command_ApplyOffsetForcesByMirrorForce;
	bool  hasIncoming_m1m3_command_ApplyOffsetForcesByMirrorForce;
	bool  hasOutgoing_m1m3_command_ApplyOffsetForcesByMirrorForce;
	bool  hasCallback_m1m3_command_ApplyOffsetForcesByMirrorForce;
	int   callbackHdl_m1m3_command_ApplyOffsetForcesByMirrorForce;
	bool  hasReader_m1m3_command_ApplyOffsetForcesByMirrorForce;
	bool  hasWriter_m1m3_command_ApplyOffsetForcesByMirrorForce;
	m1m3_command_ApplyOffsetForcesByMirrorForceC  shmemIncoming_m1m3_command_ApplyOffsetForcesByMirrorForce;
	m1m3_command_ApplyOffsetForcesByMirrorForceC  shmemOutgoing_m1m3_command_ApplyOffsetForcesByMirrorForce;
    bool syncI_m1m3_command_ApplyOffsetForcesByMirrorForce_ackcmd;
    bool syncO_m1m3_command_ApplyOffsetForcesByMirrorForce_ackcmd;
	bool skipOld_m1m3_command_ApplyOffsetForcesByMirrorForce_ackcmd;
	bool hasIncoming_m1m3_command_ApplyOffsetForcesByMirrorForce_ackcmd;
	bool hasOutgoing_m1m3_command_ApplyOffsetForcesByMirrorForce_ackcmd;
	bool hasCallback_m1m3_command_ApplyOffsetForcesByMirrorForce_ackcmd;
	bool ackIt_m1m3_command_ApplyOffsetForcesByMirrorForce;
	int  callbackHdl_m1m3_command_ApplyOffsetForcesByMirrorForce_ackcmd;
	int  shmemOutgoing_m1m3_command_ApplyOffsetForcesByMirrorForce_cmdSeqNum;
	int  shmemIncoming_m1m3_command_ApplyOffsetForcesByMirrorForce_rcvSeqNum;
	int  shmemOutgoing_m1m3_command_ApplyOffsetForcesByMirrorForce_cmdStatus;
	int  shmemOutgoing_m1m3_command_ApplyOffsetForcesByMirrorForce_errorCode;
	int  shmemIncoming_m1m3_command_ApplyOffsetForcesByMirrorForce_cmdStatus;
	int  shmemIncoming_m1m3_command_ApplyOffsetForcesByMirrorForce_errorCode;
	int  shmemIncoming_m1m3_command_ApplyOffsetForcesByMirrorForce_waitForSeqNum;
	char shmemOutgoing_m1m3_command_ApplyOffsetForcesByMirrorForce_resultCode[128];
	char shmemIncoming_m1m3_command_ApplyOffsetForcesByMirrorForce_resultCode[128];
	bool  syncI_m1m3_command_ClearAberrationForces;
	bool  syncO_m1m3_command_ClearAberrationForces;
	bool  flush_m1m3_command_ClearAberrationForces;
	bool  skipOld_m1m3_command_ClearAberrationForces;
	bool  hasIncoming_m1m3_command_ClearAberrationForces;
	bool  hasOutgoing_m1m3_command_ClearAberrationForces;
	bool  hasCallback_m1m3_command_ClearAberrationForces;
	int   callbackHdl_m1m3_command_ClearAberrationForces;
	bool  hasReader_m1m3_command_ClearAberrationForces;
	bool  hasWriter_m1m3_command_ClearAberrationForces;
	m1m3_command_ClearAberrationForcesC  shmemIncoming_m1m3_command_ClearAberrationForces;
	m1m3_command_ClearAberrationForcesC  shmemOutgoing_m1m3_command_ClearAberrationForces;
    bool syncI_m1m3_command_ClearAberrationForces_ackcmd;
    bool syncO_m1m3_command_ClearAberrationForces_ackcmd;
	bool skipOld_m1m3_command_ClearAberrationForces_ackcmd;
	bool hasIncoming_m1m3_command_ClearAberrationForces_ackcmd;
	bool hasOutgoing_m1m3_command_ClearAberrationForces_ackcmd;
	bool hasCallback_m1m3_command_ClearAberrationForces_ackcmd;
	bool ackIt_m1m3_command_ClearAberrationForces;
	int  callbackHdl_m1m3_command_ClearAberrationForces_ackcmd;
	int  shmemOutgoing_m1m3_command_ClearAberrationForces_cmdSeqNum;
	int  shmemIncoming_m1m3_command_ClearAberrationForces_rcvSeqNum;
	int  shmemOutgoing_m1m3_command_ClearAberrationForces_cmdStatus;
	int  shmemOutgoing_m1m3_command_ClearAberrationForces_errorCode;
	int  shmemIncoming_m1m3_command_ClearAberrationForces_cmdStatus;
	int  shmemIncoming_m1m3_command_ClearAberrationForces_errorCode;
	int  shmemIncoming_m1m3_command_ClearAberrationForces_waitForSeqNum;
	char shmemOutgoing_m1m3_command_ClearAberrationForces_resultCode[128];
	char shmemIncoming_m1m3_command_ClearAberrationForces_resultCode[128];
	bool  syncI_m1m3_command_ClearActiveOpticForces;
	bool  syncO_m1m3_command_ClearActiveOpticForces;
	bool  flush_m1m3_command_ClearActiveOpticForces;
	bool  skipOld_m1m3_command_ClearActiveOpticForces;
	bool  hasIncoming_m1m3_command_ClearActiveOpticForces;
	bool  hasOutgoing_m1m3_command_ClearActiveOpticForces;
	bool  hasCallback_m1m3_command_ClearActiveOpticForces;
	int   callbackHdl_m1m3_command_ClearActiveOpticForces;
	bool  hasReader_m1m3_command_ClearActiveOpticForces;
	bool  hasWriter_m1m3_command_ClearActiveOpticForces;
	m1m3_command_ClearActiveOpticForcesC  shmemIncoming_m1m3_command_ClearActiveOpticForces;
	m1m3_command_ClearActiveOpticForcesC  shmemOutgoing_m1m3_command_ClearActiveOpticForces;
    bool syncI_m1m3_command_ClearActiveOpticForces_ackcmd;
    bool syncO_m1m3_command_ClearActiveOpticForces_ackcmd;
	bool skipOld_m1m3_command_ClearActiveOpticForces_ackcmd;
	bool hasIncoming_m1m3_command_ClearActiveOpticForces_ackcmd;
	bool hasOutgoing_m1m3_command_ClearActiveOpticForces_ackcmd;
	bool hasCallback_m1m3_command_ClearActiveOpticForces_ackcmd;
	bool ackIt_m1m3_command_ClearActiveOpticForces;
	int  callbackHdl_m1m3_command_ClearActiveOpticForces_ackcmd;
	int  shmemOutgoing_m1m3_command_ClearActiveOpticForces_cmdSeqNum;
	int  shmemIncoming_m1m3_command_ClearActiveOpticForces_rcvSeqNum;
	int  shmemOutgoing_m1m3_command_ClearActiveOpticForces_cmdStatus;
	int  shmemOutgoing_m1m3_command_ClearActiveOpticForces_errorCode;
	int  shmemIncoming_m1m3_command_ClearActiveOpticForces_cmdStatus;
	int  shmemIncoming_m1m3_command_ClearActiveOpticForces_errorCode;
	int  shmemIncoming_m1m3_command_ClearActiveOpticForces_waitForSeqNum;
	char shmemOutgoing_m1m3_command_ClearActiveOpticForces_resultCode[128];
	char shmemIncoming_m1m3_command_ClearActiveOpticForces_resultCode[128];
	bool  syncI_m1m3_command_ClearOffsetForces;
	bool  syncO_m1m3_command_ClearOffsetForces;
	bool  flush_m1m3_command_ClearOffsetForces;
	bool  skipOld_m1m3_command_ClearOffsetForces;
	bool  hasIncoming_m1m3_command_ClearOffsetForces;
	bool  hasOutgoing_m1m3_command_ClearOffsetForces;
	bool  hasCallback_m1m3_command_ClearOffsetForces;
	int   callbackHdl_m1m3_command_ClearOffsetForces;
	bool  hasReader_m1m3_command_ClearOffsetForces;
	bool  hasWriter_m1m3_command_ClearOffsetForces;
	m1m3_command_ClearOffsetForcesC  shmemIncoming_m1m3_command_ClearOffsetForces;
	m1m3_command_ClearOffsetForcesC  shmemOutgoing_m1m3_command_ClearOffsetForces;
    bool syncI_m1m3_command_ClearOffsetForces_ackcmd;
    bool syncO_m1m3_command_ClearOffsetForces_ackcmd;
	bool skipOld_m1m3_command_ClearOffsetForces_ackcmd;
	bool hasIncoming_m1m3_command_ClearOffsetForces_ackcmd;
	bool hasOutgoing_m1m3_command_ClearOffsetForces_ackcmd;
	bool hasCallback_m1m3_command_ClearOffsetForces_ackcmd;
	bool ackIt_m1m3_command_ClearOffsetForces;
	int  callbackHdl_m1m3_command_ClearOffsetForces_ackcmd;
	int  shmemOutgoing_m1m3_command_ClearOffsetForces_cmdSeqNum;
	int  shmemIncoming_m1m3_command_ClearOffsetForces_rcvSeqNum;
	int  shmemOutgoing_m1m3_command_ClearOffsetForces_cmdStatus;
	int  shmemOutgoing_m1m3_command_ClearOffsetForces_errorCode;
	int  shmemIncoming_m1m3_command_ClearOffsetForces_cmdStatus;
	int  shmemIncoming_m1m3_command_ClearOffsetForces_errorCode;
	int  shmemIncoming_m1m3_command_ClearOffsetForces_waitForSeqNum;
	char shmemOutgoing_m1m3_command_ClearOffsetForces_resultCode[128];
	char shmemIncoming_m1m3_command_ClearOffsetForces_resultCode[128];
	bool  syncI_m1m3_command_Disable;
	bool  syncO_m1m3_command_Disable;
	bool  flush_m1m3_command_Disable;
	bool  skipOld_m1m3_command_Disable;
	bool  hasIncoming_m1m3_command_Disable;
	bool  hasOutgoing_m1m3_command_Disable;
	bool  hasCallback_m1m3_command_Disable;
	int   callbackHdl_m1m3_command_Disable;
	bool  hasReader_m1m3_command_Disable;
	bool  hasWriter_m1m3_command_Disable;
	m1m3_command_DisableC  shmemIncoming_m1m3_command_Disable;
	m1m3_command_DisableC  shmemOutgoing_m1m3_command_Disable;
    bool syncI_m1m3_command_Disable_ackcmd;
    bool syncO_m1m3_command_Disable_ackcmd;
	bool skipOld_m1m3_command_Disable_ackcmd;
	bool hasIncoming_m1m3_command_Disable_ackcmd;
	bool hasOutgoing_m1m3_command_Disable_ackcmd;
	bool hasCallback_m1m3_command_Disable_ackcmd;
	bool ackIt_m1m3_command_Disable;
	int  callbackHdl_m1m3_command_Disable_ackcmd;
	int  shmemOutgoing_m1m3_command_Disable_cmdSeqNum;
	int  shmemIncoming_m1m3_command_Disable_rcvSeqNum;
	int  shmemOutgoing_m1m3_command_Disable_cmdStatus;
	int  shmemOutgoing_m1m3_command_Disable_errorCode;
	int  shmemIncoming_m1m3_command_Disable_cmdStatus;
	int  shmemIncoming_m1m3_command_Disable_errorCode;
	int  shmemIncoming_m1m3_command_Disable_waitForSeqNum;
	char shmemOutgoing_m1m3_command_Disable_resultCode[128];
	char shmemIncoming_m1m3_command_Disable_resultCode[128];
	bool  syncI_m1m3_command_DisableHardpointChase;
	bool  syncO_m1m3_command_DisableHardpointChase;
	bool  flush_m1m3_command_DisableHardpointChase;
	bool  skipOld_m1m3_command_DisableHardpointChase;
	bool  hasIncoming_m1m3_command_DisableHardpointChase;
	bool  hasOutgoing_m1m3_command_DisableHardpointChase;
	bool  hasCallback_m1m3_command_DisableHardpointChase;
	int   callbackHdl_m1m3_command_DisableHardpointChase;
	bool  hasReader_m1m3_command_DisableHardpointChase;
	bool  hasWriter_m1m3_command_DisableHardpointChase;
	m1m3_command_DisableHardpointChaseC  shmemIncoming_m1m3_command_DisableHardpointChase;
	m1m3_command_DisableHardpointChaseC  shmemOutgoing_m1m3_command_DisableHardpointChase;
    bool syncI_m1m3_command_DisableHardpointChase_ackcmd;
    bool syncO_m1m3_command_DisableHardpointChase_ackcmd;
	bool skipOld_m1m3_command_DisableHardpointChase_ackcmd;
	bool hasIncoming_m1m3_command_DisableHardpointChase_ackcmd;
	bool hasOutgoing_m1m3_command_DisableHardpointChase_ackcmd;
	bool hasCallback_m1m3_command_DisableHardpointChase_ackcmd;
	bool ackIt_m1m3_command_DisableHardpointChase;
	int  callbackHdl_m1m3_command_DisableHardpointChase_ackcmd;
	int  shmemOutgoing_m1m3_command_DisableHardpointChase_cmdSeqNum;
	int  shmemIncoming_m1m3_command_DisableHardpointChase_rcvSeqNum;
	int  shmemOutgoing_m1m3_command_DisableHardpointChase_cmdStatus;
	int  shmemOutgoing_m1m3_command_DisableHardpointChase_errorCode;
	int  shmemIncoming_m1m3_command_DisableHardpointChase_cmdStatus;
	int  shmemIncoming_m1m3_command_DisableHardpointChase_errorCode;
	int  shmemIncoming_m1m3_command_DisableHardpointChase_waitForSeqNum;
	char shmemOutgoing_m1m3_command_DisableHardpointChase_resultCode[128];
	char shmemIncoming_m1m3_command_DisableHardpointChase_resultCode[128];
	bool  syncI_m1m3_command_DisableHardpointCorrections;
	bool  syncO_m1m3_command_DisableHardpointCorrections;
	bool  flush_m1m3_command_DisableHardpointCorrections;
	bool  skipOld_m1m3_command_DisableHardpointCorrections;
	bool  hasIncoming_m1m3_command_DisableHardpointCorrections;
	bool  hasOutgoing_m1m3_command_DisableHardpointCorrections;
	bool  hasCallback_m1m3_command_DisableHardpointCorrections;
	int   callbackHdl_m1m3_command_DisableHardpointCorrections;
	bool  hasReader_m1m3_command_DisableHardpointCorrections;
	bool  hasWriter_m1m3_command_DisableHardpointCorrections;
	m1m3_command_DisableHardpointCorrectionsC  shmemIncoming_m1m3_command_DisableHardpointCorrections;
	m1m3_command_DisableHardpointCorrectionsC  shmemOutgoing_m1m3_command_DisableHardpointCorrections;
    bool syncI_m1m3_command_DisableHardpointCorrections_ackcmd;
    bool syncO_m1m3_command_DisableHardpointCorrections_ackcmd;
	bool skipOld_m1m3_command_DisableHardpointCorrections_ackcmd;
	bool hasIncoming_m1m3_command_DisableHardpointCorrections_ackcmd;
	bool hasOutgoing_m1m3_command_DisableHardpointCorrections_ackcmd;
	bool hasCallback_m1m3_command_DisableHardpointCorrections_ackcmd;
	bool ackIt_m1m3_command_DisableHardpointCorrections;
	int  callbackHdl_m1m3_command_DisableHardpointCorrections_ackcmd;
	int  shmemOutgoing_m1m3_command_DisableHardpointCorrections_cmdSeqNum;
	int  shmemIncoming_m1m3_command_DisableHardpointCorrections_rcvSeqNum;
	int  shmemOutgoing_m1m3_command_DisableHardpointCorrections_cmdStatus;
	int  shmemOutgoing_m1m3_command_DisableHardpointCorrections_errorCode;
	int  shmemIncoming_m1m3_command_DisableHardpointCorrections_cmdStatus;
	int  shmemIncoming_m1m3_command_DisableHardpointCorrections_errorCode;
	int  shmemIncoming_m1m3_command_DisableHardpointCorrections_waitForSeqNum;
	char shmemOutgoing_m1m3_command_DisableHardpointCorrections_resultCode[128];
	char shmemIncoming_m1m3_command_DisableHardpointCorrections_resultCode[128];
	bool  syncI_m1m3_command_Enable;
	bool  syncO_m1m3_command_Enable;
	bool  flush_m1m3_command_Enable;
	bool  skipOld_m1m3_command_Enable;
	bool  hasIncoming_m1m3_command_Enable;
	bool  hasOutgoing_m1m3_command_Enable;
	bool  hasCallback_m1m3_command_Enable;
	int   callbackHdl_m1m3_command_Enable;
	bool  hasReader_m1m3_command_Enable;
	bool  hasWriter_m1m3_command_Enable;
	m1m3_command_EnableC  shmemIncoming_m1m3_command_Enable;
	m1m3_command_EnableC  shmemOutgoing_m1m3_command_Enable;
    bool syncI_m1m3_command_Enable_ackcmd;
    bool syncO_m1m3_command_Enable_ackcmd;
	bool skipOld_m1m3_command_Enable_ackcmd;
	bool hasIncoming_m1m3_command_Enable_ackcmd;
	bool hasOutgoing_m1m3_command_Enable_ackcmd;
	bool hasCallback_m1m3_command_Enable_ackcmd;
	bool ackIt_m1m3_command_Enable;
	int  callbackHdl_m1m3_command_Enable_ackcmd;
	int  shmemOutgoing_m1m3_command_Enable_cmdSeqNum;
	int  shmemIncoming_m1m3_command_Enable_rcvSeqNum;
	int  shmemOutgoing_m1m3_command_Enable_cmdStatus;
	int  shmemOutgoing_m1m3_command_Enable_errorCode;
	int  shmemIncoming_m1m3_command_Enable_cmdStatus;
	int  shmemIncoming_m1m3_command_Enable_errorCode;
	int  shmemIncoming_m1m3_command_Enable_waitForSeqNum;
	char shmemOutgoing_m1m3_command_Enable_resultCode[128];
	char shmemIncoming_m1m3_command_Enable_resultCode[128];
	bool  syncI_m1m3_command_EnableHardpointChase;
	bool  syncO_m1m3_command_EnableHardpointChase;
	bool  flush_m1m3_command_EnableHardpointChase;
	bool  skipOld_m1m3_command_EnableHardpointChase;
	bool  hasIncoming_m1m3_command_EnableHardpointChase;
	bool  hasOutgoing_m1m3_command_EnableHardpointChase;
	bool  hasCallback_m1m3_command_EnableHardpointChase;
	int   callbackHdl_m1m3_command_EnableHardpointChase;
	bool  hasReader_m1m3_command_EnableHardpointChase;
	bool  hasWriter_m1m3_command_EnableHardpointChase;
	m1m3_command_EnableHardpointChaseC  shmemIncoming_m1m3_command_EnableHardpointChase;
	m1m3_command_EnableHardpointChaseC  shmemOutgoing_m1m3_command_EnableHardpointChase;
    bool syncI_m1m3_command_EnableHardpointChase_ackcmd;
    bool syncO_m1m3_command_EnableHardpointChase_ackcmd;
	bool skipOld_m1m3_command_EnableHardpointChase_ackcmd;
	bool hasIncoming_m1m3_command_EnableHardpointChase_ackcmd;
	bool hasOutgoing_m1m3_command_EnableHardpointChase_ackcmd;
	bool hasCallback_m1m3_command_EnableHardpointChase_ackcmd;
	bool ackIt_m1m3_command_EnableHardpointChase;
	int  callbackHdl_m1m3_command_EnableHardpointChase_ackcmd;
	int  shmemOutgoing_m1m3_command_EnableHardpointChase_cmdSeqNum;
	int  shmemIncoming_m1m3_command_EnableHardpointChase_rcvSeqNum;
	int  shmemOutgoing_m1m3_command_EnableHardpointChase_cmdStatus;
	int  shmemOutgoing_m1m3_command_EnableHardpointChase_errorCode;
	int  shmemIncoming_m1m3_command_EnableHardpointChase_cmdStatus;
	int  shmemIncoming_m1m3_command_EnableHardpointChase_errorCode;
	int  shmemIncoming_m1m3_command_EnableHardpointChase_waitForSeqNum;
	char shmemOutgoing_m1m3_command_EnableHardpointChase_resultCode[128];
	char shmemIncoming_m1m3_command_EnableHardpointChase_resultCode[128];
	bool  syncI_m1m3_command_EnableHardpointCorrections;
	bool  syncO_m1m3_command_EnableHardpointCorrections;
	bool  flush_m1m3_command_EnableHardpointCorrections;
	bool  skipOld_m1m3_command_EnableHardpointCorrections;
	bool  hasIncoming_m1m3_command_EnableHardpointCorrections;
	bool  hasOutgoing_m1m3_command_EnableHardpointCorrections;
	bool  hasCallback_m1m3_command_EnableHardpointCorrections;
	int   callbackHdl_m1m3_command_EnableHardpointCorrections;
	bool  hasReader_m1m3_command_EnableHardpointCorrections;
	bool  hasWriter_m1m3_command_EnableHardpointCorrections;
	m1m3_command_EnableHardpointCorrectionsC  shmemIncoming_m1m3_command_EnableHardpointCorrections;
	m1m3_command_EnableHardpointCorrectionsC  shmemOutgoing_m1m3_command_EnableHardpointCorrections;
    bool syncI_m1m3_command_EnableHardpointCorrections_ackcmd;
    bool syncO_m1m3_command_EnableHardpointCorrections_ackcmd;
	bool skipOld_m1m3_command_EnableHardpointCorrections_ackcmd;
	bool hasIncoming_m1m3_command_EnableHardpointCorrections_ackcmd;
	bool hasOutgoing_m1m3_command_EnableHardpointCorrections_ackcmd;
	bool hasCallback_m1m3_command_EnableHardpointCorrections_ackcmd;
	bool ackIt_m1m3_command_EnableHardpointCorrections;
	int  callbackHdl_m1m3_command_EnableHardpointCorrections_ackcmd;
	int  shmemOutgoing_m1m3_command_EnableHardpointCorrections_cmdSeqNum;
	int  shmemIncoming_m1m3_command_EnableHardpointCorrections_rcvSeqNum;
	int  shmemOutgoing_m1m3_command_EnableHardpointCorrections_cmdStatus;
	int  shmemOutgoing_m1m3_command_EnableHardpointCorrections_errorCode;
	int  shmemIncoming_m1m3_command_EnableHardpointCorrections_cmdStatus;
	int  shmemIncoming_m1m3_command_EnableHardpointCorrections_errorCode;
	int  shmemIncoming_m1m3_command_EnableHardpointCorrections_waitForSeqNum;
	char shmemOutgoing_m1m3_command_EnableHardpointCorrections_resultCode[128];
	char shmemIncoming_m1m3_command_EnableHardpointCorrections_resultCode[128];
	bool  syncI_m1m3_command_EnterEngineering;
	bool  syncO_m1m3_command_EnterEngineering;
	bool  flush_m1m3_command_EnterEngineering;
	bool  skipOld_m1m3_command_EnterEngineering;
	bool  hasIncoming_m1m3_command_EnterEngineering;
	bool  hasOutgoing_m1m3_command_EnterEngineering;
	bool  hasCallback_m1m3_command_EnterEngineering;
	int   callbackHdl_m1m3_command_EnterEngineering;
	bool  hasReader_m1m3_command_EnterEngineering;
	bool  hasWriter_m1m3_command_EnterEngineering;
	m1m3_command_EnterEngineeringC  shmemIncoming_m1m3_command_EnterEngineering;
	m1m3_command_EnterEngineeringC  shmemOutgoing_m1m3_command_EnterEngineering;
    bool syncI_m1m3_command_EnterEngineering_ackcmd;
    bool syncO_m1m3_command_EnterEngineering_ackcmd;
	bool skipOld_m1m3_command_EnterEngineering_ackcmd;
	bool hasIncoming_m1m3_command_EnterEngineering_ackcmd;
	bool hasOutgoing_m1m3_command_EnterEngineering_ackcmd;
	bool hasCallback_m1m3_command_EnterEngineering_ackcmd;
	bool ackIt_m1m3_command_EnterEngineering;
	int  callbackHdl_m1m3_command_EnterEngineering_ackcmd;
	int  shmemOutgoing_m1m3_command_EnterEngineering_cmdSeqNum;
	int  shmemIncoming_m1m3_command_EnterEngineering_rcvSeqNum;
	int  shmemOutgoing_m1m3_command_EnterEngineering_cmdStatus;
	int  shmemOutgoing_m1m3_command_EnterEngineering_errorCode;
	int  shmemIncoming_m1m3_command_EnterEngineering_cmdStatus;
	int  shmemIncoming_m1m3_command_EnterEngineering_errorCode;
	int  shmemIncoming_m1m3_command_EnterEngineering_waitForSeqNum;
	char shmemOutgoing_m1m3_command_EnterEngineering_resultCode[128];
	char shmemIncoming_m1m3_command_EnterEngineering_resultCode[128];
	bool  syncI_m1m3_command_ExitEngineering;
	bool  syncO_m1m3_command_ExitEngineering;
	bool  flush_m1m3_command_ExitEngineering;
	bool  skipOld_m1m3_command_ExitEngineering;
	bool  hasIncoming_m1m3_command_ExitEngineering;
	bool  hasOutgoing_m1m3_command_ExitEngineering;
	bool  hasCallback_m1m3_command_ExitEngineering;
	int   callbackHdl_m1m3_command_ExitEngineering;
	bool  hasReader_m1m3_command_ExitEngineering;
	bool  hasWriter_m1m3_command_ExitEngineering;
	m1m3_command_ExitEngineeringC  shmemIncoming_m1m3_command_ExitEngineering;
	m1m3_command_ExitEngineeringC  shmemOutgoing_m1m3_command_ExitEngineering;
    bool syncI_m1m3_command_ExitEngineering_ackcmd;
    bool syncO_m1m3_command_ExitEngineering_ackcmd;
	bool skipOld_m1m3_command_ExitEngineering_ackcmd;
	bool hasIncoming_m1m3_command_ExitEngineering_ackcmd;
	bool hasOutgoing_m1m3_command_ExitEngineering_ackcmd;
	bool hasCallback_m1m3_command_ExitEngineering_ackcmd;
	bool ackIt_m1m3_command_ExitEngineering;
	int  callbackHdl_m1m3_command_ExitEngineering_ackcmd;
	int  shmemOutgoing_m1m3_command_ExitEngineering_cmdSeqNum;
	int  shmemIncoming_m1m3_command_ExitEngineering_rcvSeqNum;
	int  shmemOutgoing_m1m3_command_ExitEngineering_cmdStatus;
	int  shmemOutgoing_m1m3_command_ExitEngineering_errorCode;
	int  shmemIncoming_m1m3_command_ExitEngineering_cmdStatus;
	int  shmemIncoming_m1m3_command_ExitEngineering_errorCode;
	int  shmemIncoming_m1m3_command_ExitEngineering_waitForSeqNum;
	char shmemOutgoing_m1m3_command_ExitEngineering_resultCode[128];
	char shmemIncoming_m1m3_command_ExitEngineering_resultCode[128];
	bool  syncI_m1m3_command_LowerM1M3;
	bool  syncO_m1m3_command_LowerM1M3;
	bool  flush_m1m3_command_LowerM1M3;
	bool  skipOld_m1m3_command_LowerM1M3;
	bool  hasIncoming_m1m3_command_LowerM1M3;
	bool  hasOutgoing_m1m3_command_LowerM1M3;
	bool  hasCallback_m1m3_command_LowerM1M3;
	int   callbackHdl_m1m3_command_LowerM1M3;
	bool  hasReader_m1m3_command_LowerM1M3;
	bool  hasWriter_m1m3_command_LowerM1M3;
	m1m3_command_LowerM1M3C  shmemIncoming_m1m3_command_LowerM1M3;
	m1m3_command_LowerM1M3C  shmemOutgoing_m1m3_command_LowerM1M3;
    bool syncI_m1m3_command_LowerM1M3_ackcmd;
    bool syncO_m1m3_command_LowerM1M3_ackcmd;
	bool skipOld_m1m3_command_LowerM1M3_ackcmd;
	bool hasIncoming_m1m3_command_LowerM1M3_ackcmd;
	bool hasOutgoing_m1m3_command_LowerM1M3_ackcmd;
	bool hasCallback_m1m3_command_LowerM1M3_ackcmd;
	bool ackIt_m1m3_command_LowerM1M3;
	int  callbackHdl_m1m3_command_LowerM1M3_ackcmd;
	int  shmemOutgoing_m1m3_command_LowerM1M3_cmdSeqNum;
	int  shmemIncoming_m1m3_command_LowerM1M3_rcvSeqNum;
	int  shmemOutgoing_m1m3_command_LowerM1M3_cmdStatus;
	int  shmemOutgoing_m1m3_command_LowerM1M3_errorCode;
	int  shmemIncoming_m1m3_command_LowerM1M3_cmdStatus;
	int  shmemIncoming_m1m3_command_LowerM1M3_errorCode;
	int  shmemIncoming_m1m3_command_LowerM1M3_waitForSeqNum;
	char shmemOutgoing_m1m3_command_LowerM1M3_resultCode[128];
	char shmemIncoming_m1m3_command_LowerM1M3_resultCode[128];
	bool  syncI_m1m3_command_MoveHardpointActuators;
	bool  syncO_m1m3_command_MoveHardpointActuators;
	bool  flush_m1m3_command_MoveHardpointActuators;
	bool  skipOld_m1m3_command_MoveHardpointActuators;
	bool  hasIncoming_m1m3_command_MoveHardpointActuators;
	bool  hasOutgoing_m1m3_command_MoveHardpointActuators;
	bool  hasCallback_m1m3_command_MoveHardpointActuators;
	int   callbackHdl_m1m3_command_MoveHardpointActuators;
	bool  hasReader_m1m3_command_MoveHardpointActuators;
	bool  hasWriter_m1m3_command_MoveHardpointActuators;
	m1m3_command_MoveHardpointActuatorsC  shmemIncoming_m1m3_command_MoveHardpointActuators;
	m1m3_command_MoveHardpointActuatorsC  shmemOutgoing_m1m3_command_MoveHardpointActuators;
    bool syncI_m1m3_command_MoveHardpointActuators_ackcmd;
    bool syncO_m1m3_command_MoveHardpointActuators_ackcmd;
	bool skipOld_m1m3_command_MoveHardpointActuators_ackcmd;
	bool hasIncoming_m1m3_command_MoveHardpointActuators_ackcmd;
	bool hasOutgoing_m1m3_command_MoveHardpointActuators_ackcmd;
	bool hasCallback_m1m3_command_MoveHardpointActuators_ackcmd;
	bool ackIt_m1m3_command_MoveHardpointActuators;
	int  callbackHdl_m1m3_command_MoveHardpointActuators_ackcmd;
	int  shmemOutgoing_m1m3_command_MoveHardpointActuators_cmdSeqNum;
	int  shmemIncoming_m1m3_command_MoveHardpointActuators_rcvSeqNum;
	int  shmemOutgoing_m1m3_command_MoveHardpointActuators_cmdStatus;
	int  shmemOutgoing_m1m3_command_MoveHardpointActuators_errorCode;
	int  shmemIncoming_m1m3_command_MoveHardpointActuators_cmdStatus;
	int  shmemIncoming_m1m3_command_MoveHardpointActuators_errorCode;
	int  shmemIncoming_m1m3_command_MoveHardpointActuators_waitForSeqNum;
	char shmemOutgoing_m1m3_command_MoveHardpointActuators_resultCode[128];
	char shmemIncoming_m1m3_command_MoveHardpointActuators_resultCode[128];
	bool  syncI_m1m3_command_PositionM1M3;
	bool  syncO_m1m3_command_PositionM1M3;
	bool  flush_m1m3_command_PositionM1M3;
	bool  skipOld_m1m3_command_PositionM1M3;
	bool  hasIncoming_m1m3_command_PositionM1M3;
	bool  hasOutgoing_m1m3_command_PositionM1M3;
	bool  hasCallback_m1m3_command_PositionM1M3;
	int   callbackHdl_m1m3_command_PositionM1M3;
	bool  hasReader_m1m3_command_PositionM1M3;
	bool  hasWriter_m1m3_command_PositionM1M3;
	m1m3_command_PositionM1M3C  shmemIncoming_m1m3_command_PositionM1M3;
	m1m3_command_PositionM1M3C  shmemOutgoing_m1m3_command_PositionM1M3;
    bool syncI_m1m3_command_PositionM1M3_ackcmd;
    bool syncO_m1m3_command_PositionM1M3_ackcmd;
	bool skipOld_m1m3_command_PositionM1M3_ackcmd;
	bool hasIncoming_m1m3_command_PositionM1M3_ackcmd;
	bool hasOutgoing_m1m3_command_PositionM1M3_ackcmd;
	bool hasCallback_m1m3_command_PositionM1M3_ackcmd;
	bool ackIt_m1m3_command_PositionM1M3;
	int  callbackHdl_m1m3_command_PositionM1M3_ackcmd;
	int  shmemOutgoing_m1m3_command_PositionM1M3_cmdSeqNum;
	int  shmemIncoming_m1m3_command_PositionM1M3_rcvSeqNum;
	int  shmemOutgoing_m1m3_command_PositionM1M3_cmdStatus;
	int  shmemOutgoing_m1m3_command_PositionM1M3_errorCode;
	int  shmemIncoming_m1m3_command_PositionM1M3_cmdStatus;
	int  shmemIncoming_m1m3_command_PositionM1M3_errorCode;
	int  shmemIncoming_m1m3_command_PositionM1M3_waitForSeqNum;
	char shmemOutgoing_m1m3_command_PositionM1M3_resultCode[128];
	char shmemIncoming_m1m3_command_PositionM1M3_resultCode[128];
	bool  syncI_m1m3_command_ProgramILC;
	bool  syncO_m1m3_command_ProgramILC;
	bool  flush_m1m3_command_ProgramILC;
	bool  skipOld_m1m3_command_ProgramILC;
	bool  hasIncoming_m1m3_command_ProgramILC;
	bool  hasOutgoing_m1m3_command_ProgramILC;
	bool  hasCallback_m1m3_command_ProgramILC;
	int   callbackHdl_m1m3_command_ProgramILC;
	bool  hasReader_m1m3_command_ProgramILC;
	bool  hasWriter_m1m3_command_ProgramILC;
	m1m3_command_ProgramILCC  shmemIncoming_m1m3_command_ProgramILC;
	m1m3_command_ProgramILCC  shmemOutgoing_m1m3_command_ProgramILC;
    bool syncI_m1m3_command_ProgramILC_ackcmd;
    bool syncO_m1m3_command_ProgramILC_ackcmd;
	bool skipOld_m1m3_command_ProgramILC_ackcmd;
	bool hasIncoming_m1m3_command_ProgramILC_ackcmd;
	bool hasOutgoing_m1m3_command_ProgramILC_ackcmd;
	bool hasCallback_m1m3_command_ProgramILC_ackcmd;
	bool ackIt_m1m3_command_ProgramILC;
	int  callbackHdl_m1m3_command_ProgramILC_ackcmd;
	int  shmemOutgoing_m1m3_command_ProgramILC_cmdSeqNum;
	int  shmemIncoming_m1m3_command_ProgramILC_rcvSeqNum;
	int  shmemOutgoing_m1m3_command_ProgramILC_cmdStatus;
	int  shmemOutgoing_m1m3_command_ProgramILC_errorCode;
	int  shmemIncoming_m1m3_command_ProgramILC_cmdStatus;
	int  shmemIncoming_m1m3_command_ProgramILC_errorCode;
	int  shmemIncoming_m1m3_command_ProgramILC_waitForSeqNum;
	char shmemOutgoing_m1m3_command_ProgramILC_resultCode[128];
	char shmemIncoming_m1m3_command_ProgramILC_resultCode[128];
	bool  syncI_m1m3_command_RaiseM1M3;
	bool  syncO_m1m3_command_RaiseM1M3;
	bool  flush_m1m3_command_RaiseM1M3;
	bool  skipOld_m1m3_command_RaiseM1M3;
	bool  hasIncoming_m1m3_command_RaiseM1M3;
	bool  hasOutgoing_m1m3_command_RaiseM1M3;
	bool  hasCallback_m1m3_command_RaiseM1M3;
	int   callbackHdl_m1m3_command_RaiseM1M3;
	bool  hasReader_m1m3_command_RaiseM1M3;
	bool  hasWriter_m1m3_command_RaiseM1M3;
	m1m3_command_RaiseM1M3C  shmemIncoming_m1m3_command_RaiseM1M3;
	m1m3_command_RaiseM1M3C  shmemOutgoing_m1m3_command_RaiseM1M3;
    bool syncI_m1m3_command_RaiseM1M3_ackcmd;
    bool syncO_m1m3_command_RaiseM1M3_ackcmd;
	bool skipOld_m1m3_command_RaiseM1M3_ackcmd;
	bool hasIncoming_m1m3_command_RaiseM1M3_ackcmd;
	bool hasOutgoing_m1m3_command_RaiseM1M3_ackcmd;
	bool hasCallback_m1m3_command_RaiseM1M3_ackcmd;
	bool ackIt_m1m3_command_RaiseM1M3;
	int  callbackHdl_m1m3_command_RaiseM1M3_ackcmd;
	int  shmemOutgoing_m1m3_command_RaiseM1M3_cmdSeqNum;
	int  shmemIncoming_m1m3_command_RaiseM1M3_rcvSeqNum;
	int  shmemOutgoing_m1m3_command_RaiseM1M3_cmdStatus;
	int  shmemOutgoing_m1m3_command_RaiseM1M3_errorCode;
	int  shmemIncoming_m1m3_command_RaiseM1M3_cmdStatus;
	int  shmemIncoming_m1m3_command_RaiseM1M3_errorCode;
	int  shmemIncoming_m1m3_command_RaiseM1M3_waitForSeqNum;
	char shmemOutgoing_m1m3_command_RaiseM1M3_resultCode[128];
	char shmemIncoming_m1m3_command_RaiseM1M3_resultCode[128];
	bool  syncI_m1m3_command_ResetPID;
	bool  syncO_m1m3_command_ResetPID;
	bool  flush_m1m3_command_ResetPID;
	bool  skipOld_m1m3_command_ResetPID;
	bool  hasIncoming_m1m3_command_ResetPID;
	bool  hasOutgoing_m1m3_command_ResetPID;
	bool  hasCallback_m1m3_command_ResetPID;
	int   callbackHdl_m1m3_command_ResetPID;
	bool  hasReader_m1m3_command_ResetPID;
	bool  hasWriter_m1m3_command_ResetPID;
	m1m3_command_ResetPIDC  shmemIncoming_m1m3_command_ResetPID;
	m1m3_command_ResetPIDC  shmemOutgoing_m1m3_command_ResetPID;
    bool syncI_m1m3_command_ResetPID_ackcmd;
    bool syncO_m1m3_command_ResetPID_ackcmd;
	bool skipOld_m1m3_command_ResetPID_ackcmd;
	bool hasIncoming_m1m3_command_ResetPID_ackcmd;
	bool hasOutgoing_m1m3_command_ResetPID_ackcmd;
	bool hasCallback_m1m3_command_ResetPID_ackcmd;
	bool ackIt_m1m3_command_ResetPID;
	int  callbackHdl_m1m3_command_ResetPID_ackcmd;
	int  shmemOutgoing_m1m3_command_ResetPID_cmdSeqNum;
	int  shmemIncoming_m1m3_command_ResetPID_rcvSeqNum;
	int  shmemOutgoing_m1m3_command_ResetPID_cmdStatus;
	int  shmemOutgoing_m1m3_command_ResetPID_errorCode;
	int  shmemIncoming_m1m3_command_ResetPID_cmdStatus;
	int  shmemIncoming_m1m3_command_ResetPID_errorCode;
	int  shmemIncoming_m1m3_command_ResetPID_waitForSeqNum;
	char shmemOutgoing_m1m3_command_ResetPID_resultCode[128];
	char shmemIncoming_m1m3_command_ResetPID_resultCode[128];
	bool  syncI_m1m3_command_RunMirrorForceProfile;
	bool  syncO_m1m3_command_RunMirrorForceProfile;
	bool  flush_m1m3_command_RunMirrorForceProfile;
	bool  skipOld_m1m3_command_RunMirrorForceProfile;
	bool  hasIncoming_m1m3_command_RunMirrorForceProfile;
	bool  hasOutgoing_m1m3_command_RunMirrorForceProfile;
	bool  hasCallback_m1m3_command_RunMirrorForceProfile;
	int   callbackHdl_m1m3_command_RunMirrorForceProfile;
	bool  hasReader_m1m3_command_RunMirrorForceProfile;
	bool  hasWriter_m1m3_command_RunMirrorForceProfile;
	m1m3_command_RunMirrorForceProfileC  shmemIncoming_m1m3_command_RunMirrorForceProfile;
	m1m3_command_RunMirrorForceProfileC  shmemOutgoing_m1m3_command_RunMirrorForceProfile;
    bool syncI_m1m3_command_RunMirrorForceProfile_ackcmd;
    bool syncO_m1m3_command_RunMirrorForceProfile_ackcmd;
	bool skipOld_m1m3_command_RunMirrorForceProfile_ackcmd;
	bool hasIncoming_m1m3_command_RunMirrorForceProfile_ackcmd;
	bool hasOutgoing_m1m3_command_RunMirrorForceProfile_ackcmd;
	bool hasCallback_m1m3_command_RunMirrorForceProfile_ackcmd;
	bool ackIt_m1m3_command_RunMirrorForceProfile;
	int  callbackHdl_m1m3_command_RunMirrorForceProfile_ackcmd;
	int  shmemOutgoing_m1m3_command_RunMirrorForceProfile_cmdSeqNum;
	int  shmemIncoming_m1m3_command_RunMirrorForceProfile_rcvSeqNum;
	int  shmemOutgoing_m1m3_command_RunMirrorForceProfile_cmdStatus;
	int  shmemOutgoing_m1m3_command_RunMirrorForceProfile_errorCode;
	int  shmemIncoming_m1m3_command_RunMirrorForceProfile_cmdStatus;
	int  shmemIncoming_m1m3_command_RunMirrorForceProfile_errorCode;
	int  shmemIncoming_m1m3_command_RunMirrorForceProfile_waitForSeqNum;
	char shmemOutgoing_m1m3_command_RunMirrorForceProfile_resultCode[128];
	char shmemIncoming_m1m3_command_RunMirrorForceProfile_resultCode[128];
	bool  syncI_m1m3_command_SetThermalSetpoint;
	bool  syncO_m1m3_command_SetThermalSetpoint;
	bool  flush_m1m3_command_SetThermalSetpoint;
	bool  skipOld_m1m3_command_SetThermalSetpoint;
	bool  hasIncoming_m1m3_command_SetThermalSetpoint;
	bool  hasOutgoing_m1m3_command_SetThermalSetpoint;
	bool  hasCallback_m1m3_command_SetThermalSetpoint;
	int   callbackHdl_m1m3_command_SetThermalSetpoint;
	bool  hasReader_m1m3_command_SetThermalSetpoint;
	bool  hasWriter_m1m3_command_SetThermalSetpoint;
	m1m3_command_SetThermalSetpointC  shmemIncoming_m1m3_command_SetThermalSetpoint;
	m1m3_command_SetThermalSetpointC  shmemOutgoing_m1m3_command_SetThermalSetpoint;
    bool syncI_m1m3_command_SetThermalSetpoint_ackcmd;
    bool syncO_m1m3_command_SetThermalSetpoint_ackcmd;
	bool skipOld_m1m3_command_SetThermalSetpoint_ackcmd;
	bool hasIncoming_m1m3_command_SetThermalSetpoint_ackcmd;
	bool hasOutgoing_m1m3_command_SetThermalSetpoint_ackcmd;
	bool hasCallback_m1m3_command_SetThermalSetpoint_ackcmd;
	bool ackIt_m1m3_command_SetThermalSetpoint;
	int  callbackHdl_m1m3_command_SetThermalSetpoint_ackcmd;
	int  shmemOutgoing_m1m3_command_SetThermalSetpoint_cmdSeqNum;
	int  shmemIncoming_m1m3_command_SetThermalSetpoint_rcvSeqNum;
	int  shmemOutgoing_m1m3_command_SetThermalSetpoint_cmdStatus;
	int  shmemOutgoing_m1m3_command_SetThermalSetpoint_errorCode;
	int  shmemIncoming_m1m3_command_SetThermalSetpoint_cmdStatus;
	int  shmemIncoming_m1m3_command_SetThermalSetpoint_errorCode;
	int  shmemIncoming_m1m3_command_SetThermalSetpoint_waitForSeqNum;
	char shmemOutgoing_m1m3_command_SetThermalSetpoint_resultCode[128];
	char shmemIncoming_m1m3_command_SetThermalSetpoint_resultCode[128];
	bool  syncI_m1m3_command_Shutdown;
	bool  syncO_m1m3_command_Shutdown;
	bool  flush_m1m3_command_Shutdown;
	bool  skipOld_m1m3_command_Shutdown;
	bool  hasIncoming_m1m3_command_Shutdown;
	bool  hasOutgoing_m1m3_command_Shutdown;
	bool  hasCallback_m1m3_command_Shutdown;
	int   callbackHdl_m1m3_command_Shutdown;
	bool  hasReader_m1m3_command_Shutdown;
	bool  hasWriter_m1m3_command_Shutdown;
	m1m3_command_ShutdownC  shmemIncoming_m1m3_command_Shutdown;
	m1m3_command_ShutdownC  shmemOutgoing_m1m3_command_Shutdown;
    bool syncI_m1m3_command_Shutdown_ackcmd;
    bool syncO_m1m3_command_Shutdown_ackcmd;
	bool skipOld_m1m3_command_Shutdown_ackcmd;
	bool hasIncoming_m1m3_command_Shutdown_ackcmd;
	bool hasOutgoing_m1m3_command_Shutdown_ackcmd;
	bool hasCallback_m1m3_command_Shutdown_ackcmd;
	bool ackIt_m1m3_command_Shutdown;
	int  callbackHdl_m1m3_command_Shutdown_ackcmd;
	int  shmemOutgoing_m1m3_command_Shutdown_cmdSeqNum;
	int  shmemIncoming_m1m3_command_Shutdown_rcvSeqNum;
	int  shmemOutgoing_m1m3_command_Shutdown_cmdStatus;
	int  shmemOutgoing_m1m3_command_Shutdown_errorCode;
	int  shmemIncoming_m1m3_command_Shutdown_cmdStatus;
	int  shmemIncoming_m1m3_command_Shutdown_errorCode;
	int  shmemIncoming_m1m3_command_Shutdown_waitForSeqNum;
	char shmemOutgoing_m1m3_command_Shutdown_resultCode[128];
	char shmemIncoming_m1m3_command_Shutdown_resultCode[128];
	bool  syncI_m1m3_command_Standby;
	bool  syncO_m1m3_command_Standby;
	bool  flush_m1m3_command_Standby;
	bool  skipOld_m1m3_command_Standby;
	bool  hasIncoming_m1m3_command_Standby;
	bool  hasOutgoing_m1m3_command_Standby;
	bool  hasCallback_m1m3_command_Standby;
	int   callbackHdl_m1m3_command_Standby;
	bool  hasReader_m1m3_command_Standby;
	bool  hasWriter_m1m3_command_Standby;
	m1m3_command_StandbyC  shmemIncoming_m1m3_command_Standby;
	m1m3_command_StandbyC  shmemOutgoing_m1m3_command_Standby;
    bool syncI_m1m3_command_Standby_ackcmd;
    bool syncO_m1m3_command_Standby_ackcmd;
	bool skipOld_m1m3_command_Standby_ackcmd;
	bool hasIncoming_m1m3_command_Standby_ackcmd;
	bool hasOutgoing_m1m3_command_Standby_ackcmd;
	bool hasCallback_m1m3_command_Standby_ackcmd;
	bool ackIt_m1m3_command_Standby;
	int  callbackHdl_m1m3_command_Standby_ackcmd;
	int  shmemOutgoing_m1m3_command_Standby_cmdSeqNum;
	int  shmemIncoming_m1m3_command_Standby_rcvSeqNum;
	int  shmemOutgoing_m1m3_command_Standby_cmdStatus;
	int  shmemOutgoing_m1m3_command_Standby_errorCode;
	int  shmemIncoming_m1m3_command_Standby_cmdStatus;
	int  shmemIncoming_m1m3_command_Standby_errorCode;
	int  shmemIncoming_m1m3_command_Standby_waitForSeqNum;
	char shmemOutgoing_m1m3_command_Standby_resultCode[128];
	char shmemIncoming_m1m3_command_Standby_resultCode[128];
	bool  syncI_m1m3_command_Start;
	bool  syncO_m1m3_command_Start;
	bool  flush_m1m3_command_Start;
	bool  skipOld_m1m3_command_Start;
	bool  hasIncoming_m1m3_command_Start;
	bool  hasOutgoing_m1m3_command_Start;
	bool  hasCallback_m1m3_command_Start;
	int   callbackHdl_m1m3_command_Start;
	bool  hasReader_m1m3_command_Start;
	bool  hasWriter_m1m3_command_Start;
	m1m3_command_StartC  shmemIncoming_m1m3_command_Start;
	m1m3_command_StartC  shmemOutgoing_m1m3_command_Start;
    bool syncI_m1m3_command_Start_ackcmd;
    bool syncO_m1m3_command_Start_ackcmd;
	bool skipOld_m1m3_command_Start_ackcmd;
	bool hasIncoming_m1m3_command_Start_ackcmd;
	bool hasOutgoing_m1m3_command_Start_ackcmd;
	bool hasCallback_m1m3_command_Start_ackcmd;
	bool ackIt_m1m3_command_Start;
	int  callbackHdl_m1m3_command_Start_ackcmd;
	int  shmemOutgoing_m1m3_command_Start_cmdSeqNum;
	int  shmemIncoming_m1m3_command_Start_rcvSeqNum;
	int  shmemOutgoing_m1m3_command_Start_cmdStatus;
	int  shmemOutgoing_m1m3_command_Start_errorCode;
	int  shmemIncoming_m1m3_command_Start_cmdStatus;
	int  shmemIncoming_m1m3_command_Start_errorCode;
	int  shmemIncoming_m1m3_command_Start_waitForSeqNum;
	char shmemOutgoing_m1m3_command_Start_resultCode[128];
	char shmemIncoming_m1m3_command_Start_resultCode[128];
	bool  syncI_m1m3_command_StopHardpointMotion;
	bool  syncO_m1m3_command_StopHardpointMotion;
	bool  flush_m1m3_command_StopHardpointMotion;
	bool  skipOld_m1m3_command_StopHardpointMotion;
	bool  hasIncoming_m1m3_command_StopHardpointMotion;
	bool  hasOutgoing_m1m3_command_StopHardpointMotion;
	bool  hasCallback_m1m3_command_StopHardpointMotion;
	int   callbackHdl_m1m3_command_StopHardpointMotion;
	bool  hasReader_m1m3_command_StopHardpointMotion;
	bool  hasWriter_m1m3_command_StopHardpointMotion;
	m1m3_command_StopHardpointMotionC  shmemIncoming_m1m3_command_StopHardpointMotion;
	m1m3_command_StopHardpointMotionC  shmemOutgoing_m1m3_command_StopHardpointMotion;
    bool syncI_m1m3_command_StopHardpointMotion_ackcmd;
    bool syncO_m1m3_command_StopHardpointMotion_ackcmd;
	bool skipOld_m1m3_command_StopHardpointMotion_ackcmd;
	bool hasIncoming_m1m3_command_StopHardpointMotion_ackcmd;
	bool hasOutgoing_m1m3_command_StopHardpointMotion_ackcmd;
	bool hasCallback_m1m3_command_StopHardpointMotion_ackcmd;
	bool ackIt_m1m3_command_StopHardpointMotion;
	int  callbackHdl_m1m3_command_StopHardpointMotion_ackcmd;
	int  shmemOutgoing_m1m3_command_StopHardpointMotion_cmdSeqNum;
	int  shmemIncoming_m1m3_command_StopHardpointMotion_rcvSeqNum;
	int  shmemOutgoing_m1m3_command_StopHardpointMotion_cmdStatus;
	int  shmemOutgoing_m1m3_command_StopHardpointMotion_errorCode;
	int  shmemIncoming_m1m3_command_StopHardpointMotion_cmdStatus;
	int  shmemIncoming_m1m3_command_StopHardpointMotion_errorCode;
	int  shmemIncoming_m1m3_command_StopHardpointMotion_waitForSeqNum;
	char shmemOutgoing_m1m3_command_StopHardpointMotion_resultCode[128];
	char shmemIncoming_m1m3_command_StopHardpointMotion_resultCode[128];
	bool  syncI_m1m3_command_TestAir;
	bool  syncO_m1m3_command_TestAir;
	bool  flush_m1m3_command_TestAir;
	bool  skipOld_m1m3_command_TestAir;
	bool  hasIncoming_m1m3_command_TestAir;
	bool  hasOutgoing_m1m3_command_TestAir;
	bool  hasCallback_m1m3_command_TestAir;
	int   callbackHdl_m1m3_command_TestAir;
	bool  hasReader_m1m3_command_TestAir;
	bool  hasWriter_m1m3_command_TestAir;
	m1m3_command_TestAirC  shmemIncoming_m1m3_command_TestAir;
	m1m3_command_TestAirC  shmemOutgoing_m1m3_command_TestAir;
    bool syncI_m1m3_command_TestAir_ackcmd;
    bool syncO_m1m3_command_TestAir_ackcmd;
	bool skipOld_m1m3_command_TestAir_ackcmd;
	bool hasIncoming_m1m3_command_TestAir_ackcmd;
	bool hasOutgoing_m1m3_command_TestAir_ackcmd;
	bool hasCallback_m1m3_command_TestAir_ackcmd;
	bool ackIt_m1m3_command_TestAir;
	int  callbackHdl_m1m3_command_TestAir_ackcmd;
	int  shmemOutgoing_m1m3_command_TestAir_cmdSeqNum;
	int  shmemIncoming_m1m3_command_TestAir_rcvSeqNum;
	int  shmemOutgoing_m1m3_command_TestAir_cmdStatus;
	int  shmemOutgoing_m1m3_command_TestAir_errorCode;
	int  shmemIncoming_m1m3_command_TestAir_cmdStatus;
	int  shmemIncoming_m1m3_command_TestAir_errorCode;
	int  shmemIncoming_m1m3_command_TestAir_waitForSeqNum;
	char shmemOutgoing_m1m3_command_TestAir_resultCode[128];
	char shmemIncoming_m1m3_command_TestAir_resultCode[128];
	bool  syncI_m1m3_command_TestForceActuator;
	bool  syncO_m1m3_command_TestForceActuator;
	bool  flush_m1m3_command_TestForceActuator;
	bool  skipOld_m1m3_command_TestForceActuator;
	bool  hasIncoming_m1m3_command_TestForceActuator;
	bool  hasOutgoing_m1m3_command_TestForceActuator;
	bool  hasCallback_m1m3_command_TestForceActuator;
	int   callbackHdl_m1m3_command_TestForceActuator;
	bool  hasReader_m1m3_command_TestForceActuator;
	bool  hasWriter_m1m3_command_TestForceActuator;
	m1m3_command_TestForceActuatorC  shmemIncoming_m1m3_command_TestForceActuator;
	m1m3_command_TestForceActuatorC  shmemOutgoing_m1m3_command_TestForceActuator;
    bool syncI_m1m3_command_TestForceActuator_ackcmd;
    bool syncO_m1m3_command_TestForceActuator_ackcmd;
	bool skipOld_m1m3_command_TestForceActuator_ackcmd;
	bool hasIncoming_m1m3_command_TestForceActuator_ackcmd;
	bool hasOutgoing_m1m3_command_TestForceActuator_ackcmd;
	bool hasCallback_m1m3_command_TestForceActuator_ackcmd;
	bool ackIt_m1m3_command_TestForceActuator;
	int  callbackHdl_m1m3_command_TestForceActuator_ackcmd;
	int  shmemOutgoing_m1m3_command_TestForceActuator_cmdSeqNum;
	int  shmemIncoming_m1m3_command_TestForceActuator_rcvSeqNum;
	int  shmemOutgoing_m1m3_command_TestForceActuator_cmdStatus;
	int  shmemOutgoing_m1m3_command_TestForceActuator_errorCode;
	int  shmemIncoming_m1m3_command_TestForceActuator_cmdStatus;
	int  shmemIncoming_m1m3_command_TestForceActuator_errorCode;
	int  shmemIncoming_m1m3_command_TestForceActuator_waitForSeqNum;
	char shmemOutgoing_m1m3_command_TestForceActuator_resultCode[128];
	char shmemIncoming_m1m3_command_TestForceActuator_resultCode[128];
	bool  syncI_m1m3_command_TestHardpoint;
	bool  syncO_m1m3_command_TestHardpoint;
	bool  flush_m1m3_command_TestHardpoint;
	bool  skipOld_m1m3_command_TestHardpoint;
	bool  hasIncoming_m1m3_command_TestHardpoint;
	bool  hasOutgoing_m1m3_command_TestHardpoint;
	bool  hasCallback_m1m3_command_TestHardpoint;
	int   callbackHdl_m1m3_command_TestHardpoint;
	bool  hasReader_m1m3_command_TestHardpoint;
	bool  hasWriter_m1m3_command_TestHardpoint;
	m1m3_command_TestHardpointC  shmemIncoming_m1m3_command_TestHardpoint;
	m1m3_command_TestHardpointC  shmemOutgoing_m1m3_command_TestHardpoint;
    bool syncI_m1m3_command_TestHardpoint_ackcmd;
    bool syncO_m1m3_command_TestHardpoint_ackcmd;
	bool skipOld_m1m3_command_TestHardpoint_ackcmd;
	bool hasIncoming_m1m3_command_TestHardpoint_ackcmd;
	bool hasOutgoing_m1m3_command_TestHardpoint_ackcmd;
	bool hasCallback_m1m3_command_TestHardpoint_ackcmd;
	bool ackIt_m1m3_command_TestHardpoint;
	int  callbackHdl_m1m3_command_TestHardpoint_ackcmd;
	int  shmemOutgoing_m1m3_command_TestHardpoint_cmdSeqNum;
	int  shmemIncoming_m1m3_command_TestHardpoint_rcvSeqNum;
	int  shmemOutgoing_m1m3_command_TestHardpoint_cmdStatus;
	int  shmemOutgoing_m1m3_command_TestHardpoint_errorCode;
	int  shmemIncoming_m1m3_command_TestHardpoint_cmdStatus;
	int  shmemIncoming_m1m3_command_TestHardpoint_errorCode;
	int  shmemIncoming_m1m3_command_TestHardpoint_waitForSeqNum;
	char shmemOutgoing_m1m3_command_TestHardpoint_resultCode[128];
	char shmemIncoming_m1m3_command_TestHardpoint_resultCode[128];
	bool  syncI_m1m3_command_TranslateM1M3;
	bool  syncO_m1m3_command_TranslateM1M3;
	bool  flush_m1m3_command_TranslateM1M3;
	bool  skipOld_m1m3_command_TranslateM1M3;
	bool  hasIncoming_m1m3_command_TranslateM1M3;
	bool  hasOutgoing_m1m3_command_TranslateM1M3;
	bool  hasCallback_m1m3_command_TranslateM1M3;
	int   callbackHdl_m1m3_command_TranslateM1M3;
	bool  hasReader_m1m3_command_TranslateM1M3;
	bool  hasWriter_m1m3_command_TranslateM1M3;
	m1m3_command_TranslateM1M3C  shmemIncoming_m1m3_command_TranslateM1M3;
	m1m3_command_TranslateM1M3C  shmemOutgoing_m1m3_command_TranslateM1M3;
    bool syncI_m1m3_command_TranslateM1M3_ackcmd;
    bool syncO_m1m3_command_TranslateM1M3_ackcmd;
	bool skipOld_m1m3_command_TranslateM1M3_ackcmd;
	bool hasIncoming_m1m3_command_TranslateM1M3_ackcmd;
	bool hasOutgoing_m1m3_command_TranslateM1M3_ackcmd;
	bool hasCallback_m1m3_command_TranslateM1M3_ackcmd;
	bool ackIt_m1m3_command_TranslateM1M3;
	int  callbackHdl_m1m3_command_TranslateM1M3_ackcmd;
	int  shmemOutgoing_m1m3_command_TranslateM1M3_cmdSeqNum;
	int  shmemIncoming_m1m3_command_TranslateM1M3_rcvSeqNum;
	int  shmemOutgoing_m1m3_command_TranslateM1M3_cmdStatus;
	int  shmemOutgoing_m1m3_command_TranslateM1M3_errorCode;
	int  shmemIncoming_m1m3_command_TranslateM1M3_cmdStatus;
	int  shmemIncoming_m1m3_command_TranslateM1M3_errorCode;
	int  shmemIncoming_m1m3_command_TranslateM1M3_waitForSeqNum;
	char shmemOutgoing_m1m3_command_TranslateM1M3_resultCode[128];
	char shmemIncoming_m1m3_command_TranslateM1M3_resultCode[128];
	bool  syncI_m1m3_command_TurnAirOff;
	bool  syncO_m1m3_command_TurnAirOff;
	bool  flush_m1m3_command_TurnAirOff;
	bool  skipOld_m1m3_command_TurnAirOff;
	bool  hasIncoming_m1m3_command_TurnAirOff;
	bool  hasOutgoing_m1m3_command_TurnAirOff;
	bool  hasCallback_m1m3_command_TurnAirOff;
	int   callbackHdl_m1m3_command_TurnAirOff;
	bool  hasReader_m1m3_command_TurnAirOff;
	bool  hasWriter_m1m3_command_TurnAirOff;
	m1m3_command_TurnAirOffC  shmemIncoming_m1m3_command_TurnAirOff;
	m1m3_command_TurnAirOffC  shmemOutgoing_m1m3_command_TurnAirOff;
    bool syncI_m1m3_command_TurnAirOff_ackcmd;
    bool syncO_m1m3_command_TurnAirOff_ackcmd;
	bool skipOld_m1m3_command_TurnAirOff_ackcmd;
	bool hasIncoming_m1m3_command_TurnAirOff_ackcmd;
	bool hasOutgoing_m1m3_command_TurnAirOff_ackcmd;
	bool hasCallback_m1m3_command_TurnAirOff_ackcmd;
	bool ackIt_m1m3_command_TurnAirOff;
	int  callbackHdl_m1m3_command_TurnAirOff_ackcmd;
	int  shmemOutgoing_m1m3_command_TurnAirOff_cmdSeqNum;
	int  shmemIncoming_m1m3_command_TurnAirOff_rcvSeqNum;
	int  shmemOutgoing_m1m3_command_TurnAirOff_cmdStatus;
	int  shmemOutgoing_m1m3_command_TurnAirOff_errorCode;
	int  shmemIncoming_m1m3_command_TurnAirOff_cmdStatus;
	int  shmemIncoming_m1m3_command_TurnAirOff_errorCode;
	int  shmemIncoming_m1m3_command_TurnAirOff_waitForSeqNum;
	char shmemOutgoing_m1m3_command_TurnAirOff_resultCode[128];
	char shmemIncoming_m1m3_command_TurnAirOff_resultCode[128];
	bool  syncI_m1m3_command_TurnAirOn;
	bool  syncO_m1m3_command_TurnAirOn;
	bool  flush_m1m3_command_TurnAirOn;
	bool  skipOld_m1m3_command_TurnAirOn;
	bool  hasIncoming_m1m3_command_TurnAirOn;
	bool  hasOutgoing_m1m3_command_TurnAirOn;
	bool  hasCallback_m1m3_command_TurnAirOn;
	int   callbackHdl_m1m3_command_TurnAirOn;
	bool  hasReader_m1m3_command_TurnAirOn;
	bool  hasWriter_m1m3_command_TurnAirOn;
	m1m3_command_TurnAirOnC  shmemIncoming_m1m3_command_TurnAirOn;
	m1m3_command_TurnAirOnC  shmemOutgoing_m1m3_command_TurnAirOn;
    bool syncI_m1m3_command_TurnAirOn_ackcmd;
    bool syncO_m1m3_command_TurnAirOn_ackcmd;
	bool skipOld_m1m3_command_TurnAirOn_ackcmd;
	bool hasIncoming_m1m3_command_TurnAirOn_ackcmd;
	bool hasOutgoing_m1m3_command_TurnAirOn_ackcmd;
	bool hasCallback_m1m3_command_TurnAirOn_ackcmd;
	bool ackIt_m1m3_command_TurnAirOn;
	int  callbackHdl_m1m3_command_TurnAirOn_ackcmd;
	int  shmemOutgoing_m1m3_command_TurnAirOn_cmdSeqNum;
	int  shmemIncoming_m1m3_command_TurnAirOn_rcvSeqNum;
	int  shmemOutgoing_m1m3_command_TurnAirOn_cmdStatus;
	int  shmemOutgoing_m1m3_command_TurnAirOn_errorCode;
	int  shmemIncoming_m1m3_command_TurnAirOn_cmdStatus;
	int  shmemIncoming_m1m3_command_TurnAirOn_errorCode;
	int  shmemIncoming_m1m3_command_TurnAirOn_waitForSeqNum;
	char shmemOutgoing_m1m3_command_TurnAirOn_resultCode[128];
	char shmemIncoming_m1m3_command_TurnAirOn_resultCode[128];
	bool  syncI_m1m3_command_TurnLightsOff;
	bool  syncO_m1m3_command_TurnLightsOff;
	bool  flush_m1m3_command_TurnLightsOff;
	bool  skipOld_m1m3_command_TurnLightsOff;
	bool  hasIncoming_m1m3_command_TurnLightsOff;
	bool  hasOutgoing_m1m3_command_TurnLightsOff;
	bool  hasCallback_m1m3_command_TurnLightsOff;
	int   callbackHdl_m1m3_command_TurnLightsOff;
	bool  hasReader_m1m3_command_TurnLightsOff;
	bool  hasWriter_m1m3_command_TurnLightsOff;
	m1m3_command_TurnLightsOffC  shmemIncoming_m1m3_command_TurnLightsOff;
	m1m3_command_TurnLightsOffC  shmemOutgoing_m1m3_command_TurnLightsOff;
    bool syncI_m1m3_command_TurnLightsOff_ackcmd;
    bool syncO_m1m3_command_TurnLightsOff_ackcmd;
	bool skipOld_m1m3_command_TurnLightsOff_ackcmd;
	bool hasIncoming_m1m3_command_TurnLightsOff_ackcmd;
	bool hasOutgoing_m1m3_command_TurnLightsOff_ackcmd;
	bool hasCallback_m1m3_command_TurnLightsOff_ackcmd;
	bool ackIt_m1m3_command_TurnLightsOff;
	int  callbackHdl_m1m3_command_TurnLightsOff_ackcmd;
	int  shmemOutgoing_m1m3_command_TurnLightsOff_cmdSeqNum;
	int  shmemIncoming_m1m3_command_TurnLightsOff_rcvSeqNum;
	int  shmemOutgoing_m1m3_command_TurnLightsOff_cmdStatus;
	int  shmemOutgoing_m1m3_command_TurnLightsOff_errorCode;
	int  shmemIncoming_m1m3_command_TurnLightsOff_cmdStatus;
	int  shmemIncoming_m1m3_command_TurnLightsOff_errorCode;
	int  shmemIncoming_m1m3_command_TurnLightsOff_waitForSeqNum;
	char shmemOutgoing_m1m3_command_TurnLightsOff_resultCode[128];
	char shmemIncoming_m1m3_command_TurnLightsOff_resultCode[128];
	bool  syncI_m1m3_command_TurnLightsOn;
	bool  syncO_m1m3_command_TurnLightsOn;
	bool  flush_m1m3_command_TurnLightsOn;
	bool  skipOld_m1m3_command_TurnLightsOn;
	bool  hasIncoming_m1m3_command_TurnLightsOn;
	bool  hasOutgoing_m1m3_command_TurnLightsOn;
	bool  hasCallback_m1m3_command_TurnLightsOn;
	int   callbackHdl_m1m3_command_TurnLightsOn;
	bool  hasReader_m1m3_command_TurnLightsOn;
	bool  hasWriter_m1m3_command_TurnLightsOn;
	m1m3_command_TurnLightsOnC  shmemIncoming_m1m3_command_TurnLightsOn;
	m1m3_command_TurnLightsOnC  shmemOutgoing_m1m3_command_TurnLightsOn;
    bool syncI_m1m3_command_TurnLightsOn_ackcmd;
    bool syncO_m1m3_command_TurnLightsOn_ackcmd;
	bool skipOld_m1m3_command_TurnLightsOn_ackcmd;
	bool hasIncoming_m1m3_command_TurnLightsOn_ackcmd;
	bool hasOutgoing_m1m3_command_TurnLightsOn_ackcmd;
	bool hasCallback_m1m3_command_TurnLightsOn_ackcmd;
	bool ackIt_m1m3_command_TurnLightsOn;
	int  callbackHdl_m1m3_command_TurnLightsOn_ackcmd;
	int  shmemOutgoing_m1m3_command_TurnLightsOn_cmdSeqNum;
	int  shmemIncoming_m1m3_command_TurnLightsOn_rcvSeqNum;
	int  shmemOutgoing_m1m3_command_TurnLightsOn_cmdStatus;
	int  shmemOutgoing_m1m3_command_TurnLightsOn_errorCode;
	int  shmemIncoming_m1m3_command_TurnLightsOn_cmdStatus;
	int  shmemIncoming_m1m3_command_TurnLightsOn_errorCode;
	int  shmemIncoming_m1m3_command_TurnLightsOn_waitForSeqNum;
	char shmemOutgoing_m1m3_command_TurnLightsOn_resultCode[128];
	char shmemIncoming_m1m3_command_TurnLightsOn_resultCode[128];
	bool  syncI_m1m3_command_TurnPowerOff;
	bool  syncO_m1m3_command_TurnPowerOff;
	bool  flush_m1m3_command_TurnPowerOff;
	bool  skipOld_m1m3_command_TurnPowerOff;
	bool  hasIncoming_m1m3_command_TurnPowerOff;
	bool  hasOutgoing_m1m3_command_TurnPowerOff;
	bool  hasCallback_m1m3_command_TurnPowerOff;
	int   callbackHdl_m1m3_command_TurnPowerOff;
	bool  hasReader_m1m3_command_TurnPowerOff;
	bool  hasWriter_m1m3_command_TurnPowerOff;
	m1m3_command_TurnPowerOffC  shmemIncoming_m1m3_command_TurnPowerOff;
	m1m3_command_TurnPowerOffC  shmemOutgoing_m1m3_command_TurnPowerOff;
    bool syncI_m1m3_command_TurnPowerOff_ackcmd;
    bool syncO_m1m3_command_TurnPowerOff_ackcmd;
	bool skipOld_m1m3_command_TurnPowerOff_ackcmd;
	bool hasIncoming_m1m3_command_TurnPowerOff_ackcmd;
	bool hasOutgoing_m1m3_command_TurnPowerOff_ackcmd;
	bool hasCallback_m1m3_command_TurnPowerOff_ackcmd;
	bool ackIt_m1m3_command_TurnPowerOff;
	int  callbackHdl_m1m3_command_TurnPowerOff_ackcmd;
	int  shmemOutgoing_m1m3_command_TurnPowerOff_cmdSeqNum;
	int  shmemIncoming_m1m3_command_TurnPowerOff_rcvSeqNum;
	int  shmemOutgoing_m1m3_command_TurnPowerOff_cmdStatus;
	int  shmemOutgoing_m1m3_command_TurnPowerOff_errorCode;
	int  shmemIncoming_m1m3_command_TurnPowerOff_cmdStatus;
	int  shmemIncoming_m1m3_command_TurnPowerOff_errorCode;
	int  shmemIncoming_m1m3_command_TurnPowerOff_waitForSeqNum;
	char shmemOutgoing_m1m3_command_TurnPowerOff_resultCode[128];
	char shmemIncoming_m1m3_command_TurnPowerOff_resultCode[128];
	bool  syncI_m1m3_command_TurnPowerOn;
	bool  syncO_m1m3_command_TurnPowerOn;
	bool  flush_m1m3_command_TurnPowerOn;
	bool  skipOld_m1m3_command_TurnPowerOn;
	bool  hasIncoming_m1m3_command_TurnPowerOn;
	bool  hasOutgoing_m1m3_command_TurnPowerOn;
	bool  hasCallback_m1m3_command_TurnPowerOn;
	int   callbackHdl_m1m3_command_TurnPowerOn;
	bool  hasReader_m1m3_command_TurnPowerOn;
	bool  hasWriter_m1m3_command_TurnPowerOn;
	m1m3_command_TurnPowerOnC  shmemIncoming_m1m3_command_TurnPowerOn;
	m1m3_command_TurnPowerOnC  shmemOutgoing_m1m3_command_TurnPowerOn;
    bool syncI_m1m3_command_TurnPowerOn_ackcmd;
    bool syncO_m1m3_command_TurnPowerOn_ackcmd;
	bool skipOld_m1m3_command_TurnPowerOn_ackcmd;
	bool hasIncoming_m1m3_command_TurnPowerOn_ackcmd;
	bool hasOutgoing_m1m3_command_TurnPowerOn_ackcmd;
	bool hasCallback_m1m3_command_TurnPowerOn_ackcmd;
	bool ackIt_m1m3_command_TurnPowerOn;
	int  callbackHdl_m1m3_command_TurnPowerOn_ackcmd;
	int  shmemOutgoing_m1m3_command_TurnPowerOn_cmdSeqNum;
	int  shmemIncoming_m1m3_command_TurnPowerOn_rcvSeqNum;
	int  shmemOutgoing_m1m3_command_TurnPowerOn_cmdStatus;
	int  shmemOutgoing_m1m3_command_TurnPowerOn_errorCode;
	int  shmemIncoming_m1m3_command_TurnPowerOn_cmdStatus;
	int  shmemIncoming_m1m3_command_TurnPowerOn_errorCode;
	int  shmemIncoming_m1m3_command_TurnPowerOn_waitForSeqNum;
	char shmemOutgoing_m1m3_command_TurnPowerOn_resultCode[128];
	char shmemIncoming_m1m3_command_TurnPowerOn_resultCode[128];
	bool  syncI_m1m3_command_UpdatePID;
	bool  syncO_m1m3_command_UpdatePID;
	bool  flush_m1m3_command_UpdatePID;
	bool  skipOld_m1m3_command_UpdatePID;
	bool  hasIncoming_m1m3_command_UpdatePID;
	bool  hasOutgoing_m1m3_command_UpdatePID;
	bool  hasCallback_m1m3_command_UpdatePID;
	int   callbackHdl_m1m3_command_UpdatePID;
	bool  hasReader_m1m3_command_UpdatePID;
	bool  hasWriter_m1m3_command_UpdatePID;
	m1m3_command_UpdatePIDC  shmemIncoming_m1m3_command_UpdatePID;
	m1m3_command_UpdatePIDC  shmemOutgoing_m1m3_command_UpdatePID;
    bool syncI_m1m3_command_UpdatePID_ackcmd;
    bool syncO_m1m3_command_UpdatePID_ackcmd;
	bool skipOld_m1m3_command_UpdatePID_ackcmd;
	bool hasIncoming_m1m3_command_UpdatePID_ackcmd;
	bool hasOutgoing_m1m3_command_UpdatePID_ackcmd;
	bool hasCallback_m1m3_command_UpdatePID_ackcmd;
	bool ackIt_m1m3_command_UpdatePID;
	int  callbackHdl_m1m3_command_UpdatePID_ackcmd;
	int  shmemOutgoing_m1m3_command_UpdatePID_cmdSeqNum;
	int  shmemIncoming_m1m3_command_UpdatePID_rcvSeqNum;
	int  shmemOutgoing_m1m3_command_UpdatePID_cmdStatus;
	int  shmemOutgoing_m1m3_command_UpdatePID_errorCode;
	int  shmemIncoming_m1m3_command_UpdatePID_cmdStatus;
	int  shmemIncoming_m1m3_command_UpdatePID_errorCode;
	int  shmemIncoming_m1m3_command_UpdatePID_waitForSeqNum;
	char shmemOutgoing_m1m3_command_UpdatePID_resultCode[128];
	char shmemIncoming_m1m3_command_UpdatePID_resultCode[128];
	bool  syncI_m1m3_logevent;
	bool  syncO_m1m3_logevent;
	bool  flush_m1m3_logevent;
	bool  skipOld_m1m3_logevent;
	bool  hasIncoming_m1m3_logevent;
	bool  hasOutgoing_m1m3_logevent;
	bool  hasCallback_m1m3_logevent;
	int   callbackHdl_m1m3_logevent;
	bool  hasReader_m1m3_logevent;
	bool  hasWriter_m1m3_logevent;
	bool  syncI_m1m3_logevent_AccelerometerWarning;
	bool  syncO_m1m3_logevent_AccelerometerWarning;
	bool  flush_m1m3_logevent_AccelerometerWarning;
	bool  skipOld_m1m3_logevent_AccelerometerWarning;
	bool  hasIncoming_m1m3_logevent_AccelerometerWarning;
	bool  hasOutgoing_m1m3_logevent_AccelerometerWarning;
	bool  hasCallback_m1m3_logevent_AccelerometerWarning;
	int   callbackHdl_m1m3_logevent_AccelerometerWarning;
	bool  hasReader_m1m3_logevent_AccelerometerWarning;
	bool  hasWriter_m1m3_logevent_AccelerometerWarning;
	m1m3_logevent_AccelerometerWarningC  shmemIncoming_m1m3_logevent_AccelerometerWarning;
	m1m3_logevent_AccelerometerWarningC  shmemOutgoing_m1m3_logevent_AccelerometerWarning;
	bool  syncI_m1m3_logevent_AirSupplyStatus;
	bool  syncO_m1m3_logevent_AirSupplyStatus;
	bool  flush_m1m3_logevent_AirSupplyStatus;
	bool  skipOld_m1m3_logevent_AirSupplyStatus;
	bool  hasIncoming_m1m3_logevent_AirSupplyStatus;
	bool  hasOutgoing_m1m3_logevent_AirSupplyStatus;
	bool  hasCallback_m1m3_logevent_AirSupplyStatus;
	int   callbackHdl_m1m3_logevent_AirSupplyStatus;
	bool  hasReader_m1m3_logevent_AirSupplyStatus;
	bool  hasWriter_m1m3_logevent_AirSupplyStatus;
	m1m3_logevent_AirSupplyStatusC  shmemIncoming_m1m3_logevent_AirSupplyStatus;
	m1m3_logevent_AirSupplyStatusC  shmemOutgoing_m1m3_logevent_AirSupplyStatus;
	bool  syncI_m1m3_logevent_AirSupplyWarning;
	bool  syncO_m1m3_logevent_AirSupplyWarning;
	bool  flush_m1m3_logevent_AirSupplyWarning;
	bool  skipOld_m1m3_logevent_AirSupplyWarning;
	bool  hasIncoming_m1m3_logevent_AirSupplyWarning;
	bool  hasOutgoing_m1m3_logevent_AirSupplyWarning;
	bool  hasCallback_m1m3_logevent_AirSupplyWarning;
	int   callbackHdl_m1m3_logevent_AirSupplyWarning;
	bool  hasReader_m1m3_logevent_AirSupplyWarning;
	bool  hasWriter_m1m3_logevent_AirSupplyWarning;
	m1m3_logevent_AirSupplyWarningC  shmemIncoming_m1m3_logevent_AirSupplyWarning;
	m1m3_logevent_AirSupplyWarningC  shmemOutgoing_m1m3_logevent_AirSupplyWarning;
	bool  syncI_m1m3_logevent_AppliedAberrationForces;
	bool  syncO_m1m3_logevent_AppliedAberrationForces;
	bool  flush_m1m3_logevent_AppliedAberrationForces;
	bool  skipOld_m1m3_logevent_AppliedAberrationForces;
	bool  hasIncoming_m1m3_logevent_AppliedAberrationForces;
	bool  hasOutgoing_m1m3_logevent_AppliedAberrationForces;
	bool  hasCallback_m1m3_logevent_AppliedAberrationForces;
	int   callbackHdl_m1m3_logevent_AppliedAberrationForces;
	bool  hasReader_m1m3_logevent_AppliedAberrationForces;
	bool  hasWriter_m1m3_logevent_AppliedAberrationForces;
	m1m3_logevent_AppliedAberrationForcesC  shmemIncoming_m1m3_logevent_AppliedAberrationForces;
	m1m3_logevent_AppliedAberrationForcesC  shmemOutgoing_m1m3_logevent_AppliedAberrationForces;
	bool  syncI_m1m3_logevent_AppliedAccelerationForces;
	bool  syncO_m1m3_logevent_AppliedAccelerationForces;
	bool  flush_m1m3_logevent_AppliedAccelerationForces;
	bool  skipOld_m1m3_logevent_AppliedAccelerationForces;
	bool  hasIncoming_m1m3_logevent_AppliedAccelerationForces;
	bool  hasOutgoing_m1m3_logevent_AppliedAccelerationForces;
	bool  hasCallback_m1m3_logevent_AppliedAccelerationForces;
	int   callbackHdl_m1m3_logevent_AppliedAccelerationForces;
	bool  hasReader_m1m3_logevent_AppliedAccelerationForces;
	bool  hasWriter_m1m3_logevent_AppliedAccelerationForces;
	m1m3_logevent_AppliedAccelerationForcesC  shmemIncoming_m1m3_logevent_AppliedAccelerationForces;
	m1m3_logevent_AppliedAccelerationForcesC  shmemOutgoing_m1m3_logevent_AppliedAccelerationForces;
	bool  syncI_m1m3_logevent_AppliedActiveOpticForces;
	bool  syncO_m1m3_logevent_AppliedActiveOpticForces;
	bool  flush_m1m3_logevent_AppliedActiveOpticForces;
	bool  skipOld_m1m3_logevent_AppliedActiveOpticForces;
	bool  hasIncoming_m1m3_logevent_AppliedActiveOpticForces;
	bool  hasOutgoing_m1m3_logevent_AppliedActiveOpticForces;
	bool  hasCallback_m1m3_logevent_AppliedActiveOpticForces;
	int   callbackHdl_m1m3_logevent_AppliedActiveOpticForces;
	bool  hasReader_m1m3_logevent_AppliedActiveOpticForces;
	bool  hasWriter_m1m3_logevent_AppliedActiveOpticForces;
	m1m3_logevent_AppliedActiveOpticForcesC  shmemIncoming_m1m3_logevent_AppliedActiveOpticForces;
	m1m3_logevent_AppliedActiveOpticForcesC  shmemOutgoing_m1m3_logevent_AppliedActiveOpticForces;
	bool  syncI_m1m3_logevent_AppliedAzimuthForces;
	bool  syncO_m1m3_logevent_AppliedAzimuthForces;
	bool  flush_m1m3_logevent_AppliedAzimuthForces;
	bool  skipOld_m1m3_logevent_AppliedAzimuthForces;
	bool  hasIncoming_m1m3_logevent_AppliedAzimuthForces;
	bool  hasOutgoing_m1m3_logevent_AppliedAzimuthForces;
	bool  hasCallback_m1m3_logevent_AppliedAzimuthForces;
	int   callbackHdl_m1m3_logevent_AppliedAzimuthForces;
	bool  hasReader_m1m3_logevent_AppliedAzimuthForces;
	bool  hasWriter_m1m3_logevent_AppliedAzimuthForces;
	m1m3_logevent_AppliedAzimuthForcesC  shmemIncoming_m1m3_logevent_AppliedAzimuthForces;
	m1m3_logevent_AppliedAzimuthForcesC  shmemOutgoing_m1m3_logevent_AppliedAzimuthForces;
	bool  syncI_m1m3_logevent_AppliedBalanceForces;
	bool  syncO_m1m3_logevent_AppliedBalanceForces;
	bool  flush_m1m3_logevent_AppliedBalanceForces;
	bool  skipOld_m1m3_logevent_AppliedBalanceForces;
	bool  hasIncoming_m1m3_logevent_AppliedBalanceForces;
	bool  hasOutgoing_m1m3_logevent_AppliedBalanceForces;
	bool  hasCallback_m1m3_logevent_AppliedBalanceForces;
	int   callbackHdl_m1m3_logevent_AppliedBalanceForces;
	bool  hasReader_m1m3_logevent_AppliedBalanceForces;
	bool  hasWriter_m1m3_logevent_AppliedBalanceForces;
	m1m3_logevent_AppliedBalanceForcesC  shmemIncoming_m1m3_logevent_AppliedBalanceForces;
	m1m3_logevent_AppliedBalanceForcesC  shmemOutgoing_m1m3_logevent_AppliedBalanceForces;
	bool  syncI_m1m3_logevent_AppliedCylinderForces;
	bool  syncO_m1m3_logevent_AppliedCylinderForces;
	bool  flush_m1m3_logevent_AppliedCylinderForces;
	bool  skipOld_m1m3_logevent_AppliedCylinderForces;
	bool  hasIncoming_m1m3_logevent_AppliedCylinderForces;
	bool  hasOutgoing_m1m3_logevent_AppliedCylinderForces;
	bool  hasCallback_m1m3_logevent_AppliedCylinderForces;
	int   callbackHdl_m1m3_logevent_AppliedCylinderForces;
	bool  hasReader_m1m3_logevent_AppliedCylinderForces;
	bool  hasWriter_m1m3_logevent_AppliedCylinderForces;
	m1m3_logevent_AppliedCylinderForcesC  shmemIncoming_m1m3_logevent_AppliedCylinderForces;
	m1m3_logevent_AppliedCylinderForcesC  shmemOutgoing_m1m3_logevent_AppliedCylinderForces;
	bool  syncI_m1m3_logevent_AppliedElevationForces;
	bool  syncO_m1m3_logevent_AppliedElevationForces;
	bool  flush_m1m3_logevent_AppliedElevationForces;
	bool  skipOld_m1m3_logevent_AppliedElevationForces;
	bool  hasIncoming_m1m3_logevent_AppliedElevationForces;
	bool  hasOutgoing_m1m3_logevent_AppliedElevationForces;
	bool  hasCallback_m1m3_logevent_AppliedElevationForces;
	int   callbackHdl_m1m3_logevent_AppliedElevationForces;
	bool  hasReader_m1m3_logevent_AppliedElevationForces;
	bool  hasWriter_m1m3_logevent_AppliedElevationForces;
	m1m3_logevent_AppliedElevationForcesC  shmemIncoming_m1m3_logevent_AppliedElevationForces;
	m1m3_logevent_AppliedElevationForcesC  shmemOutgoing_m1m3_logevent_AppliedElevationForces;
	bool  syncI_m1m3_logevent_AppliedForces;
	bool  syncO_m1m3_logevent_AppliedForces;
	bool  flush_m1m3_logevent_AppliedForces;
	bool  skipOld_m1m3_logevent_AppliedForces;
	bool  hasIncoming_m1m3_logevent_AppliedForces;
	bool  hasOutgoing_m1m3_logevent_AppliedForces;
	bool  hasCallback_m1m3_logevent_AppliedForces;
	int   callbackHdl_m1m3_logevent_AppliedForces;
	bool  hasReader_m1m3_logevent_AppliedForces;
	bool  hasWriter_m1m3_logevent_AppliedForces;
	m1m3_logevent_AppliedForcesC  shmemIncoming_m1m3_logevent_AppliedForces;
	m1m3_logevent_AppliedForcesC  shmemOutgoing_m1m3_logevent_AppliedForces;
	bool  syncI_m1m3_logevent_AppliedOffsetForces;
	bool  syncO_m1m3_logevent_AppliedOffsetForces;
	bool  flush_m1m3_logevent_AppliedOffsetForces;
	bool  skipOld_m1m3_logevent_AppliedOffsetForces;
	bool  hasIncoming_m1m3_logevent_AppliedOffsetForces;
	bool  hasOutgoing_m1m3_logevent_AppliedOffsetForces;
	bool  hasCallback_m1m3_logevent_AppliedOffsetForces;
	int   callbackHdl_m1m3_logevent_AppliedOffsetForces;
	bool  hasReader_m1m3_logevent_AppliedOffsetForces;
	bool  hasWriter_m1m3_logevent_AppliedOffsetForces;
	m1m3_logevent_AppliedOffsetForcesC  shmemIncoming_m1m3_logevent_AppliedOffsetForces;
	m1m3_logevent_AppliedOffsetForcesC  shmemOutgoing_m1m3_logevent_AppliedOffsetForces;
	bool  syncI_m1m3_logevent_AppliedSettingsMatchStart;
	bool  syncO_m1m3_logevent_AppliedSettingsMatchStart;
	bool  flush_m1m3_logevent_AppliedSettingsMatchStart;
	bool  skipOld_m1m3_logevent_AppliedSettingsMatchStart;
	bool  hasIncoming_m1m3_logevent_AppliedSettingsMatchStart;
	bool  hasOutgoing_m1m3_logevent_AppliedSettingsMatchStart;
	bool  hasCallback_m1m3_logevent_AppliedSettingsMatchStart;
	int   callbackHdl_m1m3_logevent_AppliedSettingsMatchStart;
	bool  hasReader_m1m3_logevent_AppliedSettingsMatchStart;
	bool  hasWriter_m1m3_logevent_AppliedSettingsMatchStart;
	m1m3_logevent_AppliedSettingsMatchStartC  shmemIncoming_m1m3_logevent_AppliedSettingsMatchStart;
	m1m3_logevent_AppliedSettingsMatchStartC  shmemOutgoing_m1m3_logevent_AppliedSettingsMatchStart;
	bool  syncI_m1m3_logevent_AppliedStaticForces;
	bool  syncO_m1m3_logevent_AppliedStaticForces;
	bool  flush_m1m3_logevent_AppliedStaticForces;
	bool  skipOld_m1m3_logevent_AppliedStaticForces;
	bool  hasIncoming_m1m3_logevent_AppliedStaticForces;
	bool  hasOutgoing_m1m3_logevent_AppliedStaticForces;
	bool  hasCallback_m1m3_logevent_AppliedStaticForces;
	int   callbackHdl_m1m3_logevent_AppliedStaticForces;
	bool  hasReader_m1m3_logevent_AppliedStaticForces;
	bool  hasWriter_m1m3_logevent_AppliedStaticForces;
	m1m3_logevent_AppliedStaticForcesC  shmemIncoming_m1m3_logevent_AppliedStaticForces;
	m1m3_logevent_AppliedStaticForcesC  shmemOutgoing_m1m3_logevent_AppliedStaticForces;
	bool  syncI_m1m3_logevent_AppliedThermalForces;
	bool  syncO_m1m3_logevent_AppliedThermalForces;
	bool  flush_m1m3_logevent_AppliedThermalForces;
	bool  skipOld_m1m3_logevent_AppliedThermalForces;
	bool  hasIncoming_m1m3_logevent_AppliedThermalForces;
	bool  hasOutgoing_m1m3_logevent_AppliedThermalForces;
	bool  hasCallback_m1m3_logevent_AppliedThermalForces;
	int   callbackHdl_m1m3_logevent_AppliedThermalForces;
	bool  hasReader_m1m3_logevent_AppliedThermalForces;
	bool  hasWriter_m1m3_logevent_AppliedThermalForces;
	m1m3_logevent_AppliedThermalForcesC  shmemIncoming_m1m3_logevent_AppliedThermalForces;
	m1m3_logevent_AppliedThermalForcesC  shmemOutgoing_m1m3_logevent_AppliedThermalForces;
	bool  syncI_m1m3_logevent_AppliedVelocityForces;
	bool  syncO_m1m3_logevent_AppliedVelocityForces;
	bool  flush_m1m3_logevent_AppliedVelocityForces;
	bool  skipOld_m1m3_logevent_AppliedVelocityForces;
	bool  hasIncoming_m1m3_logevent_AppliedVelocityForces;
	bool  hasOutgoing_m1m3_logevent_AppliedVelocityForces;
	bool  hasCallback_m1m3_logevent_AppliedVelocityForces;
	int   callbackHdl_m1m3_logevent_AppliedVelocityForces;
	bool  hasReader_m1m3_logevent_AppliedVelocityForces;
	bool  hasWriter_m1m3_logevent_AppliedVelocityForces;
	m1m3_logevent_AppliedVelocityForcesC  shmemIncoming_m1m3_logevent_AppliedVelocityForces;
	m1m3_logevent_AppliedVelocityForcesC  shmemOutgoing_m1m3_logevent_AppliedVelocityForces;
	bool  syncI_m1m3_logevent_CellLightStatus;
	bool  syncO_m1m3_logevent_CellLightStatus;
	bool  flush_m1m3_logevent_CellLightStatus;
	bool  skipOld_m1m3_logevent_CellLightStatus;
	bool  hasIncoming_m1m3_logevent_CellLightStatus;
	bool  hasOutgoing_m1m3_logevent_CellLightStatus;
	bool  hasCallback_m1m3_logevent_CellLightStatus;
	int   callbackHdl_m1m3_logevent_CellLightStatus;
	bool  hasReader_m1m3_logevent_CellLightStatus;
	bool  hasWriter_m1m3_logevent_CellLightStatus;
	m1m3_logevent_CellLightStatusC  shmemIncoming_m1m3_logevent_CellLightStatus;
	m1m3_logevent_CellLightStatusC  shmemOutgoing_m1m3_logevent_CellLightStatus;
	bool  syncI_m1m3_logevent_CellLightWarning;
	bool  syncO_m1m3_logevent_CellLightWarning;
	bool  flush_m1m3_logevent_CellLightWarning;
	bool  skipOld_m1m3_logevent_CellLightWarning;
	bool  hasIncoming_m1m3_logevent_CellLightWarning;
	bool  hasOutgoing_m1m3_logevent_CellLightWarning;
	bool  hasCallback_m1m3_logevent_CellLightWarning;
	int   callbackHdl_m1m3_logevent_CellLightWarning;
	bool  hasReader_m1m3_logevent_CellLightWarning;
	bool  hasWriter_m1m3_logevent_CellLightWarning;
	m1m3_logevent_CellLightWarningC  shmemIncoming_m1m3_logevent_CellLightWarning;
	m1m3_logevent_CellLightWarningC  shmemOutgoing_m1m3_logevent_CellLightWarning;
	bool  syncI_m1m3_logevent_CommandRejectionWarning;
	bool  syncO_m1m3_logevent_CommandRejectionWarning;
	bool  flush_m1m3_logevent_CommandRejectionWarning;
	bool  skipOld_m1m3_logevent_CommandRejectionWarning;
	bool  hasIncoming_m1m3_logevent_CommandRejectionWarning;
	bool  hasOutgoing_m1m3_logevent_CommandRejectionWarning;
	bool  hasCallback_m1m3_logevent_CommandRejectionWarning;
	int   callbackHdl_m1m3_logevent_CommandRejectionWarning;
	bool  hasReader_m1m3_logevent_CommandRejectionWarning;
	bool  hasWriter_m1m3_logevent_CommandRejectionWarning;
	m1m3_logevent_CommandRejectionWarningC  shmemIncoming_m1m3_logevent_CommandRejectionWarning;
	m1m3_logevent_CommandRejectionWarningC  shmemOutgoing_m1m3_logevent_CommandRejectionWarning;
	bool  syncI_m1m3_logevent_DetailedState;
	bool  syncO_m1m3_logevent_DetailedState;
	bool  flush_m1m3_logevent_DetailedState;
	bool  skipOld_m1m3_logevent_DetailedState;
	bool  hasIncoming_m1m3_logevent_DetailedState;
	bool  hasOutgoing_m1m3_logevent_DetailedState;
	bool  hasCallback_m1m3_logevent_DetailedState;
	int   callbackHdl_m1m3_logevent_DetailedState;
	bool  hasReader_m1m3_logevent_DetailedState;
	bool  hasWriter_m1m3_logevent_DetailedState;
	m1m3_logevent_DetailedStateC  shmemIncoming_m1m3_logevent_DetailedState;
	m1m3_logevent_DetailedStateC  shmemOutgoing_m1m3_logevent_DetailedState;
	bool  syncI_m1m3_logevent_DisplacementSensorWarning;
	bool  syncO_m1m3_logevent_DisplacementSensorWarning;
	bool  flush_m1m3_logevent_DisplacementSensorWarning;
	bool  skipOld_m1m3_logevent_DisplacementSensorWarning;
	bool  hasIncoming_m1m3_logevent_DisplacementSensorWarning;
	bool  hasOutgoing_m1m3_logevent_DisplacementSensorWarning;
	bool  hasCallback_m1m3_logevent_DisplacementSensorWarning;
	int   callbackHdl_m1m3_logevent_DisplacementSensorWarning;
	bool  hasReader_m1m3_logevent_DisplacementSensorWarning;
	bool  hasWriter_m1m3_logevent_DisplacementSensorWarning;
	m1m3_logevent_DisplacementSensorWarningC  shmemIncoming_m1m3_logevent_DisplacementSensorWarning;
	m1m3_logevent_DisplacementSensorWarningC  shmemOutgoing_m1m3_logevent_DisplacementSensorWarning;
	bool  syncI_m1m3_logevent_ErrorCode;
	bool  syncO_m1m3_logevent_ErrorCode;
	bool  flush_m1m3_logevent_ErrorCode;
	bool  skipOld_m1m3_logevent_ErrorCode;
	bool  hasIncoming_m1m3_logevent_ErrorCode;
	bool  hasOutgoing_m1m3_logevent_ErrorCode;
	bool  hasCallback_m1m3_logevent_ErrorCode;
	int   callbackHdl_m1m3_logevent_ErrorCode;
	bool  hasReader_m1m3_logevent_ErrorCode;
	bool  hasWriter_m1m3_logevent_ErrorCode;
	m1m3_logevent_ErrorCodeC  shmemIncoming_m1m3_logevent_ErrorCode;
	m1m3_logevent_ErrorCodeC  shmemOutgoing_m1m3_logevent_ErrorCode;
	bool  syncI_m1m3_logevent_ForceActuatorForceWarning;
	bool  syncO_m1m3_logevent_ForceActuatorForceWarning;
	bool  flush_m1m3_logevent_ForceActuatorForceWarning;
	bool  skipOld_m1m3_logevent_ForceActuatorForceWarning;
	bool  hasIncoming_m1m3_logevent_ForceActuatorForceWarning;
	bool  hasOutgoing_m1m3_logevent_ForceActuatorForceWarning;
	bool  hasCallback_m1m3_logevent_ForceActuatorForceWarning;
	int   callbackHdl_m1m3_logevent_ForceActuatorForceWarning;
	bool  hasReader_m1m3_logevent_ForceActuatorForceWarning;
	bool  hasWriter_m1m3_logevent_ForceActuatorForceWarning;
	m1m3_logevent_ForceActuatorForceWarningC  shmemIncoming_m1m3_logevent_ForceActuatorForceWarning;
	m1m3_logevent_ForceActuatorForceWarningC  shmemOutgoing_m1m3_logevent_ForceActuatorForceWarning;
	bool  syncI_m1m3_logevent_ForceActuatorInfo;
	bool  syncO_m1m3_logevent_ForceActuatorInfo;
	bool  flush_m1m3_logevent_ForceActuatorInfo;
	bool  skipOld_m1m3_logevent_ForceActuatorInfo;
	bool  hasIncoming_m1m3_logevent_ForceActuatorInfo;
	bool  hasOutgoing_m1m3_logevent_ForceActuatorInfo;
	bool  hasCallback_m1m3_logevent_ForceActuatorInfo;
	int   callbackHdl_m1m3_logevent_ForceActuatorInfo;
	bool  hasReader_m1m3_logevent_ForceActuatorInfo;
	bool  hasWriter_m1m3_logevent_ForceActuatorInfo;
	m1m3_logevent_ForceActuatorInfoC  shmemIncoming_m1m3_logevent_ForceActuatorInfo;
	m1m3_logevent_ForceActuatorInfoC  shmemOutgoing_m1m3_logevent_ForceActuatorInfo;
	bool  syncI_m1m3_logevent_ForceActuatorState;
	bool  syncO_m1m3_logevent_ForceActuatorState;
	bool  flush_m1m3_logevent_ForceActuatorState;
	bool  skipOld_m1m3_logevent_ForceActuatorState;
	bool  hasIncoming_m1m3_logevent_ForceActuatorState;
	bool  hasOutgoing_m1m3_logevent_ForceActuatorState;
	bool  hasCallback_m1m3_logevent_ForceActuatorState;
	int   callbackHdl_m1m3_logevent_ForceActuatorState;
	bool  hasReader_m1m3_logevent_ForceActuatorState;
	bool  hasWriter_m1m3_logevent_ForceActuatorState;
	m1m3_logevent_ForceActuatorStateC  shmemIncoming_m1m3_logevent_ForceActuatorState;
	m1m3_logevent_ForceActuatorStateC  shmemOutgoing_m1m3_logevent_ForceActuatorState;
	bool  syncI_m1m3_logevent_ForceActuatorWarning;
	bool  syncO_m1m3_logevent_ForceActuatorWarning;
	bool  flush_m1m3_logevent_ForceActuatorWarning;
	bool  skipOld_m1m3_logevent_ForceActuatorWarning;
	bool  hasIncoming_m1m3_logevent_ForceActuatorWarning;
	bool  hasOutgoing_m1m3_logevent_ForceActuatorWarning;
	bool  hasCallback_m1m3_logevent_ForceActuatorWarning;
	int   callbackHdl_m1m3_logevent_ForceActuatorWarning;
	bool  hasReader_m1m3_logevent_ForceActuatorWarning;
	bool  hasWriter_m1m3_logevent_ForceActuatorWarning;
	m1m3_logevent_ForceActuatorWarningC  shmemIncoming_m1m3_logevent_ForceActuatorWarning;
	m1m3_logevent_ForceActuatorWarningC  shmemOutgoing_m1m3_logevent_ForceActuatorWarning;
	bool  syncI_m1m3_logevent_ForceSetpointWarning;
	bool  syncO_m1m3_logevent_ForceSetpointWarning;
	bool  flush_m1m3_logevent_ForceSetpointWarning;
	bool  skipOld_m1m3_logevent_ForceSetpointWarning;
	bool  hasIncoming_m1m3_logevent_ForceSetpointWarning;
	bool  hasOutgoing_m1m3_logevent_ForceSetpointWarning;
	bool  hasCallback_m1m3_logevent_ForceSetpointWarning;
	int   callbackHdl_m1m3_logevent_ForceSetpointWarning;
	bool  hasReader_m1m3_logevent_ForceSetpointWarning;
	bool  hasWriter_m1m3_logevent_ForceSetpointWarning;
	m1m3_logevent_ForceSetpointWarningC  shmemIncoming_m1m3_logevent_ForceSetpointWarning;
	m1m3_logevent_ForceSetpointWarningC  shmemOutgoing_m1m3_logevent_ForceSetpointWarning;
	bool  syncI_m1m3_logevent_GyroWarning;
	bool  syncO_m1m3_logevent_GyroWarning;
	bool  flush_m1m3_logevent_GyroWarning;
	bool  skipOld_m1m3_logevent_GyroWarning;
	bool  hasIncoming_m1m3_logevent_GyroWarning;
	bool  hasOutgoing_m1m3_logevent_GyroWarning;
	bool  hasCallback_m1m3_logevent_GyroWarning;
	int   callbackHdl_m1m3_logevent_GyroWarning;
	bool  hasReader_m1m3_logevent_GyroWarning;
	bool  hasWriter_m1m3_logevent_GyroWarning;
	m1m3_logevent_GyroWarningC  shmemIncoming_m1m3_logevent_GyroWarning;
	m1m3_logevent_GyroWarningC  shmemOutgoing_m1m3_logevent_GyroWarning;
	bool  syncI_m1m3_logevent_HardpointActuatorInfo;
	bool  syncO_m1m3_logevent_HardpointActuatorInfo;
	bool  flush_m1m3_logevent_HardpointActuatorInfo;
	bool  skipOld_m1m3_logevent_HardpointActuatorInfo;
	bool  hasIncoming_m1m3_logevent_HardpointActuatorInfo;
	bool  hasOutgoing_m1m3_logevent_HardpointActuatorInfo;
	bool  hasCallback_m1m3_logevent_HardpointActuatorInfo;
	int   callbackHdl_m1m3_logevent_HardpointActuatorInfo;
	bool  hasReader_m1m3_logevent_HardpointActuatorInfo;
	bool  hasWriter_m1m3_logevent_HardpointActuatorInfo;
	m1m3_logevent_HardpointActuatorInfoC  shmemIncoming_m1m3_logevent_HardpointActuatorInfo;
	m1m3_logevent_HardpointActuatorInfoC  shmemOutgoing_m1m3_logevent_HardpointActuatorInfo;
	bool  syncI_m1m3_logevent_HardpointActuatorState;
	bool  syncO_m1m3_logevent_HardpointActuatorState;
	bool  flush_m1m3_logevent_HardpointActuatorState;
	bool  skipOld_m1m3_logevent_HardpointActuatorState;
	bool  hasIncoming_m1m3_logevent_HardpointActuatorState;
	bool  hasOutgoing_m1m3_logevent_HardpointActuatorState;
	bool  hasCallback_m1m3_logevent_HardpointActuatorState;
	int   callbackHdl_m1m3_logevent_HardpointActuatorState;
	bool  hasReader_m1m3_logevent_HardpointActuatorState;
	bool  hasWriter_m1m3_logevent_HardpointActuatorState;
	m1m3_logevent_HardpointActuatorStateC  shmemIncoming_m1m3_logevent_HardpointActuatorState;
	m1m3_logevent_HardpointActuatorStateC  shmemOutgoing_m1m3_logevent_HardpointActuatorState;
	bool  syncI_m1m3_logevent_HardpointActuatorWarning;
	bool  syncO_m1m3_logevent_HardpointActuatorWarning;
	bool  flush_m1m3_logevent_HardpointActuatorWarning;
	bool  skipOld_m1m3_logevent_HardpointActuatorWarning;
	bool  hasIncoming_m1m3_logevent_HardpointActuatorWarning;
	bool  hasOutgoing_m1m3_logevent_HardpointActuatorWarning;
	bool  hasCallback_m1m3_logevent_HardpointActuatorWarning;
	int   callbackHdl_m1m3_logevent_HardpointActuatorWarning;
	bool  hasReader_m1m3_logevent_HardpointActuatorWarning;
	bool  hasWriter_m1m3_logevent_HardpointActuatorWarning;
	m1m3_logevent_HardpointActuatorWarningC  shmemIncoming_m1m3_logevent_HardpointActuatorWarning;
	m1m3_logevent_HardpointActuatorWarningC  shmemOutgoing_m1m3_logevent_HardpointActuatorWarning;
	bool  syncI_m1m3_logevent_HardpointMonitorInfo;
	bool  syncO_m1m3_logevent_HardpointMonitorInfo;
	bool  flush_m1m3_logevent_HardpointMonitorInfo;
	bool  skipOld_m1m3_logevent_HardpointMonitorInfo;
	bool  hasIncoming_m1m3_logevent_HardpointMonitorInfo;
	bool  hasOutgoing_m1m3_logevent_HardpointMonitorInfo;
	bool  hasCallback_m1m3_logevent_HardpointMonitorInfo;
	int   callbackHdl_m1m3_logevent_HardpointMonitorInfo;
	bool  hasReader_m1m3_logevent_HardpointMonitorInfo;
	bool  hasWriter_m1m3_logevent_HardpointMonitorInfo;
	m1m3_logevent_HardpointMonitorInfoC  shmemIncoming_m1m3_logevent_HardpointMonitorInfo;
	m1m3_logevent_HardpointMonitorInfoC  shmemOutgoing_m1m3_logevent_HardpointMonitorInfo;
	bool  syncI_m1m3_logevent_HardpointMonitorState;
	bool  syncO_m1m3_logevent_HardpointMonitorState;
	bool  flush_m1m3_logevent_HardpointMonitorState;
	bool  skipOld_m1m3_logevent_HardpointMonitorState;
	bool  hasIncoming_m1m3_logevent_HardpointMonitorState;
	bool  hasOutgoing_m1m3_logevent_HardpointMonitorState;
	bool  hasCallback_m1m3_logevent_HardpointMonitorState;
	int   callbackHdl_m1m3_logevent_HardpointMonitorState;
	bool  hasReader_m1m3_logevent_HardpointMonitorState;
	bool  hasWriter_m1m3_logevent_HardpointMonitorState;
	m1m3_logevent_HardpointMonitorStateC  shmemIncoming_m1m3_logevent_HardpointMonitorState;
	m1m3_logevent_HardpointMonitorStateC  shmemOutgoing_m1m3_logevent_HardpointMonitorState;
	bool  syncI_m1m3_logevent_HardpointMonitorWarning;
	bool  syncO_m1m3_logevent_HardpointMonitorWarning;
	bool  flush_m1m3_logevent_HardpointMonitorWarning;
	bool  skipOld_m1m3_logevent_HardpointMonitorWarning;
	bool  hasIncoming_m1m3_logevent_HardpointMonitorWarning;
	bool  hasOutgoing_m1m3_logevent_HardpointMonitorWarning;
	bool  hasCallback_m1m3_logevent_HardpointMonitorWarning;
	int   callbackHdl_m1m3_logevent_HardpointMonitorWarning;
	bool  hasReader_m1m3_logevent_HardpointMonitorWarning;
	bool  hasWriter_m1m3_logevent_HardpointMonitorWarning;
	m1m3_logevent_HardpointMonitorWarningC  shmemIncoming_m1m3_logevent_HardpointMonitorWarning;
	m1m3_logevent_HardpointMonitorWarningC  shmemOutgoing_m1m3_logevent_HardpointMonitorWarning;
	bool  syncI_m1m3_logevent_ILCWarning;
	bool  syncO_m1m3_logevent_ILCWarning;
	bool  flush_m1m3_logevent_ILCWarning;
	bool  skipOld_m1m3_logevent_ILCWarning;
	bool  hasIncoming_m1m3_logevent_ILCWarning;
	bool  hasOutgoing_m1m3_logevent_ILCWarning;
	bool  hasCallback_m1m3_logevent_ILCWarning;
	int   callbackHdl_m1m3_logevent_ILCWarning;
	bool  hasReader_m1m3_logevent_ILCWarning;
	bool  hasWriter_m1m3_logevent_ILCWarning;
	m1m3_logevent_ILCWarningC  shmemIncoming_m1m3_logevent_ILCWarning;
	m1m3_logevent_ILCWarningC  shmemOutgoing_m1m3_logevent_ILCWarning;
	bool  syncI_m1m3_logevent_InclinometerSensorWarning;
	bool  syncO_m1m3_logevent_InclinometerSensorWarning;
	bool  flush_m1m3_logevent_InclinometerSensorWarning;
	bool  skipOld_m1m3_logevent_InclinometerSensorWarning;
	bool  hasIncoming_m1m3_logevent_InclinometerSensorWarning;
	bool  hasOutgoing_m1m3_logevent_InclinometerSensorWarning;
	bool  hasCallback_m1m3_logevent_InclinometerSensorWarning;
	int   callbackHdl_m1m3_logevent_InclinometerSensorWarning;
	bool  hasReader_m1m3_logevent_InclinometerSensorWarning;
	bool  hasWriter_m1m3_logevent_InclinometerSensorWarning;
	m1m3_logevent_InclinometerSensorWarningC  shmemIncoming_m1m3_logevent_InclinometerSensorWarning;
	m1m3_logevent_InclinometerSensorWarningC  shmemOutgoing_m1m3_logevent_InclinometerSensorWarning;
	bool  syncI_m1m3_logevent_InterlockStatus;
	bool  syncO_m1m3_logevent_InterlockStatus;
	bool  flush_m1m3_logevent_InterlockStatus;
	bool  skipOld_m1m3_logevent_InterlockStatus;
	bool  hasIncoming_m1m3_logevent_InterlockStatus;
	bool  hasOutgoing_m1m3_logevent_InterlockStatus;
	bool  hasCallback_m1m3_logevent_InterlockStatus;
	int   callbackHdl_m1m3_logevent_InterlockStatus;
	bool  hasReader_m1m3_logevent_InterlockStatus;
	bool  hasWriter_m1m3_logevent_InterlockStatus;
	m1m3_logevent_InterlockStatusC  shmemIncoming_m1m3_logevent_InterlockStatus;
	m1m3_logevent_InterlockStatusC  shmemOutgoing_m1m3_logevent_InterlockStatus;
	bool  syncI_m1m3_logevent_InterlockWarning;
	bool  syncO_m1m3_logevent_InterlockWarning;
	bool  flush_m1m3_logevent_InterlockWarning;
	bool  skipOld_m1m3_logevent_InterlockWarning;
	bool  hasIncoming_m1m3_logevent_InterlockWarning;
	bool  hasOutgoing_m1m3_logevent_InterlockWarning;
	bool  hasCallback_m1m3_logevent_InterlockWarning;
	int   callbackHdl_m1m3_logevent_InterlockWarning;
	bool  hasReader_m1m3_logevent_InterlockWarning;
	bool  hasWriter_m1m3_logevent_InterlockWarning;
	m1m3_logevent_InterlockWarningC  shmemIncoming_m1m3_logevent_InterlockWarning;
	m1m3_logevent_InterlockWarningC  shmemOutgoing_m1m3_logevent_InterlockWarning;
	bool  syncI_m1m3_logevent_PIDInfo;
	bool  syncO_m1m3_logevent_PIDInfo;
	bool  flush_m1m3_logevent_PIDInfo;
	bool  skipOld_m1m3_logevent_PIDInfo;
	bool  hasIncoming_m1m3_logevent_PIDInfo;
	bool  hasOutgoing_m1m3_logevent_PIDInfo;
	bool  hasCallback_m1m3_logevent_PIDInfo;
	int   callbackHdl_m1m3_logevent_PIDInfo;
	bool  hasReader_m1m3_logevent_PIDInfo;
	bool  hasWriter_m1m3_logevent_PIDInfo;
	m1m3_logevent_PIDInfoC  shmemIncoming_m1m3_logevent_PIDInfo;
	m1m3_logevent_PIDInfoC  shmemOutgoing_m1m3_logevent_PIDInfo;
	bool  syncI_m1m3_logevent_PowerStatus;
	bool  syncO_m1m3_logevent_PowerStatus;
	bool  flush_m1m3_logevent_PowerStatus;
	bool  skipOld_m1m3_logevent_PowerStatus;
	bool  hasIncoming_m1m3_logevent_PowerStatus;
	bool  hasOutgoing_m1m3_logevent_PowerStatus;
	bool  hasCallback_m1m3_logevent_PowerStatus;
	int   callbackHdl_m1m3_logevent_PowerStatus;
	bool  hasReader_m1m3_logevent_PowerStatus;
	bool  hasWriter_m1m3_logevent_PowerStatus;
	m1m3_logevent_PowerStatusC  shmemIncoming_m1m3_logevent_PowerStatus;
	m1m3_logevent_PowerStatusC  shmemOutgoing_m1m3_logevent_PowerStatus;
	bool  syncI_m1m3_logevent_PowerSupplyStatus;
	bool  syncO_m1m3_logevent_PowerSupplyStatus;
	bool  flush_m1m3_logevent_PowerSupplyStatus;
	bool  skipOld_m1m3_logevent_PowerSupplyStatus;
	bool  hasIncoming_m1m3_logevent_PowerSupplyStatus;
	bool  hasOutgoing_m1m3_logevent_PowerSupplyStatus;
	bool  hasCallback_m1m3_logevent_PowerSupplyStatus;
	int   callbackHdl_m1m3_logevent_PowerSupplyStatus;
	bool  hasReader_m1m3_logevent_PowerSupplyStatus;
	bool  hasWriter_m1m3_logevent_PowerSupplyStatus;
	m1m3_logevent_PowerSupplyStatusC  shmemIncoming_m1m3_logevent_PowerSupplyStatus;
	m1m3_logevent_PowerSupplyStatusC  shmemOutgoing_m1m3_logevent_PowerSupplyStatus;
	bool  syncI_m1m3_logevent_PowerWarning;
	bool  syncO_m1m3_logevent_PowerWarning;
	bool  flush_m1m3_logevent_PowerWarning;
	bool  skipOld_m1m3_logevent_PowerWarning;
	bool  hasIncoming_m1m3_logevent_PowerWarning;
	bool  hasOutgoing_m1m3_logevent_PowerWarning;
	bool  hasCallback_m1m3_logevent_PowerWarning;
	int   callbackHdl_m1m3_logevent_PowerWarning;
	bool  hasReader_m1m3_logevent_PowerWarning;
	bool  hasWriter_m1m3_logevent_PowerWarning;
	m1m3_logevent_PowerWarningC  shmemIncoming_m1m3_logevent_PowerWarning;
	m1m3_logevent_PowerWarningC  shmemOutgoing_m1m3_logevent_PowerWarning;
	bool  syncI_m1m3_logevent_RejectedAberrationForces;
	bool  syncO_m1m3_logevent_RejectedAberrationForces;
	bool  flush_m1m3_logevent_RejectedAberrationForces;
	bool  skipOld_m1m3_logevent_RejectedAberrationForces;
	bool  hasIncoming_m1m3_logevent_RejectedAberrationForces;
	bool  hasOutgoing_m1m3_logevent_RejectedAberrationForces;
	bool  hasCallback_m1m3_logevent_RejectedAberrationForces;
	int   callbackHdl_m1m3_logevent_RejectedAberrationForces;
	bool  hasReader_m1m3_logevent_RejectedAberrationForces;
	bool  hasWriter_m1m3_logevent_RejectedAberrationForces;
	m1m3_logevent_RejectedAberrationForcesC  shmemIncoming_m1m3_logevent_RejectedAberrationForces;
	m1m3_logevent_RejectedAberrationForcesC  shmemOutgoing_m1m3_logevent_RejectedAberrationForces;
	bool  syncI_m1m3_logevent_RejectedAccelerationForces;
	bool  syncO_m1m3_logevent_RejectedAccelerationForces;
	bool  flush_m1m3_logevent_RejectedAccelerationForces;
	bool  skipOld_m1m3_logevent_RejectedAccelerationForces;
	bool  hasIncoming_m1m3_logevent_RejectedAccelerationForces;
	bool  hasOutgoing_m1m3_logevent_RejectedAccelerationForces;
	bool  hasCallback_m1m3_logevent_RejectedAccelerationForces;
	int   callbackHdl_m1m3_logevent_RejectedAccelerationForces;
	bool  hasReader_m1m3_logevent_RejectedAccelerationForces;
	bool  hasWriter_m1m3_logevent_RejectedAccelerationForces;
	m1m3_logevent_RejectedAccelerationForcesC  shmemIncoming_m1m3_logevent_RejectedAccelerationForces;
	m1m3_logevent_RejectedAccelerationForcesC  shmemOutgoing_m1m3_logevent_RejectedAccelerationForces;
	bool  syncI_m1m3_logevent_RejectedActiveOpticForces;
	bool  syncO_m1m3_logevent_RejectedActiveOpticForces;
	bool  flush_m1m3_logevent_RejectedActiveOpticForces;
	bool  skipOld_m1m3_logevent_RejectedActiveOpticForces;
	bool  hasIncoming_m1m3_logevent_RejectedActiveOpticForces;
	bool  hasOutgoing_m1m3_logevent_RejectedActiveOpticForces;
	bool  hasCallback_m1m3_logevent_RejectedActiveOpticForces;
	int   callbackHdl_m1m3_logevent_RejectedActiveOpticForces;
	bool  hasReader_m1m3_logevent_RejectedActiveOpticForces;
	bool  hasWriter_m1m3_logevent_RejectedActiveOpticForces;
	m1m3_logevent_RejectedActiveOpticForcesC  shmemIncoming_m1m3_logevent_RejectedActiveOpticForces;
	m1m3_logevent_RejectedActiveOpticForcesC  shmemOutgoing_m1m3_logevent_RejectedActiveOpticForces;
	bool  syncI_m1m3_logevent_RejectedAzimuthForces;
	bool  syncO_m1m3_logevent_RejectedAzimuthForces;
	bool  flush_m1m3_logevent_RejectedAzimuthForces;
	bool  skipOld_m1m3_logevent_RejectedAzimuthForces;
	bool  hasIncoming_m1m3_logevent_RejectedAzimuthForces;
	bool  hasOutgoing_m1m3_logevent_RejectedAzimuthForces;
	bool  hasCallback_m1m3_logevent_RejectedAzimuthForces;
	int   callbackHdl_m1m3_logevent_RejectedAzimuthForces;
	bool  hasReader_m1m3_logevent_RejectedAzimuthForces;
	bool  hasWriter_m1m3_logevent_RejectedAzimuthForces;
	m1m3_logevent_RejectedAzimuthForcesC  shmemIncoming_m1m3_logevent_RejectedAzimuthForces;
	m1m3_logevent_RejectedAzimuthForcesC  shmemOutgoing_m1m3_logevent_RejectedAzimuthForces;
	bool  syncI_m1m3_logevent_RejectedBalanceForces;
	bool  syncO_m1m3_logevent_RejectedBalanceForces;
	bool  flush_m1m3_logevent_RejectedBalanceForces;
	bool  skipOld_m1m3_logevent_RejectedBalanceForces;
	bool  hasIncoming_m1m3_logevent_RejectedBalanceForces;
	bool  hasOutgoing_m1m3_logevent_RejectedBalanceForces;
	bool  hasCallback_m1m3_logevent_RejectedBalanceForces;
	int   callbackHdl_m1m3_logevent_RejectedBalanceForces;
	bool  hasReader_m1m3_logevent_RejectedBalanceForces;
	bool  hasWriter_m1m3_logevent_RejectedBalanceForces;
	m1m3_logevent_RejectedBalanceForcesC  shmemIncoming_m1m3_logevent_RejectedBalanceForces;
	m1m3_logevent_RejectedBalanceForcesC  shmemOutgoing_m1m3_logevent_RejectedBalanceForces;
	bool  syncI_m1m3_logevent_RejectedCylinderForces;
	bool  syncO_m1m3_logevent_RejectedCylinderForces;
	bool  flush_m1m3_logevent_RejectedCylinderForces;
	bool  skipOld_m1m3_logevent_RejectedCylinderForces;
	bool  hasIncoming_m1m3_logevent_RejectedCylinderForces;
	bool  hasOutgoing_m1m3_logevent_RejectedCylinderForces;
	bool  hasCallback_m1m3_logevent_RejectedCylinderForces;
	int   callbackHdl_m1m3_logevent_RejectedCylinderForces;
	bool  hasReader_m1m3_logevent_RejectedCylinderForces;
	bool  hasWriter_m1m3_logevent_RejectedCylinderForces;
	m1m3_logevent_RejectedCylinderForcesC  shmemIncoming_m1m3_logevent_RejectedCylinderForces;
	m1m3_logevent_RejectedCylinderForcesC  shmemOutgoing_m1m3_logevent_RejectedCylinderForces;
	bool  syncI_m1m3_logevent_RejectedElevationForces;
	bool  syncO_m1m3_logevent_RejectedElevationForces;
	bool  flush_m1m3_logevent_RejectedElevationForces;
	bool  skipOld_m1m3_logevent_RejectedElevationForces;
	bool  hasIncoming_m1m3_logevent_RejectedElevationForces;
	bool  hasOutgoing_m1m3_logevent_RejectedElevationForces;
	bool  hasCallback_m1m3_logevent_RejectedElevationForces;
	int   callbackHdl_m1m3_logevent_RejectedElevationForces;
	bool  hasReader_m1m3_logevent_RejectedElevationForces;
	bool  hasWriter_m1m3_logevent_RejectedElevationForces;
	m1m3_logevent_RejectedElevationForcesC  shmemIncoming_m1m3_logevent_RejectedElevationForces;
	m1m3_logevent_RejectedElevationForcesC  shmemOutgoing_m1m3_logevent_RejectedElevationForces;
	bool  syncI_m1m3_logevent_RejectedForces;
	bool  syncO_m1m3_logevent_RejectedForces;
	bool  flush_m1m3_logevent_RejectedForces;
	bool  skipOld_m1m3_logevent_RejectedForces;
	bool  hasIncoming_m1m3_logevent_RejectedForces;
	bool  hasOutgoing_m1m3_logevent_RejectedForces;
	bool  hasCallback_m1m3_logevent_RejectedForces;
	int   callbackHdl_m1m3_logevent_RejectedForces;
	bool  hasReader_m1m3_logevent_RejectedForces;
	bool  hasWriter_m1m3_logevent_RejectedForces;
	m1m3_logevent_RejectedForcesC  shmemIncoming_m1m3_logevent_RejectedForces;
	m1m3_logevent_RejectedForcesC  shmemOutgoing_m1m3_logevent_RejectedForces;
	bool  syncI_m1m3_logevent_RejectedOffsetForces;
	bool  syncO_m1m3_logevent_RejectedOffsetForces;
	bool  flush_m1m3_logevent_RejectedOffsetForces;
	bool  skipOld_m1m3_logevent_RejectedOffsetForces;
	bool  hasIncoming_m1m3_logevent_RejectedOffsetForces;
	bool  hasOutgoing_m1m3_logevent_RejectedOffsetForces;
	bool  hasCallback_m1m3_logevent_RejectedOffsetForces;
	int   callbackHdl_m1m3_logevent_RejectedOffsetForces;
	bool  hasReader_m1m3_logevent_RejectedOffsetForces;
	bool  hasWriter_m1m3_logevent_RejectedOffsetForces;
	m1m3_logevent_RejectedOffsetForcesC  shmemIncoming_m1m3_logevent_RejectedOffsetForces;
	m1m3_logevent_RejectedOffsetForcesC  shmemOutgoing_m1m3_logevent_RejectedOffsetForces;
	bool  syncI_m1m3_logevent_RejectedStaticForces;
	bool  syncO_m1m3_logevent_RejectedStaticForces;
	bool  flush_m1m3_logevent_RejectedStaticForces;
	bool  skipOld_m1m3_logevent_RejectedStaticForces;
	bool  hasIncoming_m1m3_logevent_RejectedStaticForces;
	bool  hasOutgoing_m1m3_logevent_RejectedStaticForces;
	bool  hasCallback_m1m3_logevent_RejectedStaticForces;
	int   callbackHdl_m1m3_logevent_RejectedStaticForces;
	bool  hasReader_m1m3_logevent_RejectedStaticForces;
	bool  hasWriter_m1m3_logevent_RejectedStaticForces;
	m1m3_logevent_RejectedStaticForcesC  shmemIncoming_m1m3_logevent_RejectedStaticForces;
	m1m3_logevent_RejectedStaticForcesC  shmemOutgoing_m1m3_logevent_RejectedStaticForces;
	bool  syncI_m1m3_logevent_RejectedThermalForces;
	bool  syncO_m1m3_logevent_RejectedThermalForces;
	bool  flush_m1m3_logevent_RejectedThermalForces;
	bool  skipOld_m1m3_logevent_RejectedThermalForces;
	bool  hasIncoming_m1m3_logevent_RejectedThermalForces;
	bool  hasOutgoing_m1m3_logevent_RejectedThermalForces;
	bool  hasCallback_m1m3_logevent_RejectedThermalForces;
	int   callbackHdl_m1m3_logevent_RejectedThermalForces;
	bool  hasReader_m1m3_logevent_RejectedThermalForces;
	bool  hasWriter_m1m3_logevent_RejectedThermalForces;
	m1m3_logevent_RejectedThermalForcesC  shmemIncoming_m1m3_logevent_RejectedThermalForces;
	m1m3_logevent_RejectedThermalForcesC  shmemOutgoing_m1m3_logevent_RejectedThermalForces;
	bool  syncI_m1m3_logevent_RejectedVelocityForces;
	bool  syncO_m1m3_logevent_RejectedVelocityForces;
	bool  flush_m1m3_logevent_RejectedVelocityForces;
	bool  skipOld_m1m3_logevent_RejectedVelocityForces;
	bool  hasIncoming_m1m3_logevent_RejectedVelocityForces;
	bool  hasOutgoing_m1m3_logevent_RejectedVelocityForces;
	bool  hasCallback_m1m3_logevent_RejectedVelocityForces;
	int   callbackHdl_m1m3_logevent_RejectedVelocityForces;
	bool  hasReader_m1m3_logevent_RejectedVelocityForces;
	bool  hasWriter_m1m3_logevent_RejectedVelocityForces;
	m1m3_logevent_RejectedVelocityForcesC  shmemIncoming_m1m3_logevent_RejectedVelocityForces;
	m1m3_logevent_RejectedVelocityForcesC  shmemOutgoing_m1m3_logevent_RejectedVelocityForces;
	bool  syncI_m1m3_logevent_SettingVersions;
	bool  syncO_m1m3_logevent_SettingVersions;
	bool  flush_m1m3_logevent_SettingVersions;
	bool  skipOld_m1m3_logevent_SettingVersions;
	bool  hasIncoming_m1m3_logevent_SettingVersions;
	bool  hasOutgoing_m1m3_logevent_SettingVersions;
	bool  hasCallback_m1m3_logevent_SettingVersions;
	int   callbackHdl_m1m3_logevent_SettingVersions;
	bool  hasReader_m1m3_logevent_SettingVersions;
	bool  hasWriter_m1m3_logevent_SettingVersions;
	m1m3_logevent_SettingVersionsC  shmemIncoming_m1m3_logevent_SettingVersions;
	m1m3_logevent_SettingVersionsC  shmemOutgoing_m1m3_logevent_SettingVersions;
	bool  syncI_m1m3_logevent_SettingsApplied;
	bool  syncO_m1m3_logevent_SettingsApplied;
	bool  flush_m1m3_logevent_SettingsApplied;
	bool  skipOld_m1m3_logevent_SettingsApplied;
	bool  hasIncoming_m1m3_logevent_SettingsApplied;
	bool  hasOutgoing_m1m3_logevent_SettingsApplied;
	bool  hasCallback_m1m3_logevent_SettingsApplied;
	int   callbackHdl_m1m3_logevent_SettingsApplied;
	bool  hasReader_m1m3_logevent_SettingsApplied;
	bool  hasWriter_m1m3_logevent_SettingsApplied;
	m1m3_logevent_SettingsAppliedC  shmemIncoming_m1m3_logevent_SettingsApplied;
	m1m3_logevent_SettingsAppliedC  shmemOutgoing_m1m3_logevent_SettingsApplied;
	bool  syncI_m1m3_logevent_SummaryState;
	bool  syncO_m1m3_logevent_SummaryState;
	bool  flush_m1m3_logevent_SummaryState;
	bool  skipOld_m1m3_logevent_SummaryState;
	bool  hasIncoming_m1m3_logevent_SummaryState;
	bool  hasOutgoing_m1m3_logevent_SummaryState;
	bool  hasCallback_m1m3_logevent_SummaryState;
	int   callbackHdl_m1m3_logevent_SummaryState;
	bool  hasReader_m1m3_logevent_SummaryState;
	bool  hasWriter_m1m3_logevent_SummaryState;
	m1m3_logevent_SummaryStateC  shmemIncoming_m1m3_logevent_SummaryState;
	m1m3_logevent_SummaryStateC  shmemOutgoing_m1m3_logevent_SummaryState;

      char m1m3_ackcmdLV_result_bufferOut[256];
      char m1m3_ackcmdLV_result_bufferIn[256];
    

      char m1m3_command_ProgramILCLV_FilePath_bufferOut[256];
      char m1m3_command_ProgramILCLV_FilePath_bufferIn[256];
    

      char m1m3_command_StartLV_SettingsToApply_bufferOut[256];
      char m1m3_command_StartLV_SettingsToApply_bufferIn[256];
    

      char m1m3_logevent_CommandRejectionWarningLV_Command_bufferOut[64];
      char m1m3_logevent_CommandRejectionWarningLV_Command_bufferIn[64];
    

      char m1m3_logevent_CommandRejectionWarningLV_Reason_bufferOut[128];
      char m1m3_logevent_CommandRejectionWarningLV_Reason_bufferIn[128];
    

      char m1m3_logevent_SettingVersionsLV_RecommendedSettingsVersion_bufferOut[256];
      char m1m3_logevent_SettingVersionsLV_RecommendedSettingsVersion_bufferIn[256];
    

      char m1m3_logevent_SettingsAppliedLV_Settings_bufferOut[256];
      char m1m3_logevent_SettingsAppliedLV_Settings_bufferIn[256];
    
	m1m3_ackcmdC shmemIncoming_ackcmd;
  m1m3_ackcmdC shmemOutgoing_ackcmd;
    };

     struct m1m3_shmem {
        shmemIO client[20];
     };

     int shmSize = sizeof(m1m3_shmem);
     int lShmId;
     bool shutdown_shmem;
     int m1m3_shmid = 0x93b7;
  
        int m1m3_salShmMonitor();
        int m1m3_salShmConnect();
        int m1m3_salShmRelease();
        void m1m3_shm_checkCallbacksLV();
        void m1m3_shm_initFlags();
        double m1m3_shm_getCurrentTimeLV();


        int m1m3_shm_salTelemetrySub_AccelerometerDataLV();
        int m1m3_shm_getSample_AccelerometerDataLV(m1m3_AccelerometerDataLV *AccelerometerData_Ctl );
        int m1m3_shm_getNextSample_AccelerometerDataLV(m1m3_AccelerometerDataLV *AccelerometerData_Ctl );
        int m1m3_shm_putSample_AccelerometerDataLV(m1m3_AccelerometerDataLV *AccelerometerData_Ctl );
        int m1m3_shm_registerCallback_AccelerometerDataLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_AccelerometerDataLV();
        int m1m3_shm_registerCallback_AccelerometerData_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_AccelerometerData_ackcmdLV();

        int m1m3_shm_salTelemetrySub_ForceActuatorDataLV();
        int m1m3_shm_getSample_ForceActuatorDataLV(m1m3_ForceActuatorDataLV *ForceActuatorData_Ctl );
        int m1m3_shm_getNextSample_ForceActuatorDataLV(m1m3_ForceActuatorDataLV *ForceActuatorData_Ctl );
        int m1m3_shm_putSample_ForceActuatorDataLV(m1m3_ForceActuatorDataLV *ForceActuatorData_Ctl );
        int m1m3_shm_registerCallback_ForceActuatorDataLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_ForceActuatorDataLV();
        int m1m3_shm_registerCallback_ForceActuatorData_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_ForceActuatorData_ackcmdLV();

        int m1m3_shm_salTelemetrySub_GyroDataLV();
        int m1m3_shm_getSample_GyroDataLV(m1m3_GyroDataLV *GyroData_Ctl );
        int m1m3_shm_getNextSample_GyroDataLV(m1m3_GyroDataLV *GyroData_Ctl );
        int m1m3_shm_putSample_GyroDataLV(m1m3_GyroDataLV *GyroData_Ctl );
        int m1m3_shm_registerCallback_GyroDataLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_GyroDataLV();
        int m1m3_shm_registerCallback_GyroData_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_GyroData_ackcmdLV();

        int m1m3_shm_salTelemetrySub_HardpointActuatorDataLV();
        int m1m3_shm_getSample_HardpointActuatorDataLV(m1m3_HardpointActuatorDataLV *HardpointActuatorData_Ctl );
        int m1m3_shm_getNextSample_HardpointActuatorDataLV(m1m3_HardpointActuatorDataLV *HardpointActuatorData_Ctl );
        int m1m3_shm_putSample_HardpointActuatorDataLV(m1m3_HardpointActuatorDataLV *HardpointActuatorData_Ctl );
        int m1m3_shm_registerCallback_HardpointActuatorDataLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_HardpointActuatorDataLV();
        int m1m3_shm_registerCallback_HardpointActuatorData_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_HardpointActuatorData_ackcmdLV();

        int m1m3_shm_salTelemetrySub_HardpointMonitorDataLV();
        int m1m3_shm_getSample_HardpointMonitorDataLV(m1m3_HardpointMonitorDataLV *HardpointMonitorData_Ctl );
        int m1m3_shm_getNextSample_HardpointMonitorDataLV(m1m3_HardpointMonitorDataLV *HardpointMonitorData_Ctl );
        int m1m3_shm_putSample_HardpointMonitorDataLV(m1m3_HardpointMonitorDataLV *HardpointMonitorData_Ctl );
        int m1m3_shm_registerCallback_HardpointMonitorDataLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_HardpointMonitorDataLV();
        int m1m3_shm_registerCallback_HardpointMonitorData_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_HardpointMonitorData_ackcmdLV();

        int m1m3_shm_salTelemetrySub_IMSDataLV();
        int m1m3_shm_getSample_IMSDataLV(m1m3_IMSDataLV *IMSData_Ctl );
        int m1m3_shm_getNextSample_IMSDataLV(m1m3_IMSDataLV *IMSData_Ctl );
        int m1m3_shm_putSample_IMSDataLV(m1m3_IMSDataLV *IMSData_Ctl );
        int m1m3_shm_registerCallback_IMSDataLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_IMSDataLV();
        int m1m3_shm_registerCallback_IMSData_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_IMSData_ackcmdLV();

        int m1m3_shm_salTelemetrySub_InclinometerDataLV();
        int m1m3_shm_getSample_InclinometerDataLV(m1m3_InclinometerDataLV *InclinometerData_Ctl );
        int m1m3_shm_getNextSample_InclinometerDataLV(m1m3_InclinometerDataLV *InclinometerData_Ctl );
        int m1m3_shm_putSample_InclinometerDataLV(m1m3_InclinometerDataLV *InclinometerData_Ctl );
        int m1m3_shm_registerCallback_InclinometerDataLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_InclinometerDataLV();
        int m1m3_shm_registerCallback_InclinometerData_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_InclinometerData_ackcmdLV();

        int m1m3_shm_salTelemetrySub_OuterLoopDataLV();
        int m1m3_shm_getSample_OuterLoopDataLV(m1m3_OuterLoopDataLV *OuterLoopData_Ctl );
        int m1m3_shm_getNextSample_OuterLoopDataLV(m1m3_OuterLoopDataLV *OuterLoopData_Ctl );
        int m1m3_shm_putSample_OuterLoopDataLV(m1m3_OuterLoopDataLV *OuterLoopData_Ctl );
        int m1m3_shm_registerCallback_OuterLoopDataLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_OuterLoopDataLV();
        int m1m3_shm_registerCallback_OuterLoopData_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_OuterLoopData_ackcmdLV();

        int m1m3_shm_salTelemetrySub_PIDDataLV();
        int m1m3_shm_getSample_PIDDataLV(m1m3_PIDDataLV *PIDData_Ctl );
        int m1m3_shm_getNextSample_PIDDataLV(m1m3_PIDDataLV *PIDData_Ctl );
        int m1m3_shm_putSample_PIDDataLV(m1m3_PIDDataLV *PIDData_Ctl );
        int m1m3_shm_registerCallback_PIDDataLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_PIDDataLV();
        int m1m3_shm_registerCallback_PIDData_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_PIDData_ackcmdLV();

        int m1m3_shm_salTelemetrySub_PowerSupplyDataLV();
        int m1m3_shm_getSample_PowerSupplyDataLV(m1m3_PowerSupplyDataLV *PowerSupplyData_Ctl );
        int m1m3_shm_getNextSample_PowerSupplyDataLV(m1m3_PowerSupplyDataLV *PowerSupplyData_Ctl );
        int m1m3_shm_putSample_PowerSupplyDataLV(m1m3_PowerSupplyDataLV *PowerSupplyData_Ctl );
        int m1m3_shm_registerCallback_PowerSupplyDataLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_PowerSupplyDataLV();
        int m1m3_shm_registerCallback_PowerSupplyData_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_PowerSupplyData_ackcmdLV();

        int m1m3_shm_salTelemetrySub_ackcmdLV();
        int m1m3_shm_getSample_ackcmdLV(m1m3_ackcmdLV *ackcmd_Ctl );
        int m1m3_shm_getNextSample_ackcmdLV(m1m3_ackcmdLV *ackcmd_Ctl );
        int m1m3_shm_putSample_ackcmdLV(m1m3_ackcmdLV *ackcmd_Ctl );
        int m1m3_shm_registerCallback_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_ackcmdLV();
        int m1m3_shm_registerCallback_ackcmd_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_ackcmd_ackcmdLV();
        int m1m3_shm_registerCallback_commandLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_commandLV();

        int m1m3_shm_salProcessor_AbortProfileLV();
        int m1m3_shm_salCommander_AbortProfileLV();
        int m1m3_shm_issueCommand_AbortProfileLV(m1m3_command_AbortProfileLV *command_AbortProfile_Ctl );
        int m1m3_shm_acceptCommand_AbortProfileLV(m1m3_command_AbortProfileLV *command_AbortProfile_Ctl );
        int m1m3_shm_ackCommand_AbortProfileLV(m1m3_ackcmdLV *ackcmd_Ctl);
        int m1m3_shm_monitorCommand_AbortProfileLV(m1m3_command_AbortProfileLV *command_AbortProfile_Ctl );
        int m1m3_shm_waitForCompletion_AbortProfileLV(m1m3_waitCompleteLV *waitComplete_Ctl);
        int m1m3_shm_getResponse_AbortProfileLV(m1m3_ackcmdLV *ackcmd_Ctl);
        int m1m3_shm_registerCallback_command_AbortProfileLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_command_AbortProfileLV();
        int m1m3_shm_registerCallback_command_AbortProfile_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_command_AbortProfile_ackcmdLV();

        int m1m3_shm_salProcessor_AbortRaiseM1M3LV();
        int m1m3_shm_salCommander_AbortRaiseM1M3LV();
        int m1m3_shm_issueCommand_AbortRaiseM1M3LV(m1m3_command_AbortRaiseM1M3LV *command_AbortRaiseM1M3_Ctl );
        int m1m3_shm_acceptCommand_AbortRaiseM1M3LV(m1m3_command_AbortRaiseM1M3LV *command_AbortRaiseM1M3_Ctl );
        int m1m3_shm_ackCommand_AbortRaiseM1M3LV(m1m3_ackcmdLV *ackcmd_Ctl);
        int m1m3_shm_monitorCommand_AbortRaiseM1M3LV(m1m3_command_AbortRaiseM1M3LV *command_AbortRaiseM1M3_Ctl );
        int m1m3_shm_waitForCompletion_AbortRaiseM1M3LV(m1m3_waitCompleteLV *waitComplete_Ctl);
        int m1m3_shm_getResponse_AbortRaiseM1M3LV(m1m3_ackcmdLV *ackcmd_Ctl);
        int m1m3_shm_registerCallback_command_AbortRaiseM1M3LV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_command_AbortRaiseM1M3LV();
        int m1m3_shm_registerCallback_command_AbortRaiseM1M3_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_command_AbortRaiseM1M3_ackcmdLV();

        int m1m3_shm_salProcessor_ApplyAberrationForcesLV();
        int m1m3_shm_salCommander_ApplyAberrationForcesLV();
        int m1m3_shm_issueCommand_ApplyAberrationForcesLV(m1m3_command_ApplyAberrationForcesLV *command_ApplyAberrationForces_Ctl );
        int m1m3_shm_acceptCommand_ApplyAberrationForcesLV(m1m3_command_ApplyAberrationForcesLV *command_ApplyAberrationForces_Ctl );
        int m1m3_shm_ackCommand_ApplyAberrationForcesLV(m1m3_ackcmdLV *ackcmd_Ctl);
        int m1m3_shm_monitorCommand_ApplyAberrationForcesLV(m1m3_command_ApplyAberrationForcesLV *command_ApplyAberrationForces_Ctl );
        int m1m3_shm_waitForCompletion_ApplyAberrationForcesLV(m1m3_waitCompleteLV *waitComplete_Ctl);
        int m1m3_shm_getResponse_ApplyAberrationForcesLV(m1m3_ackcmdLV *ackcmd_Ctl);
        int m1m3_shm_registerCallback_command_ApplyAberrationForcesLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_command_ApplyAberrationForcesLV();
        int m1m3_shm_registerCallback_command_ApplyAberrationForces_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_command_ApplyAberrationForces_ackcmdLV();

        int m1m3_shm_salProcessor_ApplyAberrationForcesByBendingModesLV();
        int m1m3_shm_salCommander_ApplyAberrationForcesByBendingModesLV();
        int m1m3_shm_issueCommand_ApplyAberrationForcesByBendingModesLV(m1m3_command_ApplyAberrationForcesByBendingModesLV *command_ApplyAberrationForcesByBendingModes_Ctl );
        int m1m3_shm_acceptCommand_ApplyAberrationForcesByBendingModesLV(m1m3_command_ApplyAberrationForcesByBendingModesLV *command_ApplyAberrationForcesByBendingModes_Ctl );
        int m1m3_shm_ackCommand_ApplyAberrationForcesByBendingModesLV(m1m3_ackcmdLV *ackcmd_Ctl);
        int m1m3_shm_monitorCommand_ApplyAberrationForcesByBendingModesLV(m1m3_command_ApplyAberrationForcesByBendingModesLV *command_ApplyAberrationForcesByBendingModes_Ctl );
        int m1m3_shm_waitForCompletion_ApplyAberrationForcesByBendingModesLV(m1m3_waitCompleteLV *waitComplete_Ctl);
        int m1m3_shm_getResponse_ApplyAberrationForcesByBendingModesLV(m1m3_ackcmdLV *ackcmd_Ctl);
        int m1m3_shm_registerCallback_command_ApplyAberrationForcesByBendingModesLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_command_ApplyAberrationForcesByBendingModesLV();
        int m1m3_shm_registerCallback_command_ApplyAberrationForcesByBendingModes_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_command_ApplyAberrationForcesByBendingModes_ackcmdLV();

        int m1m3_shm_salProcessor_ApplyActiveOpticForcesLV();
        int m1m3_shm_salCommander_ApplyActiveOpticForcesLV();
        int m1m3_shm_issueCommand_ApplyActiveOpticForcesLV(m1m3_command_ApplyActiveOpticForcesLV *command_ApplyActiveOpticForces_Ctl );
        int m1m3_shm_acceptCommand_ApplyActiveOpticForcesLV(m1m3_command_ApplyActiveOpticForcesLV *command_ApplyActiveOpticForces_Ctl );
        int m1m3_shm_ackCommand_ApplyActiveOpticForcesLV(m1m3_ackcmdLV *ackcmd_Ctl);
        int m1m3_shm_monitorCommand_ApplyActiveOpticForcesLV(m1m3_command_ApplyActiveOpticForcesLV *command_ApplyActiveOpticForces_Ctl );
        int m1m3_shm_waitForCompletion_ApplyActiveOpticForcesLV(m1m3_waitCompleteLV *waitComplete_Ctl);
        int m1m3_shm_getResponse_ApplyActiveOpticForcesLV(m1m3_ackcmdLV *ackcmd_Ctl);
        int m1m3_shm_registerCallback_command_ApplyActiveOpticForcesLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_command_ApplyActiveOpticForcesLV();
        int m1m3_shm_registerCallback_command_ApplyActiveOpticForces_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_command_ApplyActiveOpticForces_ackcmdLV();

        int m1m3_shm_salProcessor_ApplyActiveOpticForcesByBendingModesLV();
        int m1m3_shm_salCommander_ApplyActiveOpticForcesByBendingModesLV();
        int m1m3_shm_issueCommand_ApplyActiveOpticForcesByBendingModesLV(m1m3_command_ApplyActiveOpticForcesByBendingModesLV *command_ApplyActiveOpticForcesByBendingModes_Ctl );
        int m1m3_shm_acceptCommand_ApplyActiveOpticForcesByBendingModesLV(m1m3_command_ApplyActiveOpticForcesByBendingModesLV *command_ApplyActiveOpticForcesByBendingModes_Ctl );
        int m1m3_shm_ackCommand_ApplyActiveOpticForcesByBendingModesLV(m1m3_ackcmdLV *ackcmd_Ctl);
        int m1m3_shm_monitorCommand_ApplyActiveOpticForcesByBendingModesLV(m1m3_command_ApplyActiveOpticForcesByBendingModesLV *command_ApplyActiveOpticForcesByBendingModes_Ctl );
        int m1m3_shm_waitForCompletion_ApplyActiveOpticForcesByBendingModesLV(m1m3_waitCompleteLV *waitComplete_Ctl);
        int m1m3_shm_getResponse_ApplyActiveOpticForcesByBendingModesLV(m1m3_ackcmdLV *ackcmd_Ctl);
        int m1m3_shm_registerCallback_command_ApplyActiveOpticForcesByBendingModesLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_command_ApplyActiveOpticForcesByBendingModesLV();
        int m1m3_shm_registerCallback_command_ApplyActiveOpticForcesByBendingModes_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_command_ApplyActiveOpticForcesByBendingModes_ackcmdLV();

        int m1m3_shm_salProcessor_ApplyOffsetForcesLV();
        int m1m3_shm_salCommander_ApplyOffsetForcesLV();
        int m1m3_shm_issueCommand_ApplyOffsetForcesLV(m1m3_command_ApplyOffsetForcesLV *command_ApplyOffsetForces_Ctl );
        int m1m3_shm_acceptCommand_ApplyOffsetForcesLV(m1m3_command_ApplyOffsetForcesLV *command_ApplyOffsetForces_Ctl );
        int m1m3_shm_ackCommand_ApplyOffsetForcesLV(m1m3_ackcmdLV *ackcmd_Ctl);
        int m1m3_shm_monitorCommand_ApplyOffsetForcesLV(m1m3_command_ApplyOffsetForcesLV *command_ApplyOffsetForces_Ctl );
        int m1m3_shm_waitForCompletion_ApplyOffsetForcesLV(m1m3_waitCompleteLV *waitComplete_Ctl);
        int m1m3_shm_getResponse_ApplyOffsetForcesLV(m1m3_ackcmdLV *ackcmd_Ctl);
        int m1m3_shm_registerCallback_command_ApplyOffsetForcesLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_command_ApplyOffsetForcesLV();
        int m1m3_shm_registerCallback_command_ApplyOffsetForces_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_command_ApplyOffsetForces_ackcmdLV();

        int m1m3_shm_salProcessor_ApplyOffsetForcesByMirrorForceLV();
        int m1m3_shm_salCommander_ApplyOffsetForcesByMirrorForceLV();
        int m1m3_shm_issueCommand_ApplyOffsetForcesByMirrorForceLV(m1m3_command_ApplyOffsetForcesByMirrorForceLV *command_ApplyOffsetForcesByMirrorForce_Ctl );
        int m1m3_shm_acceptCommand_ApplyOffsetForcesByMirrorForceLV(m1m3_command_ApplyOffsetForcesByMirrorForceLV *command_ApplyOffsetForcesByMirrorForce_Ctl );
        int m1m3_shm_ackCommand_ApplyOffsetForcesByMirrorForceLV(m1m3_ackcmdLV *ackcmd_Ctl);
        int m1m3_shm_monitorCommand_ApplyOffsetForcesByMirrorForceLV(m1m3_command_ApplyOffsetForcesByMirrorForceLV *command_ApplyOffsetForcesByMirrorForce_Ctl );
        int m1m3_shm_waitForCompletion_ApplyOffsetForcesByMirrorForceLV(m1m3_waitCompleteLV *waitComplete_Ctl);
        int m1m3_shm_getResponse_ApplyOffsetForcesByMirrorForceLV(m1m3_ackcmdLV *ackcmd_Ctl);
        int m1m3_shm_registerCallback_command_ApplyOffsetForcesByMirrorForceLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_command_ApplyOffsetForcesByMirrorForceLV();
        int m1m3_shm_registerCallback_command_ApplyOffsetForcesByMirrorForce_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_command_ApplyOffsetForcesByMirrorForce_ackcmdLV();

        int m1m3_shm_salProcessor_ClearAberrationForcesLV();
        int m1m3_shm_salCommander_ClearAberrationForcesLV();
        int m1m3_shm_issueCommand_ClearAberrationForcesLV(m1m3_command_ClearAberrationForcesLV *command_ClearAberrationForces_Ctl );
        int m1m3_shm_acceptCommand_ClearAberrationForcesLV(m1m3_command_ClearAberrationForcesLV *command_ClearAberrationForces_Ctl );
        int m1m3_shm_ackCommand_ClearAberrationForcesLV(m1m3_ackcmdLV *ackcmd_Ctl);
        int m1m3_shm_monitorCommand_ClearAberrationForcesLV(m1m3_command_ClearAberrationForcesLV *command_ClearAberrationForces_Ctl );
        int m1m3_shm_waitForCompletion_ClearAberrationForcesLV(m1m3_waitCompleteLV *waitComplete_Ctl);
        int m1m3_shm_getResponse_ClearAberrationForcesLV(m1m3_ackcmdLV *ackcmd_Ctl);
        int m1m3_shm_registerCallback_command_ClearAberrationForcesLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_command_ClearAberrationForcesLV();
        int m1m3_shm_registerCallback_command_ClearAberrationForces_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_command_ClearAberrationForces_ackcmdLV();

        int m1m3_shm_salProcessor_ClearActiveOpticForcesLV();
        int m1m3_shm_salCommander_ClearActiveOpticForcesLV();
        int m1m3_shm_issueCommand_ClearActiveOpticForcesLV(m1m3_command_ClearActiveOpticForcesLV *command_ClearActiveOpticForces_Ctl );
        int m1m3_shm_acceptCommand_ClearActiveOpticForcesLV(m1m3_command_ClearActiveOpticForcesLV *command_ClearActiveOpticForces_Ctl );
        int m1m3_shm_ackCommand_ClearActiveOpticForcesLV(m1m3_ackcmdLV *ackcmd_Ctl);
        int m1m3_shm_monitorCommand_ClearActiveOpticForcesLV(m1m3_command_ClearActiveOpticForcesLV *command_ClearActiveOpticForces_Ctl );
        int m1m3_shm_waitForCompletion_ClearActiveOpticForcesLV(m1m3_waitCompleteLV *waitComplete_Ctl);
        int m1m3_shm_getResponse_ClearActiveOpticForcesLV(m1m3_ackcmdLV *ackcmd_Ctl);
        int m1m3_shm_registerCallback_command_ClearActiveOpticForcesLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_command_ClearActiveOpticForcesLV();
        int m1m3_shm_registerCallback_command_ClearActiveOpticForces_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_command_ClearActiveOpticForces_ackcmdLV();

        int m1m3_shm_salProcessor_ClearOffsetForcesLV();
        int m1m3_shm_salCommander_ClearOffsetForcesLV();
        int m1m3_shm_issueCommand_ClearOffsetForcesLV(m1m3_command_ClearOffsetForcesLV *command_ClearOffsetForces_Ctl );
        int m1m3_shm_acceptCommand_ClearOffsetForcesLV(m1m3_command_ClearOffsetForcesLV *command_ClearOffsetForces_Ctl );
        int m1m3_shm_ackCommand_ClearOffsetForcesLV(m1m3_ackcmdLV *ackcmd_Ctl);
        int m1m3_shm_monitorCommand_ClearOffsetForcesLV(m1m3_command_ClearOffsetForcesLV *command_ClearOffsetForces_Ctl );
        int m1m3_shm_waitForCompletion_ClearOffsetForcesLV(m1m3_waitCompleteLV *waitComplete_Ctl);
        int m1m3_shm_getResponse_ClearOffsetForcesLV(m1m3_ackcmdLV *ackcmd_Ctl);
        int m1m3_shm_registerCallback_command_ClearOffsetForcesLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_command_ClearOffsetForcesLV();
        int m1m3_shm_registerCallback_command_ClearOffsetForces_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_command_ClearOffsetForces_ackcmdLV();

        int m1m3_shm_salProcessor_DisableLV();
        int m1m3_shm_salCommander_DisableLV();
        int m1m3_shm_issueCommand_DisableLV(m1m3_command_DisableLV *command_Disable_Ctl );
        int m1m3_shm_acceptCommand_DisableLV(m1m3_command_DisableLV *command_Disable_Ctl );
        int m1m3_shm_ackCommand_DisableLV(m1m3_ackcmdLV *ackcmd_Ctl);
        int m1m3_shm_monitorCommand_DisableLV(m1m3_command_DisableLV *command_Disable_Ctl );
        int m1m3_shm_waitForCompletion_DisableLV(m1m3_waitCompleteLV *waitComplete_Ctl);
        int m1m3_shm_getResponse_DisableLV(m1m3_ackcmdLV *ackcmd_Ctl);
        int m1m3_shm_registerCallback_command_DisableLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_command_DisableLV();
        int m1m3_shm_registerCallback_command_Disable_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_command_Disable_ackcmdLV();

        int m1m3_shm_salProcessor_DisableHardpointChaseLV();
        int m1m3_shm_salCommander_DisableHardpointChaseLV();
        int m1m3_shm_issueCommand_DisableHardpointChaseLV(m1m3_command_DisableHardpointChaseLV *command_DisableHardpointChase_Ctl );
        int m1m3_shm_acceptCommand_DisableHardpointChaseLV(m1m3_command_DisableHardpointChaseLV *command_DisableHardpointChase_Ctl );
        int m1m3_shm_ackCommand_DisableHardpointChaseLV(m1m3_ackcmdLV *ackcmd_Ctl);
        int m1m3_shm_monitorCommand_DisableHardpointChaseLV(m1m3_command_DisableHardpointChaseLV *command_DisableHardpointChase_Ctl );
        int m1m3_shm_waitForCompletion_DisableHardpointChaseLV(m1m3_waitCompleteLV *waitComplete_Ctl);
        int m1m3_shm_getResponse_DisableHardpointChaseLV(m1m3_ackcmdLV *ackcmd_Ctl);
        int m1m3_shm_registerCallback_command_DisableHardpointChaseLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_command_DisableHardpointChaseLV();
        int m1m3_shm_registerCallback_command_DisableHardpointChase_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_command_DisableHardpointChase_ackcmdLV();

        int m1m3_shm_salProcessor_DisableHardpointCorrectionsLV();
        int m1m3_shm_salCommander_DisableHardpointCorrectionsLV();
        int m1m3_shm_issueCommand_DisableHardpointCorrectionsLV(m1m3_command_DisableHardpointCorrectionsLV *command_DisableHardpointCorrections_Ctl );
        int m1m3_shm_acceptCommand_DisableHardpointCorrectionsLV(m1m3_command_DisableHardpointCorrectionsLV *command_DisableHardpointCorrections_Ctl );
        int m1m3_shm_ackCommand_DisableHardpointCorrectionsLV(m1m3_ackcmdLV *ackcmd_Ctl);
        int m1m3_shm_monitorCommand_DisableHardpointCorrectionsLV(m1m3_command_DisableHardpointCorrectionsLV *command_DisableHardpointCorrections_Ctl );
        int m1m3_shm_waitForCompletion_DisableHardpointCorrectionsLV(m1m3_waitCompleteLV *waitComplete_Ctl);
        int m1m3_shm_getResponse_DisableHardpointCorrectionsLV(m1m3_ackcmdLV *ackcmd_Ctl);
        int m1m3_shm_registerCallback_command_DisableHardpointCorrectionsLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_command_DisableHardpointCorrectionsLV();
        int m1m3_shm_registerCallback_command_DisableHardpointCorrections_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_command_DisableHardpointCorrections_ackcmdLV();

        int m1m3_shm_salProcessor_EnableLV();
        int m1m3_shm_salCommander_EnableLV();
        int m1m3_shm_issueCommand_EnableLV(m1m3_command_EnableLV *command_Enable_Ctl );
        int m1m3_shm_acceptCommand_EnableLV(m1m3_command_EnableLV *command_Enable_Ctl );
        int m1m3_shm_ackCommand_EnableLV(m1m3_ackcmdLV *ackcmd_Ctl);
        int m1m3_shm_monitorCommand_EnableLV(m1m3_command_EnableLV *command_Enable_Ctl );
        int m1m3_shm_waitForCompletion_EnableLV(m1m3_waitCompleteLV *waitComplete_Ctl);
        int m1m3_shm_getResponse_EnableLV(m1m3_ackcmdLV *ackcmd_Ctl);
        int m1m3_shm_registerCallback_command_EnableLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_command_EnableLV();
        int m1m3_shm_registerCallback_command_Enable_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_command_Enable_ackcmdLV();

        int m1m3_shm_salProcessor_EnableHardpointChaseLV();
        int m1m3_shm_salCommander_EnableHardpointChaseLV();
        int m1m3_shm_issueCommand_EnableHardpointChaseLV(m1m3_command_EnableHardpointChaseLV *command_EnableHardpointChase_Ctl );
        int m1m3_shm_acceptCommand_EnableHardpointChaseLV(m1m3_command_EnableHardpointChaseLV *command_EnableHardpointChase_Ctl );
        int m1m3_shm_ackCommand_EnableHardpointChaseLV(m1m3_ackcmdLV *ackcmd_Ctl);
        int m1m3_shm_monitorCommand_EnableHardpointChaseLV(m1m3_command_EnableHardpointChaseLV *command_EnableHardpointChase_Ctl );
        int m1m3_shm_waitForCompletion_EnableHardpointChaseLV(m1m3_waitCompleteLV *waitComplete_Ctl);
        int m1m3_shm_getResponse_EnableHardpointChaseLV(m1m3_ackcmdLV *ackcmd_Ctl);
        int m1m3_shm_registerCallback_command_EnableHardpointChaseLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_command_EnableHardpointChaseLV();
        int m1m3_shm_registerCallback_command_EnableHardpointChase_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_command_EnableHardpointChase_ackcmdLV();

        int m1m3_shm_salProcessor_EnableHardpointCorrectionsLV();
        int m1m3_shm_salCommander_EnableHardpointCorrectionsLV();
        int m1m3_shm_issueCommand_EnableHardpointCorrectionsLV(m1m3_command_EnableHardpointCorrectionsLV *command_EnableHardpointCorrections_Ctl );
        int m1m3_shm_acceptCommand_EnableHardpointCorrectionsLV(m1m3_command_EnableHardpointCorrectionsLV *command_EnableHardpointCorrections_Ctl );
        int m1m3_shm_ackCommand_EnableHardpointCorrectionsLV(m1m3_ackcmdLV *ackcmd_Ctl);
        int m1m3_shm_monitorCommand_EnableHardpointCorrectionsLV(m1m3_command_EnableHardpointCorrectionsLV *command_EnableHardpointCorrections_Ctl );
        int m1m3_shm_waitForCompletion_EnableHardpointCorrectionsLV(m1m3_waitCompleteLV *waitComplete_Ctl);
        int m1m3_shm_getResponse_EnableHardpointCorrectionsLV(m1m3_ackcmdLV *ackcmd_Ctl);
        int m1m3_shm_registerCallback_command_EnableHardpointCorrectionsLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_command_EnableHardpointCorrectionsLV();
        int m1m3_shm_registerCallback_command_EnableHardpointCorrections_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_command_EnableHardpointCorrections_ackcmdLV();

        int m1m3_shm_salProcessor_EnterEngineeringLV();
        int m1m3_shm_salCommander_EnterEngineeringLV();
        int m1m3_shm_issueCommand_EnterEngineeringLV(m1m3_command_EnterEngineeringLV *command_EnterEngineering_Ctl );
        int m1m3_shm_acceptCommand_EnterEngineeringLV(m1m3_command_EnterEngineeringLV *command_EnterEngineering_Ctl );
        int m1m3_shm_ackCommand_EnterEngineeringLV(m1m3_ackcmdLV *ackcmd_Ctl);
        int m1m3_shm_monitorCommand_EnterEngineeringLV(m1m3_command_EnterEngineeringLV *command_EnterEngineering_Ctl );
        int m1m3_shm_waitForCompletion_EnterEngineeringLV(m1m3_waitCompleteLV *waitComplete_Ctl);
        int m1m3_shm_getResponse_EnterEngineeringLV(m1m3_ackcmdLV *ackcmd_Ctl);
        int m1m3_shm_registerCallback_command_EnterEngineeringLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_command_EnterEngineeringLV();
        int m1m3_shm_registerCallback_command_EnterEngineering_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_command_EnterEngineering_ackcmdLV();

        int m1m3_shm_salProcessor_ExitEngineeringLV();
        int m1m3_shm_salCommander_ExitEngineeringLV();
        int m1m3_shm_issueCommand_ExitEngineeringLV(m1m3_command_ExitEngineeringLV *command_ExitEngineering_Ctl );
        int m1m3_shm_acceptCommand_ExitEngineeringLV(m1m3_command_ExitEngineeringLV *command_ExitEngineering_Ctl );
        int m1m3_shm_ackCommand_ExitEngineeringLV(m1m3_ackcmdLV *ackcmd_Ctl);
        int m1m3_shm_monitorCommand_ExitEngineeringLV(m1m3_command_ExitEngineeringLV *command_ExitEngineering_Ctl );
        int m1m3_shm_waitForCompletion_ExitEngineeringLV(m1m3_waitCompleteLV *waitComplete_Ctl);
        int m1m3_shm_getResponse_ExitEngineeringLV(m1m3_ackcmdLV *ackcmd_Ctl);
        int m1m3_shm_registerCallback_command_ExitEngineeringLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_command_ExitEngineeringLV();
        int m1m3_shm_registerCallback_command_ExitEngineering_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_command_ExitEngineering_ackcmdLV();

        int m1m3_shm_salProcessor_LowerM1M3LV();
        int m1m3_shm_salCommander_LowerM1M3LV();
        int m1m3_shm_issueCommand_LowerM1M3LV(m1m3_command_LowerM1M3LV *command_LowerM1M3_Ctl );
        int m1m3_shm_acceptCommand_LowerM1M3LV(m1m3_command_LowerM1M3LV *command_LowerM1M3_Ctl );
        int m1m3_shm_ackCommand_LowerM1M3LV(m1m3_ackcmdLV *ackcmd_Ctl);
        int m1m3_shm_monitorCommand_LowerM1M3LV(m1m3_command_LowerM1M3LV *command_LowerM1M3_Ctl );
        int m1m3_shm_waitForCompletion_LowerM1M3LV(m1m3_waitCompleteLV *waitComplete_Ctl);
        int m1m3_shm_getResponse_LowerM1M3LV(m1m3_ackcmdLV *ackcmd_Ctl);
        int m1m3_shm_registerCallback_command_LowerM1M3LV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_command_LowerM1M3LV();
        int m1m3_shm_registerCallback_command_LowerM1M3_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_command_LowerM1M3_ackcmdLV();

        int m1m3_shm_salProcessor_MoveHardpointActuatorsLV();
        int m1m3_shm_salCommander_MoveHardpointActuatorsLV();
        int m1m3_shm_issueCommand_MoveHardpointActuatorsLV(m1m3_command_MoveHardpointActuatorsLV *command_MoveHardpointActuators_Ctl );
        int m1m3_shm_acceptCommand_MoveHardpointActuatorsLV(m1m3_command_MoveHardpointActuatorsLV *command_MoveHardpointActuators_Ctl );
        int m1m3_shm_ackCommand_MoveHardpointActuatorsLV(m1m3_ackcmdLV *ackcmd_Ctl);
        int m1m3_shm_monitorCommand_MoveHardpointActuatorsLV(m1m3_command_MoveHardpointActuatorsLV *command_MoveHardpointActuators_Ctl );
        int m1m3_shm_waitForCompletion_MoveHardpointActuatorsLV(m1m3_waitCompleteLV *waitComplete_Ctl);
        int m1m3_shm_getResponse_MoveHardpointActuatorsLV(m1m3_ackcmdLV *ackcmd_Ctl);
        int m1m3_shm_registerCallback_command_MoveHardpointActuatorsLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_command_MoveHardpointActuatorsLV();
        int m1m3_shm_registerCallback_command_MoveHardpointActuators_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_command_MoveHardpointActuators_ackcmdLV();

        int m1m3_shm_salProcessor_PositionM1M3LV();
        int m1m3_shm_salCommander_PositionM1M3LV();
        int m1m3_shm_issueCommand_PositionM1M3LV(m1m3_command_PositionM1M3LV *command_PositionM1M3_Ctl );
        int m1m3_shm_acceptCommand_PositionM1M3LV(m1m3_command_PositionM1M3LV *command_PositionM1M3_Ctl );
        int m1m3_shm_ackCommand_PositionM1M3LV(m1m3_ackcmdLV *ackcmd_Ctl);
        int m1m3_shm_monitorCommand_PositionM1M3LV(m1m3_command_PositionM1M3LV *command_PositionM1M3_Ctl );
        int m1m3_shm_waitForCompletion_PositionM1M3LV(m1m3_waitCompleteLV *waitComplete_Ctl);
        int m1m3_shm_getResponse_PositionM1M3LV(m1m3_ackcmdLV *ackcmd_Ctl);
        int m1m3_shm_registerCallback_command_PositionM1M3LV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_command_PositionM1M3LV();
        int m1m3_shm_registerCallback_command_PositionM1M3_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_command_PositionM1M3_ackcmdLV();

        int m1m3_shm_salProcessor_ProgramILCLV();
        int m1m3_shm_salCommander_ProgramILCLV();
        int m1m3_shm_issueCommand_ProgramILCLV(m1m3_command_ProgramILCLV *command_ProgramILC_Ctl );
        int m1m3_shm_acceptCommand_ProgramILCLV(m1m3_command_ProgramILCLV *command_ProgramILC_Ctl );
        int m1m3_shm_ackCommand_ProgramILCLV(m1m3_ackcmdLV *ackcmd_Ctl);
        int m1m3_shm_monitorCommand_ProgramILCLV(m1m3_command_ProgramILCLV *command_ProgramILC_Ctl );
        int m1m3_shm_waitForCompletion_ProgramILCLV(m1m3_waitCompleteLV *waitComplete_Ctl);
        int m1m3_shm_getResponse_ProgramILCLV(m1m3_ackcmdLV *ackcmd_Ctl);
        int m1m3_shm_registerCallback_command_ProgramILCLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_command_ProgramILCLV();
        int m1m3_shm_registerCallback_command_ProgramILC_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_command_ProgramILC_ackcmdLV();

        int m1m3_shm_salProcessor_RaiseM1M3LV();
        int m1m3_shm_salCommander_RaiseM1M3LV();
        int m1m3_shm_issueCommand_RaiseM1M3LV(m1m3_command_RaiseM1M3LV *command_RaiseM1M3_Ctl );
        int m1m3_shm_acceptCommand_RaiseM1M3LV(m1m3_command_RaiseM1M3LV *command_RaiseM1M3_Ctl );
        int m1m3_shm_ackCommand_RaiseM1M3LV(m1m3_ackcmdLV *ackcmd_Ctl);
        int m1m3_shm_monitorCommand_RaiseM1M3LV(m1m3_command_RaiseM1M3LV *command_RaiseM1M3_Ctl );
        int m1m3_shm_waitForCompletion_RaiseM1M3LV(m1m3_waitCompleteLV *waitComplete_Ctl);
        int m1m3_shm_getResponse_RaiseM1M3LV(m1m3_ackcmdLV *ackcmd_Ctl);
        int m1m3_shm_registerCallback_command_RaiseM1M3LV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_command_RaiseM1M3LV();
        int m1m3_shm_registerCallback_command_RaiseM1M3_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_command_RaiseM1M3_ackcmdLV();

        int m1m3_shm_salProcessor_ResetPIDLV();
        int m1m3_shm_salCommander_ResetPIDLV();
        int m1m3_shm_issueCommand_ResetPIDLV(m1m3_command_ResetPIDLV *command_ResetPID_Ctl );
        int m1m3_shm_acceptCommand_ResetPIDLV(m1m3_command_ResetPIDLV *command_ResetPID_Ctl );
        int m1m3_shm_ackCommand_ResetPIDLV(m1m3_ackcmdLV *ackcmd_Ctl);
        int m1m3_shm_monitorCommand_ResetPIDLV(m1m3_command_ResetPIDLV *command_ResetPID_Ctl );
        int m1m3_shm_waitForCompletion_ResetPIDLV(m1m3_waitCompleteLV *waitComplete_Ctl);
        int m1m3_shm_getResponse_ResetPIDLV(m1m3_ackcmdLV *ackcmd_Ctl);
        int m1m3_shm_registerCallback_command_ResetPIDLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_command_ResetPIDLV();
        int m1m3_shm_registerCallback_command_ResetPID_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_command_ResetPID_ackcmdLV();

        int m1m3_shm_salProcessor_RunMirrorForceProfileLV();
        int m1m3_shm_salCommander_RunMirrorForceProfileLV();
        int m1m3_shm_issueCommand_RunMirrorForceProfileLV(m1m3_command_RunMirrorForceProfileLV *command_RunMirrorForceProfile_Ctl );
        int m1m3_shm_acceptCommand_RunMirrorForceProfileLV(m1m3_command_RunMirrorForceProfileLV *command_RunMirrorForceProfile_Ctl );
        int m1m3_shm_ackCommand_RunMirrorForceProfileLV(m1m3_ackcmdLV *ackcmd_Ctl);
        int m1m3_shm_monitorCommand_RunMirrorForceProfileLV(m1m3_command_RunMirrorForceProfileLV *command_RunMirrorForceProfile_Ctl );
        int m1m3_shm_waitForCompletion_RunMirrorForceProfileLV(m1m3_waitCompleteLV *waitComplete_Ctl);
        int m1m3_shm_getResponse_RunMirrorForceProfileLV(m1m3_ackcmdLV *ackcmd_Ctl);
        int m1m3_shm_registerCallback_command_RunMirrorForceProfileLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_command_RunMirrorForceProfileLV();
        int m1m3_shm_registerCallback_command_RunMirrorForceProfile_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_command_RunMirrorForceProfile_ackcmdLV();

        int m1m3_shm_salProcessor_SetThermalSetpointLV();
        int m1m3_shm_salCommander_SetThermalSetpointLV();
        int m1m3_shm_issueCommand_SetThermalSetpointLV(m1m3_command_SetThermalSetpointLV *command_SetThermalSetpoint_Ctl );
        int m1m3_shm_acceptCommand_SetThermalSetpointLV(m1m3_command_SetThermalSetpointLV *command_SetThermalSetpoint_Ctl );
        int m1m3_shm_ackCommand_SetThermalSetpointLV(m1m3_ackcmdLV *ackcmd_Ctl);
        int m1m3_shm_monitorCommand_SetThermalSetpointLV(m1m3_command_SetThermalSetpointLV *command_SetThermalSetpoint_Ctl );
        int m1m3_shm_waitForCompletion_SetThermalSetpointLV(m1m3_waitCompleteLV *waitComplete_Ctl);
        int m1m3_shm_getResponse_SetThermalSetpointLV(m1m3_ackcmdLV *ackcmd_Ctl);
        int m1m3_shm_registerCallback_command_SetThermalSetpointLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_command_SetThermalSetpointLV();
        int m1m3_shm_registerCallback_command_SetThermalSetpoint_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_command_SetThermalSetpoint_ackcmdLV();

        int m1m3_shm_salProcessor_ShutdownLV();
        int m1m3_shm_salCommander_ShutdownLV();
        int m1m3_shm_issueCommand_ShutdownLV(m1m3_command_ShutdownLV *command_Shutdown_Ctl );
        int m1m3_shm_acceptCommand_ShutdownLV(m1m3_command_ShutdownLV *command_Shutdown_Ctl );
        int m1m3_shm_ackCommand_ShutdownLV(m1m3_ackcmdLV *ackcmd_Ctl);
        int m1m3_shm_monitorCommand_ShutdownLV(m1m3_command_ShutdownLV *command_Shutdown_Ctl );
        int m1m3_shm_waitForCompletion_ShutdownLV(m1m3_waitCompleteLV *waitComplete_Ctl);
        int m1m3_shm_getResponse_ShutdownLV(m1m3_ackcmdLV *ackcmd_Ctl);
        int m1m3_shm_registerCallback_command_ShutdownLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_command_ShutdownLV();
        int m1m3_shm_registerCallback_command_Shutdown_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_command_Shutdown_ackcmdLV();

        int m1m3_shm_salProcessor_StandbyLV();
        int m1m3_shm_salCommander_StandbyLV();
        int m1m3_shm_issueCommand_StandbyLV(m1m3_command_StandbyLV *command_Standby_Ctl );
        int m1m3_shm_acceptCommand_StandbyLV(m1m3_command_StandbyLV *command_Standby_Ctl );
        int m1m3_shm_ackCommand_StandbyLV(m1m3_ackcmdLV *ackcmd_Ctl);
        int m1m3_shm_monitorCommand_StandbyLV(m1m3_command_StandbyLV *command_Standby_Ctl );
        int m1m3_shm_waitForCompletion_StandbyLV(m1m3_waitCompleteLV *waitComplete_Ctl);
        int m1m3_shm_getResponse_StandbyLV(m1m3_ackcmdLV *ackcmd_Ctl);
        int m1m3_shm_registerCallback_command_StandbyLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_command_StandbyLV();
        int m1m3_shm_registerCallback_command_Standby_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_command_Standby_ackcmdLV();

        int m1m3_shm_salProcessor_StartLV();
        int m1m3_shm_salCommander_StartLV();
        int m1m3_shm_issueCommand_StartLV(m1m3_command_StartLV *command_Start_Ctl );
        int m1m3_shm_acceptCommand_StartLV(m1m3_command_StartLV *command_Start_Ctl );
        int m1m3_shm_ackCommand_StartLV(m1m3_ackcmdLV *ackcmd_Ctl);
        int m1m3_shm_monitorCommand_StartLV(m1m3_command_StartLV *command_Start_Ctl );
        int m1m3_shm_waitForCompletion_StartLV(m1m3_waitCompleteLV *waitComplete_Ctl);
        int m1m3_shm_getResponse_StartLV(m1m3_ackcmdLV *ackcmd_Ctl);
        int m1m3_shm_registerCallback_command_StartLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_command_StartLV();
        int m1m3_shm_registerCallback_command_Start_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_command_Start_ackcmdLV();

        int m1m3_shm_salProcessor_StopHardpointMotionLV();
        int m1m3_shm_salCommander_StopHardpointMotionLV();
        int m1m3_shm_issueCommand_StopHardpointMotionLV(m1m3_command_StopHardpointMotionLV *command_StopHardpointMotion_Ctl );
        int m1m3_shm_acceptCommand_StopHardpointMotionLV(m1m3_command_StopHardpointMotionLV *command_StopHardpointMotion_Ctl );
        int m1m3_shm_ackCommand_StopHardpointMotionLV(m1m3_ackcmdLV *ackcmd_Ctl);
        int m1m3_shm_monitorCommand_StopHardpointMotionLV(m1m3_command_StopHardpointMotionLV *command_StopHardpointMotion_Ctl );
        int m1m3_shm_waitForCompletion_StopHardpointMotionLV(m1m3_waitCompleteLV *waitComplete_Ctl);
        int m1m3_shm_getResponse_StopHardpointMotionLV(m1m3_ackcmdLV *ackcmd_Ctl);
        int m1m3_shm_registerCallback_command_StopHardpointMotionLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_command_StopHardpointMotionLV();
        int m1m3_shm_registerCallback_command_StopHardpointMotion_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_command_StopHardpointMotion_ackcmdLV();

        int m1m3_shm_salProcessor_TestAirLV();
        int m1m3_shm_salCommander_TestAirLV();
        int m1m3_shm_issueCommand_TestAirLV(m1m3_command_TestAirLV *command_TestAir_Ctl );
        int m1m3_shm_acceptCommand_TestAirLV(m1m3_command_TestAirLV *command_TestAir_Ctl );
        int m1m3_shm_ackCommand_TestAirLV(m1m3_ackcmdLV *ackcmd_Ctl);
        int m1m3_shm_monitorCommand_TestAirLV(m1m3_command_TestAirLV *command_TestAir_Ctl );
        int m1m3_shm_waitForCompletion_TestAirLV(m1m3_waitCompleteLV *waitComplete_Ctl);
        int m1m3_shm_getResponse_TestAirLV(m1m3_ackcmdLV *ackcmd_Ctl);
        int m1m3_shm_registerCallback_command_TestAirLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_command_TestAirLV();
        int m1m3_shm_registerCallback_command_TestAir_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_command_TestAir_ackcmdLV();

        int m1m3_shm_salProcessor_TestForceActuatorLV();
        int m1m3_shm_salCommander_TestForceActuatorLV();
        int m1m3_shm_issueCommand_TestForceActuatorLV(m1m3_command_TestForceActuatorLV *command_TestForceActuator_Ctl );
        int m1m3_shm_acceptCommand_TestForceActuatorLV(m1m3_command_TestForceActuatorLV *command_TestForceActuator_Ctl );
        int m1m3_shm_ackCommand_TestForceActuatorLV(m1m3_ackcmdLV *ackcmd_Ctl);
        int m1m3_shm_monitorCommand_TestForceActuatorLV(m1m3_command_TestForceActuatorLV *command_TestForceActuator_Ctl );
        int m1m3_shm_waitForCompletion_TestForceActuatorLV(m1m3_waitCompleteLV *waitComplete_Ctl);
        int m1m3_shm_getResponse_TestForceActuatorLV(m1m3_ackcmdLV *ackcmd_Ctl);
        int m1m3_shm_registerCallback_command_TestForceActuatorLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_command_TestForceActuatorLV();
        int m1m3_shm_registerCallback_command_TestForceActuator_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_command_TestForceActuator_ackcmdLV();

        int m1m3_shm_salProcessor_TestHardpointLV();
        int m1m3_shm_salCommander_TestHardpointLV();
        int m1m3_shm_issueCommand_TestHardpointLV(m1m3_command_TestHardpointLV *command_TestHardpoint_Ctl );
        int m1m3_shm_acceptCommand_TestHardpointLV(m1m3_command_TestHardpointLV *command_TestHardpoint_Ctl );
        int m1m3_shm_ackCommand_TestHardpointLV(m1m3_ackcmdLV *ackcmd_Ctl);
        int m1m3_shm_monitorCommand_TestHardpointLV(m1m3_command_TestHardpointLV *command_TestHardpoint_Ctl );
        int m1m3_shm_waitForCompletion_TestHardpointLV(m1m3_waitCompleteLV *waitComplete_Ctl);
        int m1m3_shm_getResponse_TestHardpointLV(m1m3_ackcmdLV *ackcmd_Ctl);
        int m1m3_shm_registerCallback_command_TestHardpointLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_command_TestHardpointLV();
        int m1m3_shm_registerCallback_command_TestHardpoint_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_command_TestHardpoint_ackcmdLV();

        int m1m3_shm_salProcessor_TranslateM1M3LV();
        int m1m3_shm_salCommander_TranslateM1M3LV();
        int m1m3_shm_issueCommand_TranslateM1M3LV(m1m3_command_TranslateM1M3LV *command_TranslateM1M3_Ctl );
        int m1m3_shm_acceptCommand_TranslateM1M3LV(m1m3_command_TranslateM1M3LV *command_TranslateM1M3_Ctl );
        int m1m3_shm_ackCommand_TranslateM1M3LV(m1m3_ackcmdLV *ackcmd_Ctl);
        int m1m3_shm_monitorCommand_TranslateM1M3LV(m1m3_command_TranslateM1M3LV *command_TranslateM1M3_Ctl );
        int m1m3_shm_waitForCompletion_TranslateM1M3LV(m1m3_waitCompleteLV *waitComplete_Ctl);
        int m1m3_shm_getResponse_TranslateM1M3LV(m1m3_ackcmdLV *ackcmd_Ctl);
        int m1m3_shm_registerCallback_command_TranslateM1M3LV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_command_TranslateM1M3LV();
        int m1m3_shm_registerCallback_command_TranslateM1M3_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_command_TranslateM1M3_ackcmdLV();

        int m1m3_shm_salProcessor_TurnAirOffLV();
        int m1m3_shm_salCommander_TurnAirOffLV();
        int m1m3_shm_issueCommand_TurnAirOffLV(m1m3_command_TurnAirOffLV *command_TurnAirOff_Ctl );
        int m1m3_shm_acceptCommand_TurnAirOffLV(m1m3_command_TurnAirOffLV *command_TurnAirOff_Ctl );
        int m1m3_shm_ackCommand_TurnAirOffLV(m1m3_ackcmdLV *ackcmd_Ctl);
        int m1m3_shm_monitorCommand_TurnAirOffLV(m1m3_command_TurnAirOffLV *command_TurnAirOff_Ctl );
        int m1m3_shm_waitForCompletion_TurnAirOffLV(m1m3_waitCompleteLV *waitComplete_Ctl);
        int m1m3_shm_getResponse_TurnAirOffLV(m1m3_ackcmdLV *ackcmd_Ctl);
        int m1m3_shm_registerCallback_command_TurnAirOffLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_command_TurnAirOffLV();
        int m1m3_shm_registerCallback_command_TurnAirOff_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_command_TurnAirOff_ackcmdLV();

        int m1m3_shm_salProcessor_TurnAirOnLV();
        int m1m3_shm_salCommander_TurnAirOnLV();
        int m1m3_shm_issueCommand_TurnAirOnLV(m1m3_command_TurnAirOnLV *command_TurnAirOn_Ctl );
        int m1m3_shm_acceptCommand_TurnAirOnLV(m1m3_command_TurnAirOnLV *command_TurnAirOn_Ctl );
        int m1m3_shm_ackCommand_TurnAirOnLV(m1m3_ackcmdLV *ackcmd_Ctl);
        int m1m3_shm_monitorCommand_TurnAirOnLV(m1m3_command_TurnAirOnLV *command_TurnAirOn_Ctl );
        int m1m3_shm_waitForCompletion_TurnAirOnLV(m1m3_waitCompleteLV *waitComplete_Ctl);
        int m1m3_shm_getResponse_TurnAirOnLV(m1m3_ackcmdLV *ackcmd_Ctl);
        int m1m3_shm_registerCallback_command_TurnAirOnLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_command_TurnAirOnLV();
        int m1m3_shm_registerCallback_command_TurnAirOn_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_command_TurnAirOn_ackcmdLV();

        int m1m3_shm_salProcessor_TurnLightsOffLV();
        int m1m3_shm_salCommander_TurnLightsOffLV();
        int m1m3_shm_issueCommand_TurnLightsOffLV(m1m3_command_TurnLightsOffLV *command_TurnLightsOff_Ctl );
        int m1m3_shm_acceptCommand_TurnLightsOffLV(m1m3_command_TurnLightsOffLV *command_TurnLightsOff_Ctl );
        int m1m3_shm_ackCommand_TurnLightsOffLV(m1m3_ackcmdLV *ackcmd_Ctl);
        int m1m3_shm_monitorCommand_TurnLightsOffLV(m1m3_command_TurnLightsOffLV *command_TurnLightsOff_Ctl );
        int m1m3_shm_waitForCompletion_TurnLightsOffLV(m1m3_waitCompleteLV *waitComplete_Ctl);
        int m1m3_shm_getResponse_TurnLightsOffLV(m1m3_ackcmdLV *ackcmd_Ctl);
        int m1m3_shm_registerCallback_command_TurnLightsOffLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_command_TurnLightsOffLV();
        int m1m3_shm_registerCallback_command_TurnLightsOff_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_command_TurnLightsOff_ackcmdLV();

        int m1m3_shm_salProcessor_TurnLightsOnLV();
        int m1m3_shm_salCommander_TurnLightsOnLV();
        int m1m3_shm_issueCommand_TurnLightsOnLV(m1m3_command_TurnLightsOnLV *command_TurnLightsOn_Ctl );
        int m1m3_shm_acceptCommand_TurnLightsOnLV(m1m3_command_TurnLightsOnLV *command_TurnLightsOn_Ctl );
        int m1m3_shm_ackCommand_TurnLightsOnLV(m1m3_ackcmdLV *ackcmd_Ctl);
        int m1m3_shm_monitorCommand_TurnLightsOnLV(m1m3_command_TurnLightsOnLV *command_TurnLightsOn_Ctl );
        int m1m3_shm_waitForCompletion_TurnLightsOnLV(m1m3_waitCompleteLV *waitComplete_Ctl);
        int m1m3_shm_getResponse_TurnLightsOnLV(m1m3_ackcmdLV *ackcmd_Ctl);
        int m1m3_shm_registerCallback_command_TurnLightsOnLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_command_TurnLightsOnLV();
        int m1m3_shm_registerCallback_command_TurnLightsOn_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_command_TurnLightsOn_ackcmdLV();

        int m1m3_shm_salProcessor_TurnPowerOffLV();
        int m1m3_shm_salCommander_TurnPowerOffLV();
        int m1m3_shm_issueCommand_TurnPowerOffLV(m1m3_command_TurnPowerOffLV *command_TurnPowerOff_Ctl );
        int m1m3_shm_acceptCommand_TurnPowerOffLV(m1m3_command_TurnPowerOffLV *command_TurnPowerOff_Ctl );
        int m1m3_shm_ackCommand_TurnPowerOffLV(m1m3_ackcmdLV *ackcmd_Ctl);
        int m1m3_shm_monitorCommand_TurnPowerOffLV(m1m3_command_TurnPowerOffLV *command_TurnPowerOff_Ctl );
        int m1m3_shm_waitForCompletion_TurnPowerOffLV(m1m3_waitCompleteLV *waitComplete_Ctl);
        int m1m3_shm_getResponse_TurnPowerOffLV(m1m3_ackcmdLV *ackcmd_Ctl);
        int m1m3_shm_registerCallback_command_TurnPowerOffLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_command_TurnPowerOffLV();
        int m1m3_shm_registerCallback_command_TurnPowerOff_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_command_TurnPowerOff_ackcmdLV();

        int m1m3_shm_salProcessor_TurnPowerOnLV();
        int m1m3_shm_salCommander_TurnPowerOnLV();
        int m1m3_shm_issueCommand_TurnPowerOnLV(m1m3_command_TurnPowerOnLV *command_TurnPowerOn_Ctl );
        int m1m3_shm_acceptCommand_TurnPowerOnLV(m1m3_command_TurnPowerOnLV *command_TurnPowerOn_Ctl );
        int m1m3_shm_ackCommand_TurnPowerOnLV(m1m3_ackcmdLV *ackcmd_Ctl);
        int m1m3_shm_monitorCommand_TurnPowerOnLV(m1m3_command_TurnPowerOnLV *command_TurnPowerOn_Ctl );
        int m1m3_shm_waitForCompletion_TurnPowerOnLV(m1m3_waitCompleteLV *waitComplete_Ctl);
        int m1m3_shm_getResponse_TurnPowerOnLV(m1m3_ackcmdLV *ackcmd_Ctl);
        int m1m3_shm_registerCallback_command_TurnPowerOnLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_command_TurnPowerOnLV();
        int m1m3_shm_registerCallback_command_TurnPowerOn_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_command_TurnPowerOn_ackcmdLV();

        int m1m3_shm_salProcessor_UpdatePIDLV();
        int m1m3_shm_salCommander_UpdatePIDLV();
        int m1m3_shm_issueCommand_UpdatePIDLV(m1m3_command_UpdatePIDLV *command_UpdatePID_Ctl );
        int m1m3_shm_acceptCommand_UpdatePIDLV(m1m3_command_UpdatePIDLV *command_UpdatePID_Ctl );
        int m1m3_shm_ackCommand_UpdatePIDLV(m1m3_ackcmdLV *ackcmd_Ctl);
        int m1m3_shm_monitorCommand_UpdatePIDLV(m1m3_command_UpdatePIDLV *command_UpdatePID_Ctl );
        int m1m3_shm_waitForCompletion_UpdatePIDLV(m1m3_waitCompleteLV *waitComplete_Ctl);
        int m1m3_shm_getResponse_UpdatePIDLV(m1m3_ackcmdLV *ackcmd_Ctl);
        int m1m3_shm_registerCallback_command_UpdatePIDLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_command_UpdatePIDLV();
        int m1m3_shm_registerCallback_command_UpdatePID_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_command_UpdatePID_ackcmdLV();
        int m1m3_shm_registerCallback_logeventLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logeventLV();

        int m1m3_shm_salEvent_AccelerometerWarningLV();
	int m1m3_shm_flushSamplesEvent_AccelerometerWarningLV();
	int m1m3_shm_getEvent_AccelerometerWarningLV(m1m3_logevent_AccelerometerWarningLV *logevent_AccelerometerWarning_Ctl );
	int m1m3_shm_logEvent_AccelerometerWarningLV(m1m3_logevent_AccelerometerWarningLV *logevent_AccelerometerWarning_Ctl );
        int m1m3_shm_registerCallback_logevent_AccelerometerWarningLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_AccelerometerWarningLV();
        int m1m3_shm_registerCallback_logevent_AccelerometerWarning_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_AccelerometerWarning_ackcmdLV();

        int m1m3_shm_salEvent_AirSupplyStatusLV();
	int m1m3_shm_flushSamplesEvent_AirSupplyStatusLV();
	int m1m3_shm_getEvent_AirSupplyStatusLV(m1m3_logevent_AirSupplyStatusLV *logevent_AirSupplyStatus_Ctl );
	int m1m3_shm_logEvent_AirSupplyStatusLV(m1m3_logevent_AirSupplyStatusLV *logevent_AirSupplyStatus_Ctl );
        int m1m3_shm_registerCallback_logevent_AirSupplyStatusLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_AirSupplyStatusLV();
        int m1m3_shm_registerCallback_logevent_AirSupplyStatus_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_AirSupplyStatus_ackcmdLV();

        int m1m3_shm_salEvent_AirSupplyWarningLV();
	int m1m3_shm_flushSamplesEvent_AirSupplyWarningLV();
	int m1m3_shm_getEvent_AirSupplyWarningLV(m1m3_logevent_AirSupplyWarningLV *logevent_AirSupplyWarning_Ctl );
	int m1m3_shm_logEvent_AirSupplyWarningLV(m1m3_logevent_AirSupplyWarningLV *logevent_AirSupplyWarning_Ctl );
        int m1m3_shm_registerCallback_logevent_AirSupplyWarningLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_AirSupplyWarningLV();
        int m1m3_shm_registerCallback_logevent_AirSupplyWarning_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_AirSupplyWarning_ackcmdLV();

        int m1m3_shm_salEvent_AppliedAberrationForcesLV();
	int m1m3_shm_flushSamplesEvent_AppliedAberrationForcesLV();
	int m1m3_shm_getEvent_AppliedAberrationForcesLV(m1m3_logevent_AppliedAberrationForcesLV *logevent_AppliedAberrationForces_Ctl );
	int m1m3_shm_logEvent_AppliedAberrationForcesLV(m1m3_logevent_AppliedAberrationForcesLV *logevent_AppliedAberrationForces_Ctl );
        int m1m3_shm_registerCallback_logevent_AppliedAberrationForcesLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_AppliedAberrationForcesLV();
        int m1m3_shm_registerCallback_logevent_AppliedAberrationForces_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_AppliedAberrationForces_ackcmdLV();

        int m1m3_shm_salEvent_AppliedAccelerationForcesLV();
	int m1m3_shm_flushSamplesEvent_AppliedAccelerationForcesLV();
	int m1m3_shm_getEvent_AppliedAccelerationForcesLV(m1m3_logevent_AppliedAccelerationForcesLV *logevent_AppliedAccelerationForces_Ctl );
	int m1m3_shm_logEvent_AppliedAccelerationForcesLV(m1m3_logevent_AppliedAccelerationForcesLV *logevent_AppliedAccelerationForces_Ctl );
        int m1m3_shm_registerCallback_logevent_AppliedAccelerationForcesLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_AppliedAccelerationForcesLV();
        int m1m3_shm_registerCallback_logevent_AppliedAccelerationForces_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_AppliedAccelerationForces_ackcmdLV();

        int m1m3_shm_salEvent_AppliedActiveOpticForcesLV();
	int m1m3_shm_flushSamplesEvent_AppliedActiveOpticForcesLV();
	int m1m3_shm_getEvent_AppliedActiveOpticForcesLV(m1m3_logevent_AppliedActiveOpticForcesLV *logevent_AppliedActiveOpticForces_Ctl );
	int m1m3_shm_logEvent_AppliedActiveOpticForcesLV(m1m3_logevent_AppliedActiveOpticForcesLV *logevent_AppliedActiveOpticForces_Ctl );
        int m1m3_shm_registerCallback_logevent_AppliedActiveOpticForcesLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_AppliedActiveOpticForcesLV();
        int m1m3_shm_registerCallback_logevent_AppliedActiveOpticForces_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_AppliedActiveOpticForces_ackcmdLV();

        int m1m3_shm_salEvent_AppliedAzimuthForcesLV();
	int m1m3_shm_flushSamplesEvent_AppliedAzimuthForcesLV();
	int m1m3_shm_getEvent_AppliedAzimuthForcesLV(m1m3_logevent_AppliedAzimuthForcesLV *logevent_AppliedAzimuthForces_Ctl );
	int m1m3_shm_logEvent_AppliedAzimuthForcesLV(m1m3_logevent_AppliedAzimuthForcesLV *logevent_AppliedAzimuthForces_Ctl );
        int m1m3_shm_registerCallback_logevent_AppliedAzimuthForcesLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_AppliedAzimuthForcesLV();
        int m1m3_shm_registerCallback_logevent_AppliedAzimuthForces_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_AppliedAzimuthForces_ackcmdLV();

        int m1m3_shm_salEvent_AppliedBalanceForcesLV();
	int m1m3_shm_flushSamplesEvent_AppliedBalanceForcesLV();
	int m1m3_shm_getEvent_AppliedBalanceForcesLV(m1m3_logevent_AppliedBalanceForcesLV *logevent_AppliedBalanceForces_Ctl );
	int m1m3_shm_logEvent_AppliedBalanceForcesLV(m1m3_logevent_AppliedBalanceForcesLV *logevent_AppliedBalanceForces_Ctl );
        int m1m3_shm_registerCallback_logevent_AppliedBalanceForcesLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_AppliedBalanceForcesLV();
        int m1m3_shm_registerCallback_logevent_AppliedBalanceForces_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_AppliedBalanceForces_ackcmdLV();

        int m1m3_shm_salEvent_AppliedCylinderForcesLV();
	int m1m3_shm_flushSamplesEvent_AppliedCylinderForcesLV();
	int m1m3_shm_getEvent_AppliedCylinderForcesLV(m1m3_logevent_AppliedCylinderForcesLV *logevent_AppliedCylinderForces_Ctl );
	int m1m3_shm_logEvent_AppliedCylinderForcesLV(m1m3_logevent_AppliedCylinderForcesLV *logevent_AppliedCylinderForces_Ctl );
        int m1m3_shm_registerCallback_logevent_AppliedCylinderForcesLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_AppliedCylinderForcesLV();
        int m1m3_shm_registerCallback_logevent_AppliedCylinderForces_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_AppliedCylinderForces_ackcmdLV();

        int m1m3_shm_salEvent_AppliedElevationForcesLV();
	int m1m3_shm_flushSamplesEvent_AppliedElevationForcesLV();
	int m1m3_shm_getEvent_AppliedElevationForcesLV(m1m3_logevent_AppliedElevationForcesLV *logevent_AppliedElevationForces_Ctl );
	int m1m3_shm_logEvent_AppliedElevationForcesLV(m1m3_logevent_AppliedElevationForcesLV *logevent_AppliedElevationForces_Ctl );
        int m1m3_shm_registerCallback_logevent_AppliedElevationForcesLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_AppliedElevationForcesLV();
        int m1m3_shm_registerCallback_logevent_AppliedElevationForces_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_AppliedElevationForces_ackcmdLV();

        int m1m3_shm_salEvent_AppliedForcesLV();
	int m1m3_shm_flushSamplesEvent_AppliedForcesLV();
	int m1m3_shm_getEvent_AppliedForcesLV(m1m3_logevent_AppliedForcesLV *logevent_AppliedForces_Ctl );
	int m1m3_shm_logEvent_AppliedForcesLV(m1m3_logevent_AppliedForcesLV *logevent_AppliedForces_Ctl );
        int m1m3_shm_registerCallback_logevent_AppliedForcesLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_AppliedForcesLV();
        int m1m3_shm_registerCallback_logevent_AppliedForces_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_AppliedForces_ackcmdLV();

        int m1m3_shm_salEvent_AppliedOffsetForcesLV();
	int m1m3_shm_flushSamplesEvent_AppliedOffsetForcesLV();
	int m1m3_shm_getEvent_AppliedOffsetForcesLV(m1m3_logevent_AppliedOffsetForcesLV *logevent_AppliedOffsetForces_Ctl );
	int m1m3_shm_logEvent_AppliedOffsetForcesLV(m1m3_logevent_AppliedOffsetForcesLV *logevent_AppliedOffsetForces_Ctl );
        int m1m3_shm_registerCallback_logevent_AppliedOffsetForcesLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_AppliedOffsetForcesLV();
        int m1m3_shm_registerCallback_logevent_AppliedOffsetForces_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_AppliedOffsetForces_ackcmdLV();

        int m1m3_shm_salEvent_AppliedSettingsMatchStartLV();
	int m1m3_shm_flushSamplesEvent_AppliedSettingsMatchStartLV();
	int m1m3_shm_getEvent_AppliedSettingsMatchStartLV(m1m3_logevent_AppliedSettingsMatchStartLV *logevent_AppliedSettingsMatchStart_Ctl );
	int m1m3_shm_logEvent_AppliedSettingsMatchStartLV(m1m3_logevent_AppliedSettingsMatchStartLV *logevent_AppliedSettingsMatchStart_Ctl );
        int m1m3_shm_registerCallback_logevent_AppliedSettingsMatchStartLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_AppliedSettingsMatchStartLV();
        int m1m3_shm_registerCallback_logevent_AppliedSettingsMatchStart_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_AppliedSettingsMatchStart_ackcmdLV();

        int m1m3_shm_salEvent_AppliedStaticForcesLV();
	int m1m3_shm_flushSamplesEvent_AppliedStaticForcesLV();
	int m1m3_shm_getEvent_AppliedStaticForcesLV(m1m3_logevent_AppliedStaticForcesLV *logevent_AppliedStaticForces_Ctl );
	int m1m3_shm_logEvent_AppliedStaticForcesLV(m1m3_logevent_AppliedStaticForcesLV *logevent_AppliedStaticForces_Ctl );
        int m1m3_shm_registerCallback_logevent_AppliedStaticForcesLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_AppliedStaticForcesLV();
        int m1m3_shm_registerCallback_logevent_AppliedStaticForces_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_AppliedStaticForces_ackcmdLV();

        int m1m3_shm_salEvent_AppliedThermalForcesLV();
	int m1m3_shm_flushSamplesEvent_AppliedThermalForcesLV();
	int m1m3_shm_getEvent_AppliedThermalForcesLV(m1m3_logevent_AppliedThermalForcesLV *logevent_AppliedThermalForces_Ctl );
	int m1m3_shm_logEvent_AppliedThermalForcesLV(m1m3_logevent_AppliedThermalForcesLV *logevent_AppliedThermalForces_Ctl );
        int m1m3_shm_registerCallback_logevent_AppliedThermalForcesLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_AppliedThermalForcesLV();
        int m1m3_shm_registerCallback_logevent_AppliedThermalForces_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_AppliedThermalForces_ackcmdLV();

        int m1m3_shm_salEvent_AppliedVelocityForcesLV();
	int m1m3_shm_flushSamplesEvent_AppliedVelocityForcesLV();
	int m1m3_shm_getEvent_AppliedVelocityForcesLV(m1m3_logevent_AppliedVelocityForcesLV *logevent_AppliedVelocityForces_Ctl );
	int m1m3_shm_logEvent_AppliedVelocityForcesLV(m1m3_logevent_AppliedVelocityForcesLV *logevent_AppliedVelocityForces_Ctl );
        int m1m3_shm_registerCallback_logevent_AppliedVelocityForcesLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_AppliedVelocityForcesLV();
        int m1m3_shm_registerCallback_logevent_AppliedVelocityForces_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_AppliedVelocityForces_ackcmdLV();

        int m1m3_shm_salEvent_CellLightStatusLV();
	int m1m3_shm_flushSamplesEvent_CellLightStatusLV();
	int m1m3_shm_getEvent_CellLightStatusLV(m1m3_logevent_CellLightStatusLV *logevent_CellLightStatus_Ctl );
	int m1m3_shm_logEvent_CellLightStatusLV(m1m3_logevent_CellLightStatusLV *logevent_CellLightStatus_Ctl );
        int m1m3_shm_registerCallback_logevent_CellLightStatusLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_CellLightStatusLV();
        int m1m3_shm_registerCallback_logevent_CellLightStatus_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_CellLightStatus_ackcmdLV();

        int m1m3_shm_salEvent_CellLightWarningLV();
	int m1m3_shm_flushSamplesEvent_CellLightWarningLV();
	int m1m3_shm_getEvent_CellLightWarningLV(m1m3_logevent_CellLightWarningLV *logevent_CellLightWarning_Ctl );
	int m1m3_shm_logEvent_CellLightWarningLV(m1m3_logevent_CellLightWarningLV *logevent_CellLightWarning_Ctl );
        int m1m3_shm_registerCallback_logevent_CellLightWarningLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_CellLightWarningLV();
        int m1m3_shm_registerCallback_logevent_CellLightWarning_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_CellLightWarning_ackcmdLV();

        int m1m3_shm_salEvent_CommandRejectionWarningLV();
	int m1m3_shm_flushSamplesEvent_CommandRejectionWarningLV();
	int m1m3_shm_getEvent_CommandRejectionWarningLV(m1m3_logevent_CommandRejectionWarningLV *logevent_CommandRejectionWarning_Ctl );
	int m1m3_shm_logEvent_CommandRejectionWarningLV(m1m3_logevent_CommandRejectionWarningLV *logevent_CommandRejectionWarning_Ctl );
        int m1m3_shm_registerCallback_logevent_CommandRejectionWarningLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_CommandRejectionWarningLV();
        int m1m3_shm_registerCallback_logevent_CommandRejectionWarning_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_CommandRejectionWarning_ackcmdLV();

        int m1m3_shm_salEvent_DetailedStateLV();
	int m1m3_shm_flushSamplesEvent_DetailedStateLV();
	int m1m3_shm_getEvent_DetailedStateLV(m1m3_logevent_DetailedStateLV *logevent_DetailedState_Ctl );
	int m1m3_shm_logEvent_DetailedStateLV(m1m3_logevent_DetailedStateLV *logevent_DetailedState_Ctl );
        int m1m3_shm_registerCallback_logevent_DetailedStateLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_DetailedStateLV();
        int m1m3_shm_registerCallback_logevent_DetailedState_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_DetailedState_ackcmdLV();

        int m1m3_shm_salEvent_DisplacementSensorWarningLV();
	int m1m3_shm_flushSamplesEvent_DisplacementSensorWarningLV();
	int m1m3_shm_getEvent_DisplacementSensorWarningLV(m1m3_logevent_DisplacementSensorWarningLV *logevent_DisplacementSensorWarning_Ctl );
	int m1m3_shm_logEvent_DisplacementSensorWarningLV(m1m3_logevent_DisplacementSensorWarningLV *logevent_DisplacementSensorWarning_Ctl );
        int m1m3_shm_registerCallback_logevent_DisplacementSensorWarningLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_DisplacementSensorWarningLV();
        int m1m3_shm_registerCallback_logevent_DisplacementSensorWarning_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_DisplacementSensorWarning_ackcmdLV();

        int m1m3_shm_salEvent_ErrorCodeLV();
	int m1m3_shm_flushSamplesEvent_ErrorCodeLV();
	int m1m3_shm_getEvent_ErrorCodeLV(m1m3_logevent_ErrorCodeLV *logevent_ErrorCode_Ctl );
	int m1m3_shm_logEvent_ErrorCodeLV(m1m3_logevent_ErrorCodeLV *logevent_ErrorCode_Ctl );
        int m1m3_shm_registerCallback_logevent_ErrorCodeLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_ErrorCodeLV();
        int m1m3_shm_registerCallback_logevent_ErrorCode_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_ErrorCode_ackcmdLV();

        int m1m3_shm_salEvent_ForceActuatorForceWarningLV();
	int m1m3_shm_flushSamplesEvent_ForceActuatorForceWarningLV();
	int m1m3_shm_getEvent_ForceActuatorForceWarningLV(m1m3_logevent_ForceActuatorForceWarningLV *logevent_ForceActuatorForceWarning_Ctl );
	int m1m3_shm_logEvent_ForceActuatorForceWarningLV(m1m3_logevent_ForceActuatorForceWarningLV *logevent_ForceActuatorForceWarning_Ctl );
        int m1m3_shm_registerCallback_logevent_ForceActuatorForceWarningLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_ForceActuatorForceWarningLV();
        int m1m3_shm_registerCallback_logevent_ForceActuatorForceWarning_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_ForceActuatorForceWarning_ackcmdLV();

        int m1m3_shm_salEvent_ForceActuatorInfoLV();
	int m1m3_shm_flushSamplesEvent_ForceActuatorInfoLV();
	int m1m3_shm_getEvent_ForceActuatorInfoLV(m1m3_logevent_ForceActuatorInfoLV *logevent_ForceActuatorInfo_Ctl );
	int m1m3_shm_logEvent_ForceActuatorInfoLV(m1m3_logevent_ForceActuatorInfoLV *logevent_ForceActuatorInfo_Ctl );
        int m1m3_shm_registerCallback_logevent_ForceActuatorInfoLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_ForceActuatorInfoLV();
        int m1m3_shm_registerCallback_logevent_ForceActuatorInfo_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_ForceActuatorInfo_ackcmdLV();

        int m1m3_shm_salEvent_ForceActuatorStateLV();
	int m1m3_shm_flushSamplesEvent_ForceActuatorStateLV();
	int m1m3_shm_getEvent_ForceActuatorStateLV(m1m3_logevent_ForceActuatorStateLV *logevent_ForceActuatorState_Ctl );
	int m1m3_shm_logEvent_ForceActuatorStateLV(m1m3_logevent_ForceActuatorStateLV *logevent_ForceActuatorState_Ctl );
        int m1m3_shm_registerCallback_logevent_ForceActuatorStateLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_ForceActuatorStateLV();
        int m1m3_shm_registerCallback_logevent_ForceActuatorState_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_ForceActuatorState_ackcmdLV();

        int m1m3_shm_salEvent_ForceActuatorWarningLV();
	int m1m3_shm_flushSamplesEvent_ForceActuatorWarningLV();
	int m1m3_shm_getEvent_ForceActuatorWarningLV(m1m3_logevent_ForceActuatorWarningLV *logevent_ForceActuatorWarning_Ctl );
	int m1m3_shm_logEvent_ForceActuatorWarningLV(m1m3_logevent_ForceActuatorWarningLV *logevent_ForceActuatorWarning_Ctl );
        int m1m3_shm_registerCallback_logevent_ForceActuatorWarningLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_ForceActuatorWarningLV();
        int m1m3_shm_registerCallback_logevent_ForceActuatorWarning_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_ForceActuatorWarning_ackcmdLV();

        int m1m3_shm_salEvent_ForceSetpointWarningLV();
	int m1m3_shm_flushSamplesEvent_ForceSetpointWarningLV();
	int m1m3_shm_getEvent_ForceSetpointWarningLV(m1m3_logevent_ForceSetpointWarningLV *logevent_ForceSetpointWarning_Ctl );
	int m1m3_shm_logEvent_ForceSetpointWarningLV(m1m3_logevent_ForceSetpointWarningLV *logevent_ForceSetpointWarning_Ctl );
        int m1m3_shm_registerCallback_logevent_ForceSetpointWarningLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_ForceSetpointWarningLV();
        int m1m3_shm_registerCallback_logevent_ForceSetpointWarning_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_ForceSetpointWarning_ackcmdLV();

        int m1m3_shm_salEvent_GyroWarningLV();
	int m1m3_shm_flushSamplesEvent_GyroWarningLV();
	int m1m3_shm_getEvent_GyroWarningLV(m1m3_logevent_GyroWarningLV *logevent_GyroWarning_Ctl );
	int m1m3_shm_logEvent_GyroWarningLV(m1m3_logevent_GyroWarningLV *logevent_GyroWarning_Ctl );
        int m1m3_shm_registerCallback_logevent_GyroWarningLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_GyroWarningLV();
        int m1m3_shm_registerCallback_logevent_GyroWarning_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_GyroWarning_ackcmdLV();

        int m1m3_shm_salEvent_HardpointActuatorInfoLV();
	int m1m3_shm_flushSamplesEvent_HardpointActuatorInfoLV();
	int m1m3_shm_getEvent_HardpointActuatorInfoLV(m1m3_logevent_HardpointActuatorInfoLV *logevent_HardpointActuatorInfo_Ctl );
	int m1m3_shm_logEvent_HardpointActuatorInfoLV(m1m3_logevent_HardpointActuatorInfoLV *logevent_HardpointActuatorInfo_Ctl );
        int m1m3_shm_registerCallback_logevent_HardpointActuatorInfoLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_HardpointActuatorInfoLV();
        int m1m3_shm_registerCallback_logevent_HardpointActuatorInfo_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_HardpointActuatorInfo_ackcmdLV();

        int m1m3_shm_salEvent_HardpointActuatorStateLV();
	int m1m3_shm_flushSamplesEvent_HardpointActuatorStateLV();
	int m1m3_shm_getEvent_HardpointActuatorStateLV(m1m3_logevent_HardpointActuatorStateLV *logevent_HardpointActuatorState_Ctl );
	int m1m3_shm_logEvent_HardpointActuatorStateLV(m1m3_logevent_HardpointActuatorStateLV *logevent_HardpointActuatorState_Ctl );
        int m1m3_shm_registerCallback_logevent_HardpointActuatorStateLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_HardpointActuatorStateLV();
        int m1m3_shm_registerCallback_logevent_HardpointActuatorState_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_HardpointActuatorState_ackcmdLV();

        int m1m3_shm_salEvent_HardpointActuatorWarningLV();
	int m1m3_shm_flushSamplesEvent_HardpointActuatorWarningLV();
	int m1m3_shm_getEvent_HardpointActuatorWarningLV(m1m3_logevent_HardpointActuatorWarningLV *logevent_HardpointActuatorWarning_Ctl );
	int m1m3_shm_logEvent_HardpointActuatorWarningLV(m1m3_logevent_HardpointActuatorWarningLV *logevent_HardpointActuatorWarning_Ctl );
        int m1m3_shm_registerCallback_logevent_HardpointActuatorWarningLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_HardpointActuatorWarningLV();
        int m1m3_shm_registerCallback_logevent_HardpointActuatorWarning_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_HardpointActuatorWarning_ackcmdLV();

        int m1m3_shm_salEvent_HardpointMonitorInfoLV();
	int m1m3_shm_flushSamplesEvent_HardpointMonitorInfoLV();
	int m1m3_shm_getEvent_HardpointMonitorInfoLV(m1m3_logevent_HardpointMonitorInfoLV *logevent_HardpointMonitorInfo_Ctl );
	int m1m3_shm_logEvent_HardpointMonitorInfoLV(m1m3_logevent_HardpointMonitorInfoLV *logevent_HardpointMonitorInfo_Ctl );
        int m1m3_shm_registerCallback_logevent_HardpointMonitorInfoLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_HardpointMonitorInfoLV();
        int m1m3_shm_registerCallback_logevent_HardpointMonitorInfo_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_HardpointMonitorInfo_ackcmdLV();

        int m1m3_shm_salEvent_HardpointMonitorStateLV();
	int m1m3_shm_flushSamplesEvent_HardpointMonitorStateLV();
	int m1m3_shm_getEvent_HardpointMonitorStateLV(m1m3_logevent_HardpointMonitorStateLV *logevent_HardpointMonitorState_Ctl );
	int m1m3_shm_logEvent_HardpointMonitorStateLV(m1m3_logevent_HardpointMonitorStateLV *logevent_HardpointMonitorState_Ctl );
        int m1m3_shm_registerCallback_logevent_HardpointMonitorStateLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_HardpointMonitorStateLV();
        int m1m3_shm_registerCallback_logevent_HardpointMonitorState_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_HardpointMonitorState_ackcmdLV();

        int m1m3_shm_salEvent_HardpointMonitorWarningLV();
	int m1m3_shm_flushSamplesEvent_HardpointMonitorWarningLV();
	int m1m3_shm_getEvent_HardpointMonitorWarningLV(m1m3_logevent_HardpointMonitorWarningLV *logevent_HardpointMonitorWarning_Ctl );
	int m1m3_shm_logEvent_HardpointMonitorWarningLV(m1m3_logevent_HardpointMonitorWarningLV *logevent_HardpointMonitorWarning_Ctl );
        int m1m3_shm_registerCallback_logevent_HardpointMonitorWarningLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_HardpointMonitorWarningLV();
        int m1m3_shm_registerCallback_logevent_HardpointMonitorWarning_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_HardpointMonitorWarning_ackcmdLV();

        int m1m3_shm_salEvent_ILCWarningLV();
	int m1m3_shm_flushSamplesEvent_ILCWarningLV();
	int m1m3_shm_getEvent_ILCWarningLV(m1m3_logevent_ILCWarningLV *logevent_ILCWarning_Ctl );
	int m1m3_shm_logEvent_ILCWarningLV(m1m3_logevent_ILCWarningLV *logevent_ILCWarning_Ctl );
        int m1m3_shm_registerCallback_logevent_ILCWarningLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_ILCWarningLV();
        int m1m3_shm_registerCallback_logevent_ILCWarning_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_ILCWarning_ackcmdLV();

        int m1m3_shm_salEvent_InclinometerSensorWarningLV();
	int m1m3_shm_flushSamplesEvent_InclinometerSensorWarningLV();
	int m1m3_shm_getEvent_InclinometerSensorWarningLV(m1m3_logevent_InclinometerSensorWarningLV *logevent_InclinometerSensorWarning_Ctl );
	int m1m3_shm_logEvent_InclinometerSensorWarningLV(m1m3_logevent_InclinometerSensorWarningLV *logevent_InclinometerSensorWarning_Ctl );
        int m1m3_shm_registerCallback_logevent_InclinometerSensorWarningLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_InclinometerSensorWarningLV();
        int m1m3_shm_registerCallback_logevent_InclinometerSensorWarning_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_InclinometerSensorWarning_ackcmdLV();

        int m1m3_shm_salEvent_InterlockStatusLV();
	int m1m3_shm_flushSamplesEvent_InterlockStatusLV();
	int m1m3_shm_getEvent_InterlockStatusLV(m1m3_logevent_InterlockStatusLV *logevent_InterlockStatus_Ctl );
	int m1m3_shm_logEvent_InterlockStatusLV(m1m3_logevent_InterlockStatusLV *logevent_InterlockStatus_Ctl );
        int m1m3_shm_registerCallback_logevent_InterlockStatusLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_InterlockStatusLV();
        int m1m3_shm_registerCallback_logevent_InterlockStatus_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_InterlockStatus_ackcmdLV();

        int m1m3_shm_salEvent_InterlockWarningLV();
	int m1m3_shm_flushSamplesEvent_InterlockWarningLV();
	int m1m3_shm_getEvent_InterlockWarningLV(m1m3_logevent_InterlockWarningLV *logevent_InterlockWarning_Ctl );
	int m1m3_shm_logEvent_InterlockWarningLV(m1m3_logevent_InterlockWarningLV *logevent_InterlockWarning_Ctl );
        int m1m3_shm_registerCallback_logevent_InterlockWarningLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_InterlockWarningLV();
        int m1m3_shm_registerCallback_logevent_InterlockWarning_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_InterlockWarning_ackcmdLV();

        int m1m3_shm_salEvent_PIDInfoLV();
	int m1m3_shm_flushSamplesEvent_PIDInfoLV();
	int m1m3_shm_getEvent_PIDInfoLV(m1m3_logevent_PIDInfoLV *logevent_PIDInfo_Ctl );
	int m1m3_shm_logEvent_PIDInfoLV(m1m3_logevent_PIDInfoLV *logevent_PIDInfo_Ctl );
        int m1m3_shm_registerCallback_logevent_PIDInfoLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_PIDInfoLV();
        int m1m3_shm_registerCallback_logevent_PIDInfo_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_PIDInfo_ackcmdLV();

        int m1m3_shm_salEvent_PowerStatusLV();
	int m1m3_shm_flushSamplesEvent_PowerStatusLV();
	int m1m3_shm_getEvent_PowerStatusLV(m1m3_logevent_PowerStatusLV *logevent_PowerStatus_Ctl );
	int m1m3_shm_logEvent_PowerStatusLV(m1m3_logevent_PowerStatusLV *logevent_PowerStatus_Ctl );
        int m1m3_shm_registerCallback_logevent_PowerStatusLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_PowerStatusLV();
        int m1m3_shm_registerCallback_logevent_PowerStatus_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_PowerStatus_ackcmdLV();

        int m1m3_shm_salEvent_PowerSupplyStatusLV();
	int m1m3_shm_flushSamplesEvent_PowerSupplyStatusLV();
	int m1m3_shm_getEvent_PowerSupplyStatusLV(m1m3_logevent_PowerSupplyStatusLV *logevent_PowerSupplyStatus_Ctl );
	int m1m3_shm_logEvent_PowerSupplyStatusLV(m1m3_logevent_PowerSupplyStatusLV *logevent_PowerSupplyStatus_Ctl );
        int m1m3_shm_registerCallback_logevent_PowerSupplyStatusLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_PowerSupplyStatusLV();
        int m1m3_shm_registerCallback_logevent_PowerSupplyStatus_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_PowerSupplyStatus_ackcmdLV();

        int m1m3_shm_salEvent_PowerWarningLV();
	int m1m3_shm_flushSamplesEvent_PowerWarningLV();
	int m1m3_shm_getEvent_PowerWarningLV(m1m3_logevent_PowerWarningLV *logevent_PowerWarning_Ctl );
	int m1m3_shm_logEvent_PowerWarningLV(m1m3_logevent_PowerWarningLV *logevent_PowerWarning_Ctl );
        int m1m3_shm_registerCallback_logevent_PowerWarningLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_PowerWarningLV();
        int m1m3_shm_registerCallback_logevent_PowerWarning_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_PowerWarning_ackcmdLV();

        int m1m3_shm_salEvent_RejectedAberrationForcesLV();
	int m1m3_shm_flushSamplesEvent_RejectedAberrationForcesLV();
	int m1m3_shm_getEvent_RejectedAberrationForcesLV(m1m3_logevent_RejectedAberrationForcesLV *logevent_RejectedAberrationForces_Ctl );
	int m1m3_shm_logEvent_RejectedAberrationForcesLV(m1m3_logevent_RejectedAberrationForcesLV *logevent_RejectedAberrationForces_Ctl );
        int m1m3_shm_registerCallback_logevent_RejectedAberrationForcesLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_RejectedAberrationForcesLV();
        int m1m3_shm_registerCallback_logevent_RejectedAberrationForces_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_RejectedAberrationForces_ackcmdLV();

        int m1m3_shm_salEvent_RejectedAccelerationForcesLV();
	int m1m3_shm_flushSamplesEvent_RejectedAccelerationForcesLV();
	int m1m3_shm_getEvent_RejectedAccelerationForcesLV(m1m3_logevent_RejectedAccelerationForcesLV *logevent_RejectedAccelerationForces_Ctl );
	int m1m3_shm_logEvent_RejectedAccelerationForcesLV(m1m3_logevent_RejectedAccelerationForcesLV *logevent_RejectedAccelerationForces_Ctl );
        int m1m3_shm_registerCallback_logevent_RejectedAccelerationForcesLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_RejectedAccelerationForcesLV();
        int m1m3_shm_registerCallback_logevent_RejectedAccelerationForces_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_RejectedAccelerationForces_ackcmdLV();

        int m1m3_shm_salEvent_RejectedActiveOpticForcesLV();
	int m1m3_shm_flushSamplesEvent_RejectedActiveOpticForcesLV();
	int m1m3_shm_getEvent_RejectedActiveOpticForcesLV(m1m3_logevent_RejectedActiveOpticForcesLV *logevent_RejectedActiveOpticForces_Ctl );
	int m1m3_shm_logEvent_RejectedActiveOpticForcesLV(m1m3_logevent_RejectedActiveOpticForcesLV *logevent_RejectedActiveOpticForces_Ctl );
        int m1m3_shm_registerCallback_logevent_RejectedActiveOpticForcesLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_RejectedActiveOpticForcesLV();
        int m1m3_shm_registerCallback_logevent_RejectedActiveOpticForces_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_RejectedActiveOpticForces_ackcmdLV();

        int m1m3_shm_salEvent_RejectedAzimuthForcesLV();
	int m1m3_shm_flushSamplesEvent_RejectedAzimuthForcesLV();
	int m1m3_shm_getEvent_RejectedAzimuthForcesLV(m1m3_logevent_RejectedAzimuthForcesLV *logevent_RejectedAzimuthForces_Ctl );
	int m1m3_shm_logEvent_RejectedAzimuthForcesLV(m1m3_logevent_RejectedAzimuthForcesLV *logevent_RejectedAzimuthForces_Ctl );
        int m1m3_shm_registerCallback_logevent_RejectedAzimuthForcesLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_RejectedAzimuthForcesLV();
        int m1m3_shm_registerCallback_logevent_RejectedAzimuthForces_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_RejectedAzimuthForces_ackcmdLV();

        int m1m3_shm_salEvent_RejectedBalanceForcesLV();
	int m1m3_shm_flushSamplesEvent_RejectedBalanceForcesLV();
	int m1m3_shm_getEvent_RejectedBalanceForcesLV(m1m3_logevent_RejectedBalanceForcesLV *logevent_RejectedBalanceForces_Ctl );
	int m1m3_shm_logEvent_RejectedBalanceForcesLV(m1m3_logevent_RejectedBalanceForcesLV *logevent_RejectedBalanceForces_Ctl );
        int m1m3_shm_registerCallback_logevent_RejectedBalanceForcesLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_RejectedBalanceForcesLV();
        int m1m3_shm_registerCallback_logevent_RejectedBalanceForces_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_RejectedBalanceForces_ackcmdLV();

        int m1m3_shm_salEvent_RejectedCylinderForcesLV();
	int m1m3_shm_flushSamplesEvent_RejectedCylinderForcesLV();
	int m1m3_shm_getEvent_RejectedCylinderForcesLV(m1m3_logevent_RejectedCylinderForcesLV *logevent_RejectedCylinderForces_Ctl );
	int m1m3_shm_logEvent_RejectedCylinderForcesLV(m1m3_logevent_RejectedCylinderForcesLV *logevent_RejectedCylinderForces_Ctl );
        int m1m3_shm_registerCallback_logevent_RejectedCylinderForcesLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_RejectedCylinderForcesLV();
        int m1m3_shm_registerCallback_logevent_RejectedCylinderForces_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_RejectedCylinderForces_ackcmdLV();

        int m1m3_shm_salEvent_RejectedElevationForcesLV();
	int m1m3_shm_flushSamplesEvent_RejectedElevationForcesLV();
	int m1m3_shm_getEvent_RejectedElevationForcesLV(m1m3_logevent_RejectedElevationForcesLV *logevent_RejectedElevationForces_Ctl );
	int m1m3_shm_logEvent_RejectedElevationForcesLV(m1m3_logevent_RejectedElevationForcesLV *logevent_RejectedElevationForces_Ctl );
        int m1m3_shm_registerCallback_logevent_RejectedElevationForcesLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_RejectedElevationForcesLV();
        int m1m3_shm_registerCallback_logevent_RejectedElevationForces_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_RejectedElevationForces_ackcmdLV();

        int m1m3_shm_salEvent_RejectedForcesLV();
	int m1m3_shm_flushSamplesEvent_RejectedForcesLV();
	int m1m3_shm_getEvent_RejectedForcesLV(m1m3_logevent_RejectedForcesLV *logevent_RejectedForces_Ctl );
	int m1m3_shm_logEvent_RejectedForcesLV(m1m3_logevent_RejectedForcesLV *logevent_RejectedForces_Ctl );
        int m1m3_shm_registerCallback_logevent_RejectedForcesLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_RejectedForcesLV();
        int m1m3_shm_registerCallback_logevent_RejectedForces_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_RejectedForces_ackcmdLV();

        int m1m3_shm_salEvent_RejectedOffsetForcesLV();
	int m1m3_shm_flushSamplesEvent_RejectedOffsetForcesLV();
	int m1m3_shm_getEvent_RejectedOffsetForcesLV(m1m3_logevent_RejectedOffsetForcesLV *logevent_RejectedOffsetForces_Ctl );
	int m1m3_shm_logEvent_RejectedOffsetForcesLV(m1m3_logevent_RejectedOffsetForcesLV *logevent_RejectedOffsetForces_Ctl );
        int m1m3_shm_registerCallback_logevent_RejectedOffsetForcesLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_RejectedOffsetForcesLV();
        int m1m3_shm_registerCallback_logevent_RejectedOffsetForces_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_RejectedOffsetForces_ackcmdLV();

        int m1m3_shm_salEvent_RejectedStaticForcesLV();
	int m1m3_shm_flushSamplesEvent_RejectedStaticForcesLV();
	int m1m3_shm_getEvent_RejectedStaticForcesLV(m1m3_logevent_RejectedStaticForcesLV *logevent_RejectedStaticForces_Ctl );
	int m1m3_shm_logEvent_RejectedStaticForcesLV(m1m3_logevent_RejectedStaticForcesLV *logevent_RejectedStaticForces_Ctl );
        int m1m3_shm_registerCallback_logevent_RejectedStaticForcesLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_RejectedStaticForcesLV();
        int m1m3_shm_registerCallback_logevent_RejectedStaticForces_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_RejectedStaticForces_ackcmdLV();

        int m1m3_shm_salEvent_RejectedThermalForcesLV();
	int m1m3_shm_flushSamplesEvent_RejectedThermalForcesLV();
	int m1m3_shm_getEvent_RejectedThermalForcesLV(m1m3_logevent_RejectedThermalForcesLV *logevent_RejectedThermalForces_Ctl );
	int m1m3_shm_logEvent_RejectedThermalForcesLV(m1m3_logevent_RejectedThermalForcesLV *logevent_RejectedThermalForces_Ctl );
        int m1m3_shm_registerCallback_logevent_RejectedThermalForcesLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_RejectedThermalForcesLV();
        int m1m3_shm_registerCallback_logevent_RejectedThermalForces_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_RejectedThermalForces_ackcmdLV();

        int m1m3_shm_salEvent_RejectedVelocityForcesLV();
	int m1m3_shm_flushSamplesEvent_RejectedVelocityForcesLV();
	int m1m3_shm_getEvent_RejectedVelocityForcesLV(m1m3_logevent_RejectedVelocityForcesLV *logevent_RejectedVelocityForces_Ctl );
	int m1m3_shm_logEvent_RejectedVelocityForcesLV(m1m3_logevent_RejectedVelocityForcesLV *logevent_RejectedVelocityForces_Ctl );
        int m1m3_shm_registerCallback_logevent_RejectedVelocityForcesLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_RejectedVelocityForcesLV();
        int m1m3_shm_registerCallback_logevent_RejectedVelocityForces_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_RejectedVelocityForces_ackcmdLV();

        int m1m3_shm_salEvent_SettingVersionsLV();
	int m1m3_shm_flushSamplesEvent_SettingVersionsLV();
	int m1m3_shm_getEvent_SettingVersionsLV(m1m3_logevent_SettingVersionsLV *logevent_SettingVersions_Ctl );
	int m1m3_shm_logEvent_SettingVersionsLV(m1m3_logevent_SettingVersionsLV *logevent_SettingVersions_Ctl );
        int m1m3_shm_registerCallback_logevent_SettingVersionsLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_SettingVersionsLV();
        int m1m3_shm_registerCallback_logevent_SettingVersions_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_SettingVersions_ackcmdLV();

        int m1m3_shm_salEvent_SettingsAppliedLV();
	int m1m3_shm_flushSamplesEvent_SettingsAppliedLV();
	int m1m3_shm_getEvent_SettingsAppliedLV(m1m3_logevent_SettingsAppliedLV *logevent_SettingsApplied_Ctl );
	int m1m3_shm_logEvent_SettingsAppliedLV(m1m3_logevent_SettingsAppliedLV *logevent_SettingsApplied_Ctl );
        int m1m3_shm_registerCallback_logevent_SettingsAppliedLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_SettingsAppliedLV();
        int m1m3_shm_registerCallback_logevent_SettingsApplied_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_SettingsApplied_ackcmdLV();

        int m1m3_shm_salEvent_SummaryStateLV();
	int m1m3_shm_flushSamplesEvent_SummaryStateLV();
	int m1m3_shm_getEvent_SummaryStateLV(m1m3_logevent_SummaryStateLV *logevent_SummaryState_Ctl );
	int m1m3_shm_logEvent_SummaryStateLV(m1m3_logevent_SummaryStateLV *logevent_SummaryState_Ctl );
        int m1m3_shm_registerCallback_logevent_SummaryStateLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_SummaryStateLV();
        int m1m3_shm_registerCallback_logevent_SummaryState_ackcmdLV(int handle, bool skipOld);
        int m1m3_shm_cancelCallback_logevent_SummaryState_ackcmdLV();
